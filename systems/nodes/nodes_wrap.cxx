/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.1.0
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */


#ifndef SWIGLUA
#define SWIGLUA
#endif

#define SWIG_LUA_TARGET SWIG_LUA_FLAVOR_LUA
#define SWIG_LUA_MODULE_GLOBAL


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif

/* -----------------------------------------------------------------------------
 * swigrun.swg
 *
 * This file contains generic C API SWIG runtime support for pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "4"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
# define SWIG_QUOTE_STRING(x) #x
# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the SWIG runtime code.
  In 99.9% of the cases, SWIG just needs to declare them as 'static'.

  But only do this if strictly necessary, ie, if you have problems
  with your compiler or suchlike.
*/

#ifndef SWIGRUNTIME
# define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

/*  Generic buffer size */
#ifndef SWIG_BUFFER_SIZE
# define SWIG_BUFFER_SIZE 1024
#endif

/* Flags for pointer conversions */
#define SWIG_POINTER_DISOWN        0x1
#define SWIG_CAST_NEW_MEMORY       0x2
#define SWIG_POINTER_NO_NULL       0x4

/* Flags for new pointer objects */
#define SWIG_POINTER_OWN           0x1


/*
   Flags/methods for returning states.

   The SWIG conversion methods, as ConvertPtr, return an integer
   that tells if the conversion was successful or not. And if not,
   an error code can be returned (see swigerrors.swg for the codes).

   Use the following macros/flags to set or process the returning
   states.

   In old versions of SWIG, code such as the following was usually written:

     if (SWIG_ConvertPtr(obj,vptr,ty.flags) != -1) {
       // success code
     } else {
       //fail code
     }

   Now you can be more explicit:

    int res = SWIG_ConvertPtr(obj,vptr,ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
    } else {
      // fail code
    }

   which is the same really, but now you can also do

    Type *ptr;
    int res = SWIG_ConvertPtr(obj,(void **)(&ptr),ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
      if (SWIG_IsNewObj(res) {
        ...
	delete *ptr;
      } else {
        ...
      }
    } else {
      // fail code
    }

   I.e., now SWIG_ConvertPtr can return new objects and you can
   identify the case and take care of the deallocation. Of course that
   also requires SWIG_ConvertPtr to return new result values, such as

      int SWIG_ConvertPtr(obj, ptr,...) {
        if (<obj is ok>) {
          if (<need new object>) {
            *ptr = <ptr to new allocated object>;
            return SWIG_NEWOBJ;
          } else {
            *ptr = <ptr to old object>;
            return SWIG_OLDOBJ;
          }
        } else {
          return SWIG_BADOBJ;
        }
      }

   Of course, returning the plain '0(success)/-1(fail)' still works, but you can be
   more explicit by returning SWIG_BADOBJ, SWIG_ERROR or any of the
   SWIG errors code.

   Finally, if the SWIG_CASTRANK_MODE is enabled, the result code
   allows returning the 'cast rank', for example, if you have this

       int food(double)
       int fooi(int);

   and you call

      food(1)   // cast rank '1'  (1 -> 1.0)
      fooi(1)   // cast rank '0'

   just use the SWIG_AddCast()/SWIG_CheckState()
*/

#define SWIG_OK                    (0)
#define SWIG_ERROR                 (-1)
#define SWIG_IsOK(r)               (r >= 0)
#define SWIG_ArgError(r)           ((r != SWIG_ERROR) ? r : SWIG_TypeError)

/* The CastRankLimit says how many bits are used for the cast rank */
#define SWIG_CASTRANKLIMIT         (1 << 8)
/* The NewMask denotes the object was created (using new/malloc) */
#define SWIG_NEWOBJMASK            (SWIG_CASTRANKLIMIT  << 1)
/* The TmpMask is for in/out typemaps that use temporal objects */
#define SWIG_TMPOBJMASK            (SWIG_NEWOBJMASK << 1)
/* Simple returning values */
#define SWIG_BADOBJ                (SWIG_ERROR)
#define SWIG_OLDOBJ                (SWIG_OK)
#define SWIG_NEWOBJ                (SWIG_OK | SWIG_NEWOBJMASK)
#define SWIG_TMPOBJ                (SWIG_OK | SWIG_TMPOBJMASK)
/* Check, add and del mask methods */
#define SWIG_AddNewMask(r)         (SWIG_IsOK(r) ? (r | SWIG_NEWOBJMASK) : r)
#define SWIG_DelNewMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_NEWOBJMASK) : r)
#define SWIG_IsNewObj(r)           (SWIG_IsOK(r) && (r & SWIG_NEWOBJMASK))
#define SWIG_AddTmpMask(r)         (SWIG_IsOK(r) ? (r | SWIG_TMPOBJMASK) : r)
#define SWIG_DelTmpMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_TMPOBJMASK) : r)
#define SWIG_IsTmpObj(r)           (SWIG_IsOK(r) && (r & SWIG_TMPOBJMASK))

/* Cast-Rank Mode */
#if defined(SWIG_CASTRANK_MODE)
#  ifndef SWIG_TypeRank
#    define SWIG_TypeRank             unsigned long
#  endif
#  ifndef SWIG_MAXCASTRANK            /* Default cast allowed */
#    define SWIG_MAXCASTRANK          (2)
#  endif
#  define SWIG_CASTRANKMASK          ((SWIG_CASTRANKLIMIT) -1)
#  define SWIG_CastRank(r)           (r & SWIG_CASTRANKMASK)
SWIGINTERNINLINE int SWIG_AddCast(int r) {
  return SWIG_IsOK(r) ? ((SWIG_CastRank(r) < SWIG_MAXCASTRANK) ? (r + 1) : SWIG_ERROR) : r;
}
SWIGINTERNINLINE int SWIG_CheckState(int r) {
  return SWIG_IsOK(r) ? SWIG_CastRank(r) + 1 : 0;
}
#else /* no cast-rank mode */
#  define SWIG_AddCast(r) (r)
#  define SWIG_CheckState(r) (SWIG_IsOK(r) ? 1 : 0)
#endif


#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *, int *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

/* Structure to store information on one type */
typedef struct swig_type_info {
  const char             *name;			/* mangled name of this type */
  const char             *str;			/* human readable name of this type */
  swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
  struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
  void                   *clientdata;		/* language specific type data */
  int                    owndata;		/* flag if the structure owns the clientdata */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
  swig_type_info         *type;			/* pointer to type that is equivalent to this type */
  swig_converter_func     converter;		/* function to cast the void pointers */
  struct swig_cast_info  *next;			/* pointer to next cast in linked list */
  struct swig_cast_info  *prev;			/* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
  swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
  size_t                 size;		        /* Number of types in this module */
  struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
  swig_type_info         **type_initial;	/* Array of initially generated type structures */
  swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
  void                    *clientdata;		/* Language specific module data */
} swig_module_info;

/*
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return (*f1 > *f2) ? 1 : -1;
  }
  return (int)((l1 - f1) - (l2 - f2));
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCmp(const char *nb, const char *tb) {
  int equiv = 1;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (equiv != 0 && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = SWIG_TypeNameComp(nb, ne, tb, te);
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  return SWIG_TypeCmp(nb, tb) == 0 ? 1 : 0;
}

/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (strcmp(iter->type->name, c) == 0) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Identical to SWIG_TypeCheck, except strcmp is replaced with a pointer comparison
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(const swig_type_info *from, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (iter->type == from) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr, int *newmemory) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr, newmemory);
}

/*
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  We choose
     to print the last name, as it is often (?) the most
     specific. */
  if (!type) return NULL;
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/*
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_cast_info *cast = ti->cast;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;

  while (cast) {
    if (!cast->converter) {
      swig_type_info *tc = cast->type;
      if (!tc->clientdata) {
	SWIG_TypeClientData(tc, clientdata);
      }
    }
    cast = cast->next;
  }
}
SWIGRUNTIME void
SWIG_TypeNewClientData(swig_type_info *ti, void *clientdata) {
  SWIG_TypeClientData(ti, clientdata);
  ti->owndata = 1;
}

/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start,
                            swig_module_info *end,
		            const char *name) {
  swig_module_info *iter = start;
  do {
    if (iter->size) {
      size_t l = 0;
      size_t r = iter->size - 1;
      do {
	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
	size_t i = (l + r) >> 1;
	const char *iname = iter->types[i]->name;
	if (iname) {
	  int compare = strcmp(name, iname);
	  if (compare == 0) {
	    return iter->types[i];
	  } else if (compare < 0) {
	    if (i) {
	      r = i - 1;
	    } else {
	      break;
	    }
	  } else if (compare > 0) {
	    l = i + 1;
	  }
	} else {
	  break; /* should never happen */
	}
      } while (l <= r);
    }
    iter = iter->next;
  } while (iter != end);
  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start,
                     swig_module_info *end,
		     const char *name) {
  /* STEP 1: Search the name field using binary search */
  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) {
    return ret;
  } else {
    /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
    swig_module_info *iter = start;
    do {
      size_t i = 0;
      for (; i < iter->size; ++i) {
	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
	  return iter->types[i];
      }
      iter = iter->next;
    } while (iter != end);
  }

  /* neither found a match */
  return 0;
}

/*
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  const unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/*
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    char d = *(c++);
    unsigned char uu;
    if ((d >= '0') && (d <= '9'))
      uu = (unsigned char)((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = (unsigned char)((d - ('a'-10)) << 4);
    else
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (unsigned char)(d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (unsigned char)(d - ('a'-10));
    else
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/*
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1
#define  SWIG_IOError        	   -2
#define  SWIG_RuntimeError   	   -3
#define  SWIG_IndexError     	   -4
#define  SWIG_TypeError      	   -5
#define  SWIG_DivisionByZero 	   -6
#define  SWIG_OverflowError  	   -7
#define  SWIG_SyntaxError    	   -8
#define  SWIG_ValueError     	   -9
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12
#define  SWIG_NullReferenceError   -13



/* -----------------------------------------------------------------------------
 * luarun.swg
 *
 * This file contains the runtime support for Lua modules
 * and includes code for managing global variables and pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#endif

#include "lua.h"
#include "lauxlib.h"
#include <stdlib.h>  /* for malloc */
#include <assert.h>  /* for a few sanity tests */

/* -----------------------------------------------------------------------------
 * Lua flavors
 * ----------------------------------------------------------------------------- */

#define SWIG_LUA_FLAVOR_LUA 1
#define SWIG_LUA_FLAVOR_ELUA 2
#define SWIG_LUA_FLAVOR_ELUAC 3

#if !defined(SWIG_LUA_TARGET)
# error SWIG_LUA_TARGET not defined
#endif

#if defined(SWIG_LUA_ELUA_EMULATE)

struct swig_elua_entry;

typedef struct swig_elua_key {
  int type;
  union {
    const char* strkey;
    lua_Number numkey;
  } key;
} swig_elua_key;

typedef struct swig_elua_val {
  int type;
  union {
    lua_Number number;
    const struct swig_elua_entry *table;
    const char *string;
    lua_CFunction function;
    struct {
      char member;
      long lvalue;
      void *pvalue;
      swig_type_info **ptype;
    } userdata;
  } value;
} swig_elua_val;

typedef struct swig_elua_entry {
  swig_elua_key key;
  swig_elua_val value;
} swig_elua_entry;

#define LSTRKEY(x) {LUA_TSTRING, {.strkey = x} }
#define LNUMKEY(x) {LUA_TNUMBER, {.numkey = x} }
#define LNILKEY {LUA_TNIL, {.strkey = 0} }

#define LNUMVAL(x) {LUA_TNUMBER, {.number = x} }
#define LFUNCVAL(x) {LUA_TFUNCTION, {.function = x} }
#define LROVAL(x) {LUA_TTABLE, {.table = x} }
#define LNILVAL {LUA_TNIL, {.string = 0} }
#define LSTRVAL(x) {LUA_TSTRING, {.string = x} }

#define LUA_REG_TYPE swig_elua_entry

#define SWIG_LUA_ELUA_EMUL_METATABLE_KEY "__metatable"

#define lua_pushrotable(L,p)\
  lua_newtable(L);\
  assert(p);\
  SWIG_Lua_elua_emulate_register(L,(swig_elua_entry*)(p));

#define SWIG_LUA_CONSTTAB_POINTER(B,C,D)\
  LSTRKEY(B), {LUA_TUSERDATA, { .userdata={0,0,(void*)(C),&D} } }

#define SWIG_LUA_CONSTTAB_BINARY(B,S,C,D)\
  LSTRKEY(B), {LUA_TUSERDATA, { .userdata={1,S,(void*)(C),&D} } }
#endif

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)
#  define SWIG_LUA_CONSTTAB_INT(B, C) LSTRKEY(B), LNUMVAL(C)
#  define SWIG_LUA_CONSTTAB_FLOAT(B, C) LSTRKEY(B), LNUMVAL(C)
#  define SWIG_LUA_CONSTTAB_STRING(B, C) LSTRKEY(B), LSTRVAL(C)
#  define SWIG_LUA_CONSTTAB_CHAR(B, C) LSTRKEY(B), LNUMVAL(C)
    /* Those two types of constants are not supported in elua */

#ifndef SWIG_LUA_CONSTTAB_POINTER
#warning eLua does not support pointers as constants. By default, nil will be used as value
#define SWIG_LUA_CONSTTAB_POINTER(B,C,D) LSTRKEY(B), LNILVAL
#endif

#ifndef SWIG_LUA_CONSTTAB_BINARY
#warning eLua does not support pointers to member as constants. By default, nil will be used as value
#define SWIG_LUA_CONSTTAB_BINARY(B, S, C, D) LSTRKEY(B), LNILVAL
#endif
#else /* SWIG_LUA_FLAVOR_LUA */
#  define SWIG_LUA_CONSTTAB_INT(B, C) SWIG_LUA_INT, (char *)B, (long)C, 0, 0, 0
#  define SWIG_LUA_CONSTTAB_FLOAT(B, C) SWIG_LUA_FLOAT, (char *)B, 0, (double)C, 0, 0
#  define SWIG_LUA_CONSTTAB_STRING(B, C) SWIG_LUA_STRING, (char *)B, 0, 0, (void *)C, 0
#  define SWIG_LUA_CONSTTAB_CHAR(B, C) SWIG_LUA_CHAR, (char *)B, (long)C, 0, 0, 0
#  define SWIG_LUA_CONSTTAB_POINTER(B,C,D)\
       SWIG_LUA_POINTER, (char *)B, 0, 0, (void *)C, &D
#  define SWIG_LUA_CONSTTAB_BINARY(B, S, C, D)\
       SWIG_LUA_BINARY,  (char *)B, S, 0, (void *)C, &D
#endif

#ifndef SWIG_LUA_ELUA_EMULATE
#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)
#  define LRO_STRVAL(v) {{.p = (char *) v}, LUA_TSTRING}
#  define LSTRVAL LRO_STRVAL
#endif
#endif /* SWIG_LUA_ELUA_EMULATE*/

#ifndef SWIG_LUA_ELUA_EMULATE
#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)

#ifndef MIN_OPT_LEVEL
#define MIN_OPT_LEVEL 2
#endif

#include "lrodefs.h"
#include "lrotable.h"
#endif
#endif /* SWIG_LUA_ELUA_EMULATE*/
/* -----------------------------------------------------------------------------
 * compatibility defines
 * ----------------------------------------------------------------------------- */

/* History of Lua C API length functions:  In Lua 5.0 (and before?)
   there was "lua_strlen".  In Lua 5.1, this was renamed "lua_objlen",
   but a compatibility define of "lua_strlen" was added.  In Lua 5.2,
   this function was again renamed, to "lua_rawlen" (to emphasize that
   it doesn't call the "__len" metamethod), and the compatibility
   define of lua_strlen was removed.  All SWIG uses have been updated
   to "lua_rawlen", and we add our own defines of that here for older
   versions of Lua.  */
#if !defined(LUA_VERSION_NUM) || LUA_VERSION_NUM < 501
# define lua_rawlen lua_strlen
#elif LUA_VERSION_NUM == 501
# define lua_rawlen lua_objlen
#endif


/* lua_pushglobaltable is the recommended "future-proof" way to get
   the global table for Lua 5.2 and later.  Here we define
   lua_pushglobaltable ourselves for Lua versions before 5.2.  */
#if !defined(LUA_VERSION_NUM) || LUA_VERSION_NUM < 502
# define lua_pushglobaltable(L) lua_pushvalue(L, LUA_GLOBALSINDEX)
#endif

/* lua_absindex was introduced in Lua 5.2 */
#if !defined(LUA_VERSION_NUM) || LUA_VERSION_NUM < 502
# define lua_absindex(L,i) ((i)>0 || (i) <= LUA_REGISTRYINDEX ? (i) : lua_gettop(L) + (i) + 1)
#endif

/* lua_rawsetp was introduced in Lua 5.2 */
#if !defined(LUA_VERSION_NUM) || LUA_VERSION_NUM < 502
#define lua_rawsetp(L,index,ptr)\
  lua_pushlightuserdata(L,(void*)(ptr));\
  lua_insert(L,-2);\
  lua_rawset(L,index);

#define lua_rawgetp(L,index,ptr)\
  lua_pushlightuserdata(L,(void*)(ptr));\
  lua_rawget(L,index);

#endif

/* --------------------------------------------------------------------------
 * Helper functions for error handling
 * -------------------------------------------------------------------------- */

/* Push the string STR on the Lua stack, like lua_pushstring, but
   prefixed with the location of the innermost Lua call-point
   (as formatted by luaL_where).  */
SWIGRUNTIME void
SWIG_Lua_pusherrstring (lua_State *L, const char *str)
{
  luaL_where (L, 1);
  lua_pushstring (L, str);
  lua_concat (L, 2);
}

/* Push a formatted string generated from FMT and following args on
   the Lua stack, like lua_pushfstring, but prefixed with the
   location of the innermost Lua call-point (as formatted by luaL_where).  */
SWIGRUNTIME void
SWIG_Lua_pushferrstring (lua_State *L, const char *fmt, ...)
{
  va_list argp;
  va_start(argp, fmt);
  luaL_where(L, 1);
  lua_pushvfstring(L, fmt, argp);
  va_end(argp);
  lua_concat(L, 2);
}


/* -----------------------------------------------------------------------------
 * global swig types
 * ----------------------------------------------------------------------------- */
/* Constant table */
#define SWIG_LUA_INT     1
#define SWIG_LUA_FLOAT   2
#define SWIG_LUA_STRING  3
#define SWIG_LUA_POINTER 4
#define SWIG_LUA_BINARY  5
#define SWIG_LUA_CHAR    6

/* Structure for variable linking table */
typedef struct {
  const char *name;
  lua_CFunction get;
  lua_CFunction set;
} swig_lua_var_info;

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)
typedef const LUA_REG_TYPE swig_lua_method;
typedef const LUA_REG_TYPE swig_lua_const_info;
#else /* Normal lua */
typedef luaL_Reg swig_lua_method;

/* Constant information structure */
typedef struct {
    int type;
    char *name;
    long lvalue;
    double dvalue;
    void   *pvalue;
    swig_type_info **ptype;
} swig_lua_const_info;

#endif

typedef struct {
  const char     *name;
  lua_CFunction   getmethod;
  lua_CFunction   setmethod;
} swig_lua_attribute;


struct swig_lua_class;
/* Can be used to create namespaces. Currently used to wrap class static methods/variables/constants */
typedef struct swig_lua_namespace {
  const char            *name;
  swig_lua_method       *ns_methods;
  swig_lua_attribute    *ns_attributes;
  swig_lua_const_info   *ns_constants;
  struct swig_lua_class        **ns_classes;
  struct swig_lua_namespace    **ns_namespaces;
} swig_lua_namespace;

typedef struct swig_lua_class {
  const char    *name; /* Name that this class has in Lua */
  const char    *fqname; /* Fully qualified name - Scope + class name */
  swig_type_info   **type;
  lua_CFunction  constructor;
  void    (*destructor)(void *);
  swig_lua_method   *methods;
  swig_lua_attribute     *attributes;
  swig_lua_namespace    *cls_static;
  swig_lua_method   *metatable; /* 0 for -eluac */
  struct swig_lua_class **bases;
  const char **base_names;
} swig_lua_class;

/* this is the struct for wrapping all pointers in SwigLua
*/
typedef struct {
  swig_type_info   *type;
  int     own;  /* 1 if owned & must be destroyed */
  void        *ptr;
} swig_lua_userdata;

/* this is the struct for wrapping arbitrary packed binary data
(currently it is only used for member function pointers)
the data ordering is similar to swig_lua_userdata, but it is currently not possible
to tell the two structures apart within SWIG, other than by looking at the type
*/
typedef struct {
  swig_type_info   *type;
  int     own;  /* 1 if owned & must be destroyed */
  char data[1];       /* arbitrary amount of data */
} swig_lua_rawdata;

/* Common SWIG API */
#define SWIG_NewPointerObj(L, ptr, type, owner)       SWIG_Lua_NewPointerObj(L, (void *)ptr, type, owner)
#define SWIG_ConvertPtr(L,idx, ptr, type, flags)    SWIG_Lua_ConvertPtr(L,idx,ptr,type,flags)
#define SWIG_MustGetPtr(L,idx, type,flags, argnum,fnname)  SWIG_Lua_MustGetPtr(L,idx, type,flags, argnum,fnname)
/* for C++ member pointers, ie, member methods */
#define SWIG_ConvertMember(L, idx, ptr, sz, ty)       SWIG_Lua_ConvertPacked(L, idx, ptr, sz, ty)
#define SWIG_NewMemberObj(L, ptr, sz, type)      SWIG_Lua_NewPackedObj(L, ptr, sz, type)

/* Runtime API */
#define SWIG_GetModule(clientdata) SWIG_Lua_GetModule((lua_State*)(clientdata))
#define SWIG_SetModule(clientdata, pointer) SWIG_Lua_SetModule((lua_State*) (clientdata), pointer)
#define SWIG_MODULE_CLIENTDATA_TYPE lua_State*

/* Contract support */
#define SWIG_contract_assert(expr, msg)  \
  do { if (!(expr)) { SWIG_Lua_pusherrstring(L, (char *) msg); goto fail; } } while (0)


/* helper #defines */
#define SWIG_fail {goto fail;}
#define SWIG_fail_arg(func_name,argnum,type) \
  {SWIG_Lua_pushferrstring(L,"Error in %s (arg %d), expected '%s' got '%s'",\
  func_name,argnum,type,SWIG_Lua_typename(L,argnum));\
  goto fail;}
#define SWIG_fail_ptr(func_name,argnum,type) \
  SWIG_fail_arg(func_name,argnum,(type && type->str)?type->str:"void*")
#define SWIG_check_num_args(func_name,a,b) \
  if (lua_gettop(L)<a || lua_gettop(L)>b) \
  {SWIG_Lua_pushferrstring(L,"Error in %s expected %d..%d args, got %d",func_name,a,b,lua_gettop(L));\
  goto fail;}


#define SWIG_Lua_get_table(L,n) \
  (lua_pushstring(L, n), lua_rawget(L,-2))

#define SWIG_Lua_add_function(L,n,f) \
  (lua_pushstring(L, n), \
      lua_pushcfunction(L, f), \
      lua_rawset(L,-3))

#define SWIG_Lua_add_boolean(L,n,b) \
  (lua_pushstring(L, n), \
      lua_pushboolean(L, b), \
      lua_rawset(L,-3))

/* special helper for allowing 'nil' for usertypes */
#define SWIG_isptrtype(L,I) (lua_isuserdata(L,I) || lua_isnil(L,I))

#ifdef __cplusplus
/* Special helper for member function pointers
it gets the address, casts it, then dereferences it */
/*#define SWIG_mem_fn_as_voidptr(a)  (*((char**)&(a))) */
#endif

/* storing/access of swig_module_info */
SWIGRUNTIME swig_module_info *
SWIG_Lua_GetModule(lua_State *L) {
  swig_module_info *ret = 0;
  lua_pushstring(L,"swig_runtime_data_type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME);
  lua_rawget(L,LUA_REGISTRYINDEX);
  if (lua_islightuserdata(L,-1))
    ret=(swig_module_info*)lua_touserdata(L,-1);
  lua_pop(L,1);  /* tidy */
  return ret;
}

SWIGRUNTIME void
SWIG_Lua_SetModule(lua_State *L, swig_module_info *module) {
  /* add this all into the Lua registry: */
  lua_pushstring(L,"swig_runtime_data_type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME);
  lua_pushlightuserdata(L,(void*)module);
  lua_rawset(L,LUA_REGISTRYINDEX);
}

/* -----------------------------------------------------------------------------
 * global variable support code: modules
 * ----------------------------------------------------------------------------- */

/* this function is called when trying to set an immutable.
default action is to print an error.
This can removed with a compile flag SWIGLUA_IGNORE_SET_IMMUTABLE */
SWIGINTERN int SWIG_Lua_set_immutable(lua_State *L)
{
/*  there should be 1 param passed in: the new value */
#ifndef SWIGLUA_IGNORE_SET_IMMUTABLE
  lua_pop(L,1);  /* remove it */
  luaL_error(L,"This variable is immutable");
#endif
    return 0;   /* should not return anything */
}

#ifdef SWIG_LUA_ELUA_EMULATE

SWIGRUNTIME void SWIG_Lua_NewPointerObj(lua_State *L,void *ptr,swig_type_info *type, int own);
SWIGRUNTIME void SWIG_Lua_NewPackedObj(lua_State *L,void *ptr,size_t size,swig_type_info *type);
static int swig_lua_elua_emulate_unique_key;

/* This function emulates eLua rotables behaviour. It loads a rotable definition into the usual lua table. */
SWIGINTERN void SWIG_Lua_elua_emulate_register(lua_State *L, const swig_elua_entry *table)
{
  int i, table_parsed, parsed_tables_array, target_table;
  assert(lua_istable(L,-1));
  target_table = lua_gettop(L);
  /* Get the registry where we put all parsed tables to avoid loops */
  lua_rawgetp(L, LUA_REGISTRYINDEX, &swig_lua_elua_emulate_unique_key);
  if(lua_isnil(L,-1)) {
    lua_pop(L,1);
    lua_newtable(L);
    lua_pushvalue(L,-1);
    lua_rawsetp(L,LUA_REGISTRYINDEX,(void*)(&swig_lua_elua_emulate_unique_key));
  }
  parsed_tables_array = lua_gettop(L);
  lua_pushvalue(L,target_table);
  lua_rawsetp(L, parsed_tables_array, table);
  table_parsed = 0;
  const int SWIGUNUSED pairs_start = lua_gettop(L);
  for(i = 0;table[i].key.type != LUA_TNIL || table[i].value.type != LUA_TNIL;i++)
  {
    const swig_elua_entry *entry = table + i;
    int is_metatable = 0;
    switch(entry->key.type) {
      case LUA_TSTRING:
        lua_pushstring(L,entry->key.key.strkey);
        if(strcmp(entry->key.key.strkey, SWIG_LUA_ELUA_EMUL_METATABLE_KEY) == 0)
          is_metatable = 1;
        break;
      case  LUA_TNUMBER:
        lua_pushnumber(L,entry->key.key.numkey);
        break;
      case LUA_TNIL:
        lua_pushnil(L);
        break;
      default:
        assert(0);
    }
    switch(entry->value.type) {
      case LUA_TSTRING:
        lua_pushstring(L,entry->value.value.string);
        break;
      case  LUA_TNUMBER:
        lua_pushnumber(L,entry->value.value.number);
        break;
      case LUA_TFUNCTION:
        lua_pushcfunction(L,entry->value.value.function);
        break;
      case LUA_TTABLE:
        lua_rawgetp(L,parsed_tables_array, entry->value.value.table);
        table_parsed = !lua_isnil(L,-1);
        if(!table_parsed) {
          lua_pop(L,1); /*remove nil */
          lua_newtable(L);
          SWIG_Lua_elua_emulate_register(L,entry->value.value.table);
        }
        if(is_metatable) {
          assert(lua_istable(L,-1));
          lua_pushvalue(L,-1);
          lua_setmetatable(L,target_table);
        }

        break;
      case LUA_TUSERDATA:
        if(entry->value.value.userdata.member)
          SWIG_NewMemberObj(L,entry->value.value.userdata.pvalue,
              entry->value.value.userdata.lvalue,
              *(entry->value.value.userdata.ptype));
        else
          SWIG_NewPointerObj(L,entry->value.value.userdata.pvalue,
              *(entry->value.value.userdata.ptype),0);
        break;
      case LUA_TNIL:
        lua_pushnil(L);
        break;
      default:
        assert(0);
    }
    assert(lua_gettop(L) == pairs_start + 2);
    lua_rawset(L,target_table);
  }
  lua_pop(L,1); /* Removing parsed tables storage */
  assert(lua_gettop(L) == target_table);
}

SWIGINTERN void SWIG_Lua_elua_emulate_register_clear(lua_State *L)
{
  lua_pushnil(L);
  lua_rawsetp(L, LUA_REGISTRYINDEX, &swig_lua_elua_emulate_unique_key);
}

SWIGINTERN void SWIG_Lua_get_class_registry(lua_State *L);

SWIGINTERN int SWIG_Lua_emulate_elua_getmetatable(lua_State *L)
{
  SWIG_check_num_args("getmetatable(SWIG eLua emulation)", 1, 1);
  SWIG_Lua_get_class_registry(L);
  lua_getfield(L,-1,"lua_getmetatable");
  lua_remove(L,-2); /* remove the registry*/
  assert(!lua_isnil(L,-1));
  lua_pushvalue(L,1);
  assert(lua_gettop(L) == 3); /* object | function | object again */
  lua_call(L,1,1);
  if(!lua_isnil(L,-1)) /*There is an ordinary metatable */
    return 1;
  /*if it is a table, then emulate elua behaviour - check for __metatable attribute of a table*/
  assert(lua_gettop(L) == 2);
  if(lua_istable(L,-2)) {
    lua_pop(L,1); /*remove the nil*/
    lua_getfield(L,-1, SWIG_LUA_ELUA_EMUL_METATABLE_KEY);
  }
  assert(lua_gettop(L) == 2);
  return 1;

fail:
  lua_error(L);
  return 0;
}

SWIGINTERN void SWIG_Lua_emulate_elua_swap_getmetatable(lua_State *L)
{
  SWIG_Lua_get_class_registry(L);
  lua_pushglobaltable(L);
  lua_pushstring(L,"lua_getmetatable");
  lua_getfield(L,-2,"getmetatable");
  assert(!lua_isnil(L,-1));
  lua_rawset(L,-4);
  lua_pushstring(L, "getmetatable");
  lua_pushcfunction(L, SWIG_Lua_emulate_elua_getmetatable);
  lua_rawset(L,-3);
  lua_pop(L,2);

}
/* END OF REMOVE */

#endif
/* -----------------------------------------------------------------------------
 * global variable support code: namespaces and modules (which are the same thing)
 * ----------------------------------------------------------------------------- */

SWIGINTERN int SWIG_Lua_namespace_get(lua_State *L)
{
/*  there should be 2 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
*/
  assert(lua_istable(L,-2));  /* just in case */
  lua_getmetatable(L,-2);
  assert(lua_istable(L,-1));
  SWIG_Lua_get_table(L,".get"); /* find the .get table */
  assert(lua_istable(L,-1));
  /* look for the key in the .get table */
  lua_pushvalue(L,2);  /* key */
  lua_rawget(L,-2);
  lua_remove(L,-2); /* stack tidy, remove .get table */
  if (lua_iscfunction(L,-1))
  {  /* found it so call the fn & return its value */
    lua_call(L,0,1);  /* 1 value in (userdata),1 out (result) */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    return 1;
  }
  lua_pop(L,1);  /* remove whatever was there */
  /* ok, so try the .fn table */
  SWIG_Lua_get_table(L,".fn"); /* find the .get table */
  assert(lua_istable(L,-1));  /* just in case */
  lua_pushvalue(L,2);  /* key */
  lua_rawget(L,-2);  /* look for the fn */
  lua_remove(L,-2); /* stack tidy, remove .fn table */
  if (lua_isfunction(L,-1)) /* note: whether it's a C function or lua function */
  {  /* found it so return the fn & let lua call it */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    return 1;
  }
  lua_pop(L,1);  /* remove whatever was there */
  return 0;
}

SWIGINTERN int SWIG_Lua_namespace_set(lua_State *L)
{
/*  there should be 3 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
  (3) any for the new value
*/

  assert(lua_istable(L,1));
  lua_getmetatable(L,1);    /* get the meta table */
  assert(lua_istable(L,-1));

  SWIG_Lua_get_table(L,".set"); /* find the .set table */
  if (lua_istable(L,-1))
  {
    /* look for the key in the .set table */
    lua_pushvalue(L,2);  /* key */
    lua_rawget(L,-2);
    if (lua_iscfunction(L,-1))
    {  /* found it so call the fn & return its value */
      lua_pushvalue(L,3);  /* value */
      lua_call(L,1,0);
      return 0;
    }
    lua_pop(L,1);  /* remove the value */
  }
  lua_pop(L,1);  /* remove the value .set table */
  lua_pop(L,1); /* remote metatable */
  lua_rawset(L,-3);
  return 0;
}

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA) /* In elua this is useless */
SWIGINTERN void SWIG_Lua_InstallConstants(lua_State *L, swig_lua_const_info constants[]); /* forward declaration */
SWIGINTERN void  SWIG_Lua_add_variable(lua_State *L,const char *name,lua_CFunction getFn,lua_CFunction setFn); /* forward declaration */
SWIGINTERN void  SWIG_Lua_class_register(lua_State *L,swig_lua_class *clss);

/* helper function - register namespace methods and attributes into namespace */
SWIGINTERN int SWIG_Lua_add_namespace_details(lua_State *L, swig_lua_namespace *ns)
{
  int i;
  /* There must be namespace table (not metatable) at the top of the stack */
  assert(lua_istable(L,-1));
  SWIG_Lua_InstallConstants(L, ns->ns_constants);

  /* add methods to the namespace/module table */
  for(i=0;ns->ns_methods[i].name;i++){
    SWIG_Lua_add_function(L,ns->ns_methods[i].name,ns->ns_methods[i].func);
  }
  lua_getmetatable(L,-1);

  /* add fns */
  for(i=0;ns->ns_attributes[i].name;i++){
    SWIG_Lua_add_variable(L,ns->ns_attributes[i].name,ns->ns_attributes[i].getmethod,ns->ns_attributes[i].setmethod);
  }

  /* clear stack - remove metatble */
  lua_pop(L,1);
  return 0;
}

/* Register all classes in the namespace */
SWIGINTERN void SWIG_Lua_add_namespace_classes(lua_State *L, swig_lua_namespace *ns)
{
  swig_lua_class **classes;

  /* There must be a module/namespace table at the top of the stack */
  assert(lua_istable(L,-1));

  classes = ns->ns_classes;

  if( classes != 0 ) {
    while(*classes != 0) {
      SWIG_Lua_class_register(L, *classes);
      classes++;
    }
  }
}

/* Helper function. Creates namespace table and adds it to module table
   if 'reg' is true, then will register namespace table to parent one (must be on top of the stack
   when function is called).
   Function always returns newly registered table on top of the stack.
*/
SWIGINTERN void SWIG_Lua_namespace_register(lua_State *L, swig_lua_namespace *ns, int reg)
{
  swig_lua_namespace **sub_namespace;
  /* 1 argument - table on the top of the stack */
  const int SWIGUNUSED begin = lua_gettop(L);
  assert(lua_istable(L,-1)); /* just in case. This is supposed to be module table or parent namespace table */
  lua_checkstack(L,5);
  lua_newtable(L); /* namespace itself */
  lua_newtable(L); /* metatable for namespace */

  /* add a table called ".get" */
  lua_pushstring(L,".get");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".set" */
  lua_pushstring(L,".set");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".fn" */
  lua_pushstring(L,".fn");
  lua_newtable(L);
  lua_rawset(L,-3);

  /* add accessor fns for using the .get,.set&.fn */
  SWIG_Lua_add_function(L,"__index",SWIG_Lua_namespace_get);
  SWIG_Lua_add_function(L,"__newindex",SWIG_Lua_namespace_set);

  lua_setmetatable(L,-2); /* set metatable */

  /* Register all functions, variables etc */
  SWIG_Lua_add_namespace_details(L,ns);
  /* Register classes */
  SWIG_Lua_add_namespace_classes(L,ns);

  sub_namespace = ns->ns_namespaces;
  if( sub_namespace != 0) {
    while(*sub_namespace != 0) {
      SWIG_Lua_namespace_register(L, *sub_namespace, 1);
      lua_pop(L,1); /* removing sub-namespace table */
      sub_namespace++;
    }
  }

  if (reg) {
    lua_pushstring(L,ns->name);
    lua_pushvalue(L,-2);
    lua_rawset(L,-4); /* add namespace to module table */
  }
  assert(lua_gettop(L) == begin+1);
}
#endif /* SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA */

/* -----------------------------------------------------------------------------
 * global variable support code: classes
 * ----------------------------------------------------------------------------- */

SWIGINTERN void  SWIG_Lua_get_class_metatable(lua_State *L,const char *cname);

typedef int (*swig_lua_base_iterator_func)(lua_State*,swig_type_info*, int, int *ret);

SWIGINTERN int SWIG_Lua_iterate_bases(lua_State *L, swig_type_info * SWIGUNUSED swig_type,
  int first_arg, swig_lua_base_iterator_func func, int  *const ret)
{
    /* first_arg - position of the object in stack. Everything that is above are arguments
     * and is passed to every evocation of the func */
    int last_arg = lua_gettop(L);/* position of last argument */
    int original_metatable = last_arg + 1;
    size_t bases_count;
    int result = SWIG_ERROR;
    int bases_table;
    (void)swig_type;
    lua_getmetatable(L,first_arg);

    /* initialise base search */
#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA)
    SWIG_Lua_get_table(L,".bases");
    assert(lua_istable(L,-1));
    bases_count = lua_rawlen(L,-1);
    bases_table = lua_gettop(L);
#else
    /* In elua .bases table doesn't exist. Use table from swig_lua_class */
    (void)bases_table;
    assert(swig_type!=0);
    swig_module_info *module=SWIG_GetModule(L);
    swig_lua_class **bases= ((swig_lua_class*)(swig_type->clientdata))->bases;
    const char **base_names= ((swig_lua_class*)(swig_type->clientdata))->base_names;
    bases_count = 0;
    for(;base_names[bases_count];
      bases_count++);/* get length of bases */
#endif

    if(ret)
      *ret = 0;
    if(bases_count>0)
    {
      int to_remove;
      size_t i;
      int j;
      int subcall_last_arg;
      int subcall_first_arg = lua_gettop(L) + 1;/* Here a copy of first_arg and arguments begin */
      int valid = 1;
      swig_type_info *base_swig_type = 0;
      for(j=first_arg;j<=last_arg;j++)
        lua_pushvalue(L,j);
      subcall_last_arg = lua_gettop(L);

      /* Trick: temporarily replacing original metatable with metatable for base class and call getter */
      for(i=0;i<bases_count;i++) {
        /* Iteration through class bases */
#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA)
        lua_rawgeti(L,bases_table,i+1);
        base_swig_type = 0;
        if(lua_isnil(L,-1)) {
          valid = 0;
          lua_pop(L,1);
        } else {
          valid = 1;
        }
#else /* In elua .bases table doesn't exist. Use table from swig_lua_class */
        swig_lua_class *base_class = bases[i];
        if(!base_class) {
          valid = 0;
        } else {
          valid = 1;
          SWIG_Lua_get_class_metatable(L,base_class->fqname);
          base_swig_type = SWIG_TypeQueryModule(module,module,base_names[i]);
          assert(base_swig_type != 0);
        }
#endif

        if(!valid)
          continue;
        assert(lua_isuserdata(L, subcall_first_arg));
        assert(lua_istable(L,-1));
        lua_setmetatable(L,subcall_first_arg); /* Set new metatable */
        assert(lua_gettop(L) == subcall_last_arg);
        result = func(L, base_swig_type,subcall_first_arg, ret); /* Forward call */
        if(result != SWIG_ERROR) {
          break;
        }
      }
      /* Restore original metatable */
      lua_pushvalue(L,original_metatable);
      lua_setmetatable(L,first_arg);
      /* Clear - remove everything between last_arg and subcall_last_arg including */
      to_remove = subcall_last_arg - last_arg;
      for(j=0;j<to_remove;j++)
        lua_remove(L,last_arg+1);
    } else {
      /* Remove everything after last_arg */
      lua_pop(L, lua_gettop(L) - last_arg);
    }
    if(ret) assert(lua_gettop(L) == last_arg + *ret);
    return result;
}

/* The class.get method helper, performs the lookup of class attributes.
 * It returns an error code. Number of function return values is passed inside 'ret'.
 * first_arg is not used in this function because function always has 2 arguments.
 */
SWIGINTERN int  SWIG_Lua_class_do_get_item(lua_State *L, swig_type_info *type, int SWIGUNUSED first_arg, int *ret)
{
/*  there should be 2 params passed in
  (1) userdata (not the meta table)
  (2) string name of the attribute
*/
  int bases_search_result;
  int substack_start = lua_gettop(L)-2;
  assert(first_arg == substack_start+1);
  lua_checkstack(L,5);
  assert(lua_isuserdata(L,-2));  /* just in case */
  lua_getmetatable(L,-2);    /* get the meta table */
  assert(lua_istable(L,-1));  /* just in case */
  /* NEW: looks for the __getitem() fn
  this is a user provided get fn */
  SWIG_Lua_get_table(L,"__getitem"); /* find the __getitem fn */
  if (lua_iscfunction(L,-1))  /* if it's there */
  {  /* found it so call the fn & return its value */
    lua_pushvalue(L,substack_start+1);  /* the userdata */
    lua_pushvalue(L,substack_start+2);  /* the parameter */
    lua_call(L,2,1);  /* 2 value in (userdata),1 out (result) */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    if(ret) *ret = 1;
    return SWIG_OK;
  }
  lua_pop(L,1);
  /* Remove the metatable */
  lua_pop(L,1);
  /* Search in base classes */
  bases_search_result = SWIG_Lua_iterate_bases(L,type,substack_start+1,SWIG_Lua_class_do_get_item,ret);
  return bases_search_result;  /* sorry not known */
}


/* The class.get method helper, performs the lookup of class attributes.
 * It returns an error code. Number of function return values is passed inside 'ret'.
 * first_arg is not used in this function because function always has 2 arguments.
 */
SWIGINTERN int  SWIG_Lua_class_do_get(lua_State *L, swig_type_info *type, int SWIGUNUSED first_arg, int *ret)
{
/*  there should be 2 params passed in
  (1) userdata (not the meta table)
  (2) string name of the attribute
*/
  int bases_search_result;
  int substack_start = lua_gettop(L)-2;
  assert(first_arg == substack_start+1);
  lua_checkstack(L,5);
  assert(lua_isuserdata(L,-2));  /* just in case */
  lua_getmetatable(L,-2);    /* get the meta table */
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_get_table(L,".get"); /* find the .get table */
  assert(lua_istable(L,-1));  /* just in case */
  /* look for the key in the .get table */
  lua_pushvalue(L,substack_start+2);  /* key */
  lua_rawget(L,-2);
  lua_remove(L,-2); /* stack tidy, remove .get table */
  if (lua_iscfunction(L,-1))
  {  /* found it so call the fn & return its value */
    lua_pushvalue(L,substack_start+1);  /* the userdata */
    lua_call(L,1,1);  /* 1 value in (userdata),1 out (result) */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    if(ret)
      *ret = 1;
    return SWIG_OK;
  }
  lua_pop(L,1);  /* remove whatever was there */
  /* ok, so try the .fn table */
  SWIG_Lua_get_table(L,".fn"); /* find the .fn table */
  assert(lua_istable(L,-1));  /* just in case */
  lua_pushvalue(L,substack_start+2);  /* key */
  lua_rawget(L,-2);  /* look for the fn */
  lua_remove(L,-2); /* stack tidy, remove .fn table */
  if (lua_isfunction(L,-1)) /* note: if it's a C function or lua function */
  {  /* found it so return the fn & let lua call it */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    if(ret)
      *ret = 1;
    return SWIG_OK;
  }
  lua_pop(L,1);  /* remove whatever was there */
  /* Remove the metatable */
  lua_pop(L,1);
  /* Search in base classes */
  bases_search_result = SWIG_Lua_iterate_bases(L,type,substack_start+1,SWIG_Lua_class_do_get,ret);
  return bases_search_result;  /* sorry not known */
}

/* the class.get method, performs the lookup of class attributes
 */
SWIGINTERN int  SWIG_Lua_class_get(lua_State *L)
{
/*  there should be 2 params passed in
  (1) userdata (not the meta table)
  (2) string name of the attribute
*/
  int result;
  swig_lua_userdata *usr;
  swig_type_info *type;
  int ret = 0;
  assert(lua_isuserdata(L,1));
  usr=(swig_lua_userdata*)lua_touserdata(L,1);  /* get data */
  type = usr->type;
  result = SWIG_Lua_class_do_get(L,type,1,&ret);
  if(result == SWIG_OK)
    return ret;

  result = SWIG_Lua_class_do_get_item(L,type,1,&ret);
  if(result == SWIG_OK)
    return ret;

  return 0;
}

/* helper for the class.set method, performs the lookup of class attributes
 * It returns error code. Number of function return values is passed inside 'ret'
 */
SWIGINTERN int  SWIG_Lua_class_do_set(lua_State *L, swig_type_info *type, int first_arg, int *ret)
{
/*  there should be 3 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
  (3) any for the new value
  */

  int bases_search_result;
  int substack_start = lua_gettop(L) - 3;
  lua_checkstack(L,5);
  assert(lua_isuserdata(L,substack_start+1));  /* just in case */
  lua_getmetatable(L,substack_start+1);    /* get the meta table */
  assert(lua_istable(L,-1));  /* just in case */
  if(ret)
    *ret = 0; /* it is setter - number of return values is always 0 */

  SWIG_Lua_get_table(L,".set"); /* find the .set table */
  if (lua_istable(L,-1))
  {
    /* look for the key in the .set table */
    lua_pushvalue(L,substack_start+2);  /* key */
    lua_rawget(L,-2);
    lua_remove(L,-2); /* tidy stack, remove .set table */
    if (lua_iscfunction(L,-1))
    {  /* found it so call the fn & return its value */
      lua_pushvalue(L,substack_start+1);  /* userdata */
      lua_pushvalue(L,substack_start+3);  /* value */
      lua_call(L,2,0);
      lua_remove(L,substack_start+4); /*remove metatable*/
      return SWIG_OK;
    }
    lua_pop(L,1);  /* remove the value */
  } else {
    lua_pop(L,1);  /* remove the answer for .set table request*/
  }
  /* NEW: looks for the __setitem() fn
  this is a user provided set fn */
  SWIG_Lua_get_table(L,"__setitem"); /* find the fn */
  if (lua_iscfunction(L,-1))  /* if it's there */
  {  /* found it so call the fn & return its value */
    lua_pushvalue(L,substack_start+1);  /* the userdata */
    lua_pushvalue(L,substack_start+2);  /* the parameter */
    lua_pushvalue(L,substack_start+3);  /* the value */
    lua_call(L,3,0);  /* 3 values in ,0 out */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    return SWIG_OK;
  }
  lua_pop(L,1); /* remove value */

  lua_pop(L,1); /* remove metatable */
  /* Search among bases */
  bases_search_result = SWIG_Lua_iterate_bases(L,type,first_arg,SWIG_Lua_class_do_set,ret);
  if(ret)
    assert(*ret == 0);
  assert(lua_gettop(L) == substack_start + 3);
  return bases_search_result;
}

/* This is the actual method exported to Lua. It calls SWIG_Lua_class_do_set and correctly
 * handles return values.
 */
SWIGINTERN int  SWIG_Lua_class_set(lua_State *L)
{
/*  There should be 3 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
  (3) any for the new value
  */
  int ret = 0;
  int result;
  swig_lua_userdata *usr;
  swig_type_info *type;
  assert(lua_isuserdata(L,1));
  usr=(swig_lua_userdata*)lua_touserdata(L,1);  /* get data */
  type = usr->type;
  result = SWIG_Lua_class_do_set(L,type,1,&ret);
  if(result != SWIG_OK) {
   SWIG_Lua_pushferrstring(L,"Assignment not possible. No setter/member with this name. For custom assignments implement __setitem method.");
   lua_error(L);
  } else {
    assert(ret==0);
  }
  return 0;
}

/* the class.destruct method called by the interpreter */
SWIGINTERN int  SWIG_Lua_class_destruct(lua_State *L)
{
/*  there should be 1 params passed in
  (1) userdata (not the meta table) */
  swig_lua_userdata *usr;
  swig_lua_class *clss;
  assert(lua_isuserdata(L,-1));  /* just in case */
  usr=(swig_lua_userdata*)lua_touserdata(L,-1);  /* get it */
  /* if must be destroyed & has a destructor */
  if (usr->own) /* if must be destroyed */
  {
    clss=(swig_lua_class*)usr->type->clientdata;  /* get the class */
    if (clss && clss->destructor)  /* there is a destroy fn */
    {
      clss->destructor(usr->ptr);  /* bye bye */
    }
  }
  return 0;
}

/* the class.__tostring method called by the interpreter and print */
SWIGINTERN int  SWIG_Lua_class_tostring(lua_State *L)
{
/*  there should be 1 param passed in
  (1) userdata (not the metatable) */
  swig_lua_userdata* userData;
  assert(lua_isuserdata(L,1));  /* just in case */
  userData = (swig_lua_userdata*)lua_touserdata(L,1); /* get the userdata address */

  lua_pushfstring(L, "<userdata of type '%s' at %p>", userData->type->str, userData->ptr);
  return 1;
}

/* to manually disown some userdata */
SWIGINTERN int  SWIG_Lua_class_disown(lua_State *L)
{
/*  there should be 1 params passed in
  (1) userdata (not the meta table) */
  swig_lua_userdata *usr;
  assert(lua_isuserdata(L,-1));  /* just in case */
  usr=(swig_lua_userdata*)lua_touserdata(L,-1);  /* get it */

  usr->own = 0; /* clear our ownership */
  return 0;
}

/* lua callable function to compare userdata's value
the issue is that two userdata may point to the same thing
but to lua, they are different objects */
SWIGRUNTIME int SWIG_Lua_class_equal(lua_State *L)
{
  int result;
  swig_lua_userdata *usr1,*usr2;
  if (!lua_isuserdata(L,1) || !lua_isuserdata(L,2))  /* just in case */
    return 0;  /* nil reply */
  usr1=(swig_lua_userdata*)lua_touserdata(L,1);  /* get data */
  usr2=(swig_lua_userdata*)lua_touserdata(L,2);  /* get data */
  /*result=(usr1->ptr==usr2->ptr && usr1->type==usr2->type); only works if type is the same*/
  result=(usr1->ptr==usr2->ptr);
   lua_pushboolean(L,result);
  return 1;
}

/* populate table at the top of the stack with metamethods that ought to be inherited */
SWIGINTERN void SWIG_Lua_populate_inheritable_metamethods(lua_State *L)
{
  SWIG_Lua_add_boolean(L, "__add", 1);
  SWIG_Lua_add_boolean(L, "__sub", 1);
  SWIG_Lua_add_boolean(L, "__mul", 1);
  SWIG_Lua_add_boolean(L, "__div", 1);
  SWIG_Lua_add_boolean(L, "__mod", 1);
  SWIG_Lua_add_boolean(L, "__pow", 1);
  SWIG_Lua_add_boolean(L, "__unm", 1);
  SWIG_Lua_add_boolean(L, "__len", 1 );
  SWIG_Lua_add_boolean(L, "__concat", 1 );
  SWIG_Lua_add_boolean(L, "__eq", 1);
  SWIG_Lua_add_boolean(L, "__lt", 1);
  SWIG_Lua_add_boolean(L, "__le", 1);
  SWIG_Lua_add_boolean(L, "__call", 1);
  SWIG_Lua_add_boolean(L, "__tostring", 1);
  SWIG_Lua_add_boolean(L, "__gc", 0);
}

/* creates the swig registry */
SWIGINTERN void SWIG_Lua_create_class_registry(lua_State *L)
{
  /* create main SWIG registry table */
  lua_pushstring(L,"SWIG");
  lua_newtable(L);
  /* populate it with some predefined data */

  /* .library table. Placeholder */
  lua_pushstring(L,".library");
  lua_newtable(L);
  {
    /* list of metamethods that class inherits from its bases */
    lua_pushstring(L,"inheritable_metamethods");
    lua_newtable(L);
    /* populate with list of metamethods */
    SWIG_Lua_populate_inheritable_metamethods(L);
    lua_rawset(L,-3);
  }
  lua_rawset(L,-3);

  lua_rawset(L,LUA_REGISTRYINDEX);
}

/* gets the swig registry (or creates it) */
SWIGINTERN void  SWIG_Lua_get_class_registry(lua_State *L)
{
  /* add this all into the swig registry: */
  lua_pushstring(L,"SWIG");
  lua_rawget(L,LUA_REGISTRYINDEX);  /* get the registry */
  if (!lua_istable(L,-1))  /* not there */
  {  /* must be first time, so add it */
    lua_pop(L,1);  /* remove the result */
    SWIG_Lua_create_class_registry(L);
    /* then get it */
    lua_pushstring(L,"SWIG");
    lua_rawget(L,LUA_REGISTRYINDEX);
  }
}

SWIGINTERN void SWIG_Lua_get_inheritable_metamethods(lua_State *L)
{
  SWIG_Lua_get_class_registry(L);
  lua_pushstring(L, ".library");
  lua_rawget(L,-2);
  assert( !lua_isnil(L,-1) );
  lua_pushstring(L, "inheritable_metamethods");
  lua_rawget(L,-2);

  /* Remove class registry and library table */
  lua_remove(L,-2);
  lua_remove(L,-2);
}

/* Helper function to get the classes metatable from the register */
SWIGINTERN void  SWIG_Lua_get_class_metatable(lua_State *L,const char *cname)
{
  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,cname);  /* get the name */
  lua_rawget(L,-2);    /* get it */
  lua_remove(L,-2);    /* tidy up (remove registry) */
}

/* Set up the base classes pointers.
Each class structure has a list of pointers to the base class structures.
This function fills them.
It cannot be done at compile time, as this will not work with hireachies
spread over more than one swig file.
Therefore it must be done at runtime, querying the SWIG type system.
*/
SWIGINTERN void SWIG_Lua_init_base_class(lua_State *L,swig_lua_class *clss)
{
  int i=0;
  swig_module_info *module=SWIG_GetModule(L);
  for(i=0;clss->base_names[i];i++)
  {
    if (clss->bases[i]==0) /* not found yet */
    {
      /* lookup and cache the base class */
      swig_type_info *info = SWIG_TypeQueryModule(module,module,clss->base_names[i]);
      if (info) clss->bases[i] = (swig_lua_class *) info->clientdata;
    }
  }
}

#if defined(SWIG_LUA_SQUASH_BASES) && (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA)
/* Merges two tables  */
SWIGINTERN void SWIG_Lua_merge_tables_by_index(lua_State *L, int target, int source)
{
  /* iterating */
  lua_pushnil(L);
  while (lua_next(L,source) != 0) {
    /* -1 - value, -2 - index */
    /* have to copy to assign */
    lua_pushvalue(L,-2); /* copy of index */
    lua_pushvalue(L,-2); /* copy of value */
    lua_rawset(L, target);
    lua_pop(L,1);
    /* only key is left */
  }
}

/* Merges two tables with given name. original - index of target metatable, base - index of source metatable */
SWIGINTERN void SWIG_Lua_merge_tables(lua_State *L, const char* name, int original, int base)
{
  /* push original[name], then base[name] */
  lua_pushstring(L,name);
  lua_rawget(L,original);
  int original_table = lua_gettop(L);
  lua_pushstring(L,name);
  lua_rawget(L,base);
  int base_table = lua_gettop(L);
  SWIG_Lua_merge_tables_by_index(L, original_table, base_table);
  /* clearing stack */
  lua_pop(L,2);
}

/* Function takes all symbols from base and adds it to derived class. It's just a helper. */
SWIGINTERN void SWIG_Lua_class_squash_base(lua_State *L, swig_lua_class *base_cls)
{
  /* There is one parameter - original, i.e. 'derived' class metatable */
  assert(lua_istable(L,-1));
  int original = lua_gettop(L);
  SWIG_Lua_get_class_metatable(L,base_cls->fqname);
  int base = lua_gettop(L);
  SWIG_Lua_merge_tables(L, ".fn", original, base );
  SWIG_Lua_merge_tables(L, ".set", original, base );
  SWIG_Lua_merge_tables(L, ".get", original, base );
  lua_pop(L,1);
}

/* Function squashes all symbols from 'clss' bases into itself */
SWIGINTERN void  SWIG_Lua_class_squash_bases(lua_State *L, swig_lua_class *clss)
{
  int i;
  SWIG_Lua_get_class_metatable(L,clss->fqname);
  for(i=0;clss->base_names[i];i++)
  {
    if (clss->bases[i]==0) /* Somehow it's not found. Skip it */
      continue;
    /* Thing is: all bases are already registered. Thus they have already executed
     * this function. So we just need to squash them into us, because their bases
     * are already squashed into them. No need for recursion here!
     */
    SWIG_Lua_class_squash_base(L, clss->bases[i]);
  }
  lua_pop(L,1); /*tidy stack*/
}
#endif

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA) /* In elua this is useless */
/* helper add a variable to a registered class */
SWIGINTERN void  SWIG_Lua_add_variable(lua_State *L,const char *name,lua_CFunction getFn,lua_CFunction setFn)
{
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_get_table(L,".get"); /* find the .get table */
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_add_function(L,name,getFn);
  lua_pop(L,1);       /* tidy stack (remove table) */
  if (setFn)
  {
    SWIG_Lua_get_table(L,".set"); /* find the .set table */
    assert(lua_istable(L,-1));  /* just in case */
    SWIG_Lua_add_function(L,name,setFn);
    lua_pop(L,1);       /* tidy stack (remove table) */
  }
}

/* helper to recursively add class static details (static attributes, operations and constants) */
SWIGINTERN void SWIG_Lua_add_class_static_details(lua_State *L, swig_lua_class *clss)
{
  int i = 0;
  /* The class namespace table must be on the top of the stack */
  assert(lua_istable(L,-1));
  /* call all the base classes first: we can then override these later: */
  for(i=0;clss->bases[i];i++)
  {
    SWIG_Lua_add_class_static_details(L,clss->bases[i]);
  }

  SWIG_Lua_add_namespace_details(L, clss->cls_static);
}

SWIGINTERN void SWIG_Lua_add_class_user_metamethods(lua_State *L, swig_lua_class *clss); /* forward declaration */

/* helper to recursively add class details (attributes & operations) */
SWIGINTERN void  SWIG_Lua_add_class_instance_details(lua_State *L, swig_lua_class *clss)
{
  int i;
  size_t bases_count = 0;
  /* Add bases to .bases table */
  SWIG_Lua_get_table(L,".bases");
  assert(lua_istable(L,-1));  /* just in case */
  for(i=0;clss->bases[i];i++)
  {
    SWIG_Lua_get_class_metatable(L,clss->bases[i]->fqname);
    /* Base class must be already registered */
    assert(lua_istable(L,-1));
    lua_rawseti(L,-2,i+1); /* In lua indexing starts from 1 */
    bases_count++;
  }
  assert(lua_rawlen(L,-1) == bases_count);
  lua_pop(L,1); /* remove .bases table */
  /* add attributes */
  for(i=0;clss->attributes[i].name;i++){
    SWIG_Lua_add_variable(L,clss->attributes[i].name,clss->attributes[i].getmethod,clss->attributes[i].setmethod);
  }
  /* add methods to the metatable */
  SWIG_Lua_get_table(L,".fn"); /* find the .fn table */
  assert(lua_istable(L,-1));  /* just in case */
  for(i=0;clss->methods[i].name;i++){
    SWIG_Lua_add_function(L,clss->methods[i].name,clss->methods[i].func);
  }
  lua_pop(L,1);       /* tidy stack (remove table) */
  /* add operator overloads
    This adds methods from metatable array to metatable. Can mess up garbage
    collectind if someone defines __gc method
    */
  if(clss->metatable) {
    for(i=0;clss->metatable[i].name;i++) {
      SWIG_Lua_add_function(L,clss->metatable[i].name,clss->metatable[i].func);
    }
  }

#if !defined(SWIG_LUA_SQUASH_BASES)
  /* Adding metamethods that are defined in base classes. If bases were squashed
   * then it is obviously unnecessary
   */
  SWIG_Lua_add_class_user_metamethods(L, clss);
#endif
}

/* Helpers to add user defined class metamedhods - __add, __sub etc. The helpers are needed
   for the following issue: Lua runtime checks for metamethod existence with rawget function
   ignoring our SWIG-provided __index and __newindex functions. Thus our inheritance-aware method
   search algorithm doesn't work in such case. (Not to say that Lua runtime queries metamethod directly
   in metatable and not in object).
   Current solution is this: if somewhere in hierarchy metamethod __x is defined, then all descendants
   are automatically given a special proxy __x that calls the real __x method.
   Obvious idea - to copy __x instead of creating __x-proxy is wrong because if someone changes __x in runtime,
   those changes must be reflected in all descendants.
*/

SWIGRUNTIME int SWIG_Lua_resolve_metamethod(lua_State *L); /*forward declaration*/

/* The real function that resolves a metamethod.
 * Function searches given class and all its bases (recursively) for first instance of something that is
 * not equal to SWIG_Lua_resolve_metamethod. (Almost always this 'something' is actual metamethod implementation
 * and it is a SWIG-generated C function.). It returns value on the top of the L and there is no garbage below the
 * answer.
 * Returns 1 if found, 0 otherwise.
 * clss is class which metatable we will search for method
 * metamethod_name_idx is index in L where metamethod name (as string) lies
 * skip_check allows skipping searching metamethod in the given class and immediately going to searching in bases. skip_check
 * is not carried to subsequent recursive calls - false is always passed. It is set to true only at first call from
 * SWIG_Lua_resolve_metamethod
 * */
SWIGINTERN int SWIG_Lua_do_resolve_metamethod(lua_State *L, const swig_lua_class *clss, int metamethod_name_idx,
    int skip_check)
{
  /* This function is called recursively */
  int result = 0;
  int i = 0;

  if (!skip_check) {
    SWIG_Lua_get_class_metatable(L, clss->fqname);
    lua_pushvalue(L, metamethod_name_idx);
    lua_rawget(L,-2);
    /* If this is cfunction and it is equal to SWIG_Lua_resolve_metamethod then
     * this isn't the function we are looking for :)
     * lua_tocfunction will return NULL if not cfunction
     */
    if (!lua_isnil(L,-1) && lua_tocfunction(L,-1) != SWIG_Lua_resolve_metamethod ) {
      lua_remove(L,-2); /* removing class metatable */
      return 1;
    }
    lua_pop(L,2); /* remove class metatable and query result */
  }

  /* Forwarding calls to bases */
  for(i=0;clss->bases[i];i++)
  {
    result = SWIG_Lua_do_resolve_metamethod(L, clss->bases[i], metamethod_name_idx, 0);
    if (result)
      break;
  }

  return result;
}

/* The proxy function for metamethod. All parameters are passed as cclosure. Searches for actual method
 * and calls it */
SWIGRUNTIME int SWIG_Lua_resolve_metamethod(lua_State *L)
{
  int numargs;
  int metamethod_name_idx;
  const swig_lua_class* clss;
  int result;

  lua_checkstack(L,5);
  numargs = lua_gettop(L); /* number of arguments to pass to actual metamethod */

  /* Get upvalues from closure */
  lua_pushvalue(L, lua_upvalueindex(1)); /*Get function name*/
  metamethod_name_idx = lua_gettop(L);

  lua_pushvalue(L, lua_upvalueindex(2));
  clss = (const swig_lua_class*)(lua_touserdata(L,-1));
  lua_pop(L,1); /* remove lightuserdata with clss from stack */

  /* Actual work */
  result = SWIG_Lua_do_resolve_metamethod(L, clss, metamethod_name_idx, 1);
  if (!result) {
   SWIG_Lua_pushferrstring(L,"The metamethod proxy is set, but it failed to find actual metamethod. Memory corruption is most likely explanation.");
   lua_error(L);
   return 0;
  }

  lua_remove(L,-2); /* remove metamethod key */
  lua_insert(L,1); /* move function to correct position */
  lua_call(L, numargs, LUA_MULTRET);
  return lua_gettop(L); /* return all results */
}


/* If given metamethod must be present in given class, then creates appropriate proxy
 * Returns 1 if successfully added, 0 if not added because no base class has it, -1
 * if method is defined in the class metatable itself
 */
SWIGINTERN int SWIG_Lua_add_class_user_metamethod(lua_State *L, swig_lua_class *clss, const int metatable_index)
{
  int key_index;
  int success = 0;
  int i = 0;

  /* metamethod name - on the top of the stack */
  assert(lua_isstring(L,-1));

  key_index = lua_gettop(L);

  /* Check whether method is already defined in metatable */
  lua_pushvalue(L,key_index); /* copy of the key */
  lua_gettable(L,metatable_index);
  if( !lua_isnil(L,-1) ) {
    lua_pop(L,1);
    return -1;
  }
  lua_pop(L,1);

  /* Iterating over immediate bases */
  for(i=0;clss->bases[i];i++)
  {
    const swig_lua_class *base = clss->bases[i];
    SWIG_Lua_get_class_metatable(L, base->fqname);
    lua_pushvalue(L, key_index);
    lua_rawget(L, -2);
    if( !lua_isnil(L,-1) ) {
      lua_pushvalue(L, key_index);

      /* Add proxy function */
      lua_pushvalue(L, key_index); /* first closure value is function name */
      lua_pushlightuserdata(L, clss); /* second closure value is swig_lua_class structure */
      lua_pushcclosure(L, SWIG_Lua_resolve_metamethod, 2);

      lua_rawset(L, metatable_index);
      success = 1;
    }
    lua_pop(L,1); /* remove function or nil */
    lua_pop(L,1); /* remove base class metatable */

    if( success )
      break;
  }

  return success;
}

SWIGINTERN void SWIG_Lua_add_class_user_metamethods(lua_State *L, swig_lua_class *clss)
{
  int metatable_index;
  int metamethods_info_index;
  int tostring_undefined;
  int eq_undefined = 0;

  SWIG_Lua_get_class_metatable(L, clss->fqname);
  metatable_index = lua_gettop(L);
  SWIG_Lua_get_inheritable_metamethods(L);
  assert(lua_istable(L,-1));
  metamethods_info_index = lua_gettop(L);
  lua_pushnil(L); /* first key */
  while(lua_next(L, metamethods_info_index) != 0 ) {
    /* key at index -2, value at index -1 */
    const int is_inheritable = lua_toboolean(L,-2);
    lua_pop(L,1); /* remove value - we don't need it anymore */

    if(is_inheritable) { /* if metamethod is inheritable */
      SWIG_Lua_add_class_user_metamethod(L,clss,metatable_index);
    }
  }

  lua_pop(L,1); /* remove inheritable metamethods table */

  /* Special handling for __tostring method */
  lua_pushstring(L, "__tostring");
  lua_pushvalue(L,-1);
  lua_rawget(L,metatable_index);
  tostring_undefined = lua_isnil(L,-1);
  lua_pop(L,1);
  if( tostring_undefined ) {
    lua_pushcfunction(L, SWIG_Lua_class_tostring);
    lua_rawset(L, metatable_index);
  } else {
    lua_pop(L,1); /* remove copy of the key */
  }

  /* Special handling for __eq method */
  lua_pushstring(L, "__eq");
  lua_pushvalue(L,-1);
  lua_rawget(L,metatable_index);
  eq_undefined = lua_isnil(L,-1);
  lua_pop(L,1);
  if( eq_undefined ) {
    lua_pushcfunction(L, SWIG_Lua_class_equal);
    lua_rawset(L, metatable_index);
  } else {
    lua_pop(L,1); /* remove copy of the key */
  }
  /* Warning: __index and __newindex are SWIG-defined. For user-defined operator[]
   * a __getitem/__setitem method should be defined
   */
  lua_pop(L,1); /* pop class metatable */
}

/* Register class static methods,attributes etc as well as constructor proxy */
SWIGINTERN void SWIG_Lua_class_register_static(lua_State *L, swig_lua_class *clss)
{
  const int SWIGUNUSED begin = lua_gettop(L);
  lua_checkstack(L,5); /* just in case */
  assert(lua_istable(L,-1));  /* just in case */
  assert(strcmp(clss->name, clss->cls_static->name) == 0); /* in class those 2 must be equal */

  SWIG_Lua_namespace_register(L,clss->cls_static, 1);

  assert(lua_istable(L,-1)); /* just in case */

  /*  add its constructor to module with the name of the class
  so you can do MyClass(...) as well as new_MyClass(...)
  BUT only if a constructor is defined
  (this overcomes the problem of pure virtual classes without constructors)*/
  if (clss->constructor)
  {
    lua_getmetatable(L,-1);
    assert(lua_istable(L,-1)); /* just in case */
    SWIG_Lua_add_function(L,"__call", clss->constructor);
    lua_pop(L,1);
  }

  assert(lua_istable(L,-1)); /* just in case */
  SWIG_Lua_add_class_static_details(L, clss);

  /* clear stack */
  lua_pop(L,1);
  assert( lua_gettop(L) == begin );
}

/* Performs the instance (non-static) class registration process. Metatable for class is created
 * and added to the class registry.
 */
SWIGINTERN void  SWIG_Lua_class_register_instance(lua_State *L,swig_lua_class *clss)
{
  const int SWIGUNUSED begin = lua_gettop(L);
  int i;
  /* if name already there (class is already registered) then do nothing */
  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,clss->fqname);  /* get the name */
  lua_rawget(L,-2);
  if(!lua_isnil(L,-1)) {
    lua_pop(L,2);
    assert(lua_gettop(L)==begin);
    return;
  }
  lua_pop(L,2); /* tidy stack */
  /* Recursively initialize all bases */
  for(i=0;clss->bases[i];i++)
  {
    SWIG_Lua_class_register_instance(L,clss->bases[i]);
  }
  /* Again, get registry and push name */
  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,clss->fqname);  /* get the name */
  lua_newtable(L);    /* create the metatable */
#if defined(SWIG_LUA_SQUASH_BASES) && (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA)
  /* If squashing is requested, then merges all bases metatable into this one.
   * It would get us all special methods: __getitem, __add etc.
   * This would set .fn, .type, and other .xxx incorrectly, but we will overwrite it right away
   */
  {
    int new_metatable_index = lua_absindex(L,-1);
    for(i=0;clss->bases[i];i++)
    {
      int base_metatable;
      SWIG_Lua_get_class_metatable(L,clss->bases[i]->fqname);
      base_metatable = lua_absindex(L,-1);
      SWIG_Lua_merge_tables_by_index(L,new_metatable_index, base_metatable);
      lua_pop(L,1);
    }
  }
  /* And now we will overwrite all incorrectly set data */
#endif
  /* add string of class name called ".type" */
  lua_pushstring(L,".type");
  lua_pushstring(L,clss->fqname);
  lua_rawset(L,-3);
  /* add a table called bases */
  lua_pushstring(L,".bases");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".get" */
  lua_pushstring(L,".get");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".set" */
  lua_pushstring(L,".set");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".fn" */
  lua_pushstring(L,".fn");
  lua_newtable(L);
  /* add manual disown method */
  SWIG_Lua_add_function(L,"__disown",SWIG_Lua_class_disown);
  lua_rawset(L,-3);
  /* add accessor fns for using the .get,.set&.fn */
  SWIG_Lua_add_function(L,"__index",SWIG_Lua_class_get);
  SWIG_Lua_add_function(L,"__newindex",SWIG_Lua_class_set);
  SWIG_Lua_add_function(L,"__gc",SWIG_Lua_class_destruct);
  /* add it */
  lua_rawset(L,-3);  /* metatable into registry */
  lua_pop(L,1);      /* tidy stack (remove registry) */
  assert(lua_gettop(L) == begin);

#if defined(SWIG_LUA_SQUASH_BASES) && (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA)
  /* Now merge all symbols from .fn, .set, .get etc from bases to our tables */
  SWIG_Lua_class_squash_bases(L,clss);
#endif
  SWIG_Lua_get_class_metatable(L,clss->fqname);
  SWIG_Lua_add_class_instance_details(L,clss);  /* recursive adding of details (atts & ops) */
  lua_pop(L,1);      /* tidy stack (remove class metatable) */
  assert( lua_gettop(L) == begin );
}

SWIGINTERN void  SWIG_Lua_class_register(lua_State *L,swig_lua_class *clss)
{
  int SWIGUNUSED begin;
  assert(lua_istable(L,-1)); /* This is a table (module or namespace) where classes will be added */
  SWIG_Lua_class_register_instance(L,clss);
  SWIG_Lua_class_register_static(L,clss);

  /* Add links from static part to instance part and vice versa */
  /* [SWIG registry]                                   [Module]
   *    "MyClass" ----> [MyClass metatable] <=====     "MyClass" -+> [static part]
   *                     ".get" ----> ...        |                |     getmetatable()----|
   *                     ".set" ----> ...        |                |                       |
   *                     ".static" --------------)----------------/           [static part metatable]
   *                                             |                                ".get" --> ...
   *                                             |                                ".set" --> ....
   *                                             |=============================== ".instance"
   */
  begin = lua_gettop(L);
  lua_pushstring(L,clss->cls_static->name);
  lua_rawget(L,-2); /* get class static table */
  assert(lua_istable(L,-1));
  lua_getmetatable(L,-1);
  assert(lua_istable(L,-1)); /* get class static metatable */
  lua_pushstring(L,".instance"); /* prepare key */

  SWIG_Lua_get_class_metatable(L,clss->fqname); /* get class metatable */
  assert(lua_istable(L,-1));
  lua_pushstring(L,".static"); /* prepare key */
  lua_pushvalue(L, -4); /* push static class TABLE */
  assert(lua_istable(L,-1));
  lua_rawset(L,-3); /* assign static class table(!NOT metatable) as ".static" member of class metatable */
  lua_rawset(L,-3); /* assign class metatable as ".instance" member of class static METATABLE */
  lua_pop(L,2);
  assert(lua_gettop(L) == begin);
}
#endif /* SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA */

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)
SWIGINTERN void SWIG_Lua_elua_class_register_instance(lua_State *L, swig_lua_class *clss)
{
  const int SWIGUNUSED begin = lua_gettop(L);
  int i;
  /* if name already there (class is already registered) then do nothing */
  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,clss->fqname);  /* get the name */
  lua_rawget(L,-2);
  if(!lua_isnil(L,-1)) {
    lua_pop(L,2);
    assert(lua_gettop(L)==begin);
    return;
  }
  lua_pop(L,2); /* tidy stack */
  /* Recursively initialize all bases */
  for(i=0;clss->bases[i];i++)
  {
    SWIG_Lua_elua_class_register_instance(L,clss->bases[i]);
  }
  /* Again, get registry and push name */
  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,clss->fqname);  /* get the name */
  assert(clss->metatable);
  lua_pushrotable(L, (void*)(clss->metatable));    /* create the metatable */
  lua_rawset(L,-3);
  lua_pop(L,1);
  assert(lua_gettop(L) == begin);
}
#endif /* elua && eluac */

/* -----------------------------------------------------------------------------
 * Class/structure conversion fns
 * ----------------------------------------------------------------------------- */

/* helper to add metatable to new lua object */
SWIGINTERN void SWIG_Lua_AddMetatable(lua_State *L,swig_type_info *type)
{
  if (type->clientdata)  /* there is clientdata: so add the metatable */
  {
    SWIG_Lua_get_class_metatable(L,((swig_lua_class*)(type->clientdata))->fqname);
    if (lua_istable(L,-1))
    {
      lua_setmetatable(L,-2);
    }
    else
    {
      lua_pop(L,1);
    }
  }
}

/* pushes a new object into the lua stack */
SWIGRUNTIME void SWIG_Lua_NewPointerObj(lua_State *L,void *ptr,swig_type_info *type, int own)
{
  swig_lua_userdata *usr;
  if (!ptr){
    lua_pushnil(L);
    return;
  }
  usr=(swig_lua_userdata*)lua_newuserdata(L,sizeof(swig_lua_userdata));  /* get data */
  usr->ptr=ptr;  /* set the ptr */
  usr->type=type;
  usr->own=own;
#if (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC)
  SWIG_Lua_AddMetatable(L,type); /* add metatable */
#endif
}

/* takes a object from the lua stack & converts it into an object of the correct type
 (if possible) */
SWIGRUNTIME int  SWIG_Lua_ConvertPtr(lua_State *L,int index,void **ptr,swig_type_info *type,int flags)
{
  swig_lua_userdata *usr;
  swig_cast_info *cast;
  /* special case: lua nil => NULL pointer */
  if (lua_isnil(L,index))
  {
    *ptr=0;
    return (flags & SWIG_POINTER_NO_NULL) ? SWIG_NullReferenceError : SWIG_OK;
  }
  if (lua_islightuserdata(L,index))
  {
    *ptr=lua_touserdata(L,index);
    return (flags & SWIG_POINTER_NO_NULL) ? SWIG_NullReferenceError : SWIG_OK;
  }
  usr=(swig_lua_userdata*)lua_touserdata(L,index);  /* get data */
  if (usr)
  {
    if (flags & SWIG_POINTER_DISOWN) /* must disown the object */
    {
        usr->own=0;
    }
    if (!type)            /* special cast void*, no casting fn */
    {
      *ptr=usr->ptr;
      return SWIG_OK; /* ok */
    }
    cast=SWIG_TypeCheckStruct(usr->type,type); /* performs normal type checking */
    if (cast)
    {
      int newmemory = 0;
      *ptr=SWIG_TypeCast(cast,usr->ptr,&newmemory);
      assert(!newmemory); /* newmemory handling not yet implemented */
      return SWIG_OK;  /* ok */
    }
  }
  return SWIG_ERROR;  /* error */
}

SWIGRUNTIME void* SWIG_Lua_MustGetPtr(lua_State *L,int index,swig_type_info *type,int flags,
       int argnum,const char *func_name){
  void *result = 0;
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,index,&result,type,flags))){
    luaL_error (L,"Error in %s, expected a %s at argument number %d\n",
		func_name,(type && type->str)?type->str:"void*",argnum);
  }
  return result;
}

/* pushes a packed userdata. user for member fn pointers only */
SWIGRUNTIME void SWIG_Lua_NewPackedObj(lua_State *L,void *ptr,size_t size,swig_type_info *type)
{
  swig_lua_rawdata *raw;
  assert(ptr); /* not acceptable to pass in a NULL value */
  raw=(swig_lua_rawdata*)lua_newuserdata(L,sizeof(swig_lua_rawdata)-1+size);  /* alloc data */
  raw->type=type;
  raw->own=0;
  memcpy(raw->data,ptr,size); /* copy the data */
  SWIG_Lua_AddMetatable(L,type); /* add metatable */
}

/* converts a packed userdata. user for member fn pointers only */
SWIGRUNTIME int  SWIG_Lua_ConvertPacked(lua_State *L,int index,void *ptr,size_t size,swig_type_info *type)
{
  swig_lua_rawdata *raw;
  raw=(swig_lua_rawdata*)lua_touserdata(L,index);  /* get data */
  if (!raw) return SWIG_ERROR;  /* error */
  if (type==0 || type==raw->type) /* void* or identical type */
  {
    memcpy(ptr,raw->data,size); /* copy it */
    return SWIG_OK; /* ok */
  }
  return SWIG_ERROR;  /* error */
}

/* a function to get the typestring of a piece of data */
SWIGRUNTIME const char *SWIG_Lua_typename(lua_State *L, int tp)
{
  swig_lua_userdata *usr;
  if (lua_isuserdata(L,tp))
  {
    usr=(swig_lua_userdata*)lua_touserdata(L,tp);  /* get data */
    if (usr && usr->type && usr->type->str)
      return usr->type->str;
    return "userdata (unknown type)";
  }
  return lua_typename(L,lua_type(L,tp));
}

/* lua callable function to get the userdata's type */
SWIGRUNTIME int SWIG_Lua_type(lua_State *L)
{
  lua_pushstring(L,SWIG_Lua_typename(L,1));
  return 1;
}

/* -----------------------------------------------------------------------------
 * global variable support code: class/struct typemap functions
 * ----------------------------------------------------------------------------- */

#if ((SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUA) && (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC))
/* Install Constants */
SWIGINTERN void
SWIG_Lua_InstallConstants(lua_State *L, swig_lua_const_info constants[]) {
  int i;
  for (i = 0; constants[i].type; i++) {
    switch(constants[i].type) {
    case SWIG_LUA_INT:
      lua_pushstring(L,constants[i].name);
      lua_pushinteger(L,(lua_Integer)constants[i].lvalue);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_FLOAT:
      lua_pushstring(L,constants[i].name);
      lua_pushnumber(L,(lua_Number)constants[i].dvalue);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_CHAR:
      lua_pushstring(L,constants[i].name);
      {
        char c = (char)constants[i].lvalue;
        lua_pushlstring(L,&c,1);
      }
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_STRING:
      lua_pushstring(L,constants[i].name);
      lua_pushstring(L,(char *) constants[i].pvalue);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_POINTER:
      lua_pushstring(L,constants[i].name);
      SWIG_NewPointerObj(L,constants[i].pvalue, *(constants[i]).ptype,0);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_BINARY:
      lua_pushstring(L,constants[i].name);
      SWIG_NewMemberObj(L,constants[i].pvalue,constants[i].lvalue,*(constants[i]).ptype);
      lua_rawset(L,-3);
      break;
    default:
      break;
    }
  }
}
#endif

/* -----------------------------------------------------------------------------
 * executing lua code from within the wrapper
 * ----------------------------------------------------------------------------- */

#ifndef SWIG_DOSTRING_FAIL /* Allows redefining of error function */
#define SWIG_DOSTRING_FAIL(S) fprintf(stderr,"%s\n",S)
#endif
/* Executes a C string in Lua which is a really simple way of calling lua from C
Unfortunately lua keeps changing its APIs, so we need a conditional compile
In lua 5.0.X it's lua_dostring()
In lua 5.1.X it's luaL_dostring()
*/
SWIGINTERN int
SWIG_Lua_dostring(lua_State *L, const char *str) {
  int ok,top;
  if (str==0 || str[0]==0) return 0; /* nothing to do */
  top=lua_gettop(L); /* save stack */
#if (defined(LUA_VERSION_NUM) && (LUA_VERSION_NUM>=501))
  ok=luaL_dostring(L,str);	/* looks like this is lua 5.1.X or later, good */
#else
  ok=lua_dostring(L,str);	/* might be lua 5.0.x, using lua_dostring */
#endif
  if (ok!=0) {
    SWIG_DOSTRING_FAIL(lua_tostring(L,-1));
  }
  lua_settop(L,top); /* restore the stack */
  return ok;
}

#ifdef __cplusplus
}
#endif

/* ------------------------------ end luarun.swg  ------------------------------ */


/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_p_MidiMessage swig_types[0]
#define SWIGTYPE_p_double swig_types[1]
#define SWIGTYPE_p_dsp__AbsoluteValue swig_types[2]
#define SWIGTYPE_p_dsp__AudioBufferT_dsp__Sample_t swig_types[3]
#define SWIGTYPE_p_dsp__AudioWrapperT_dsp__Sample_t swig_types[4]
#define SWIGTYPE_p_dsp__Biquad swig_types[5]
#define SWIGTYPE_p_dsp__BooleanMask swig_types[6]
#define SWIGTYPE_p_dsp__BufferDuration swig_types[7]
#define SWIGTYPE_p_dsp__BufferRate swig_types[8]
#define SWIGTYPE_p_dsp__ChannelMerger swig_types[9]
#define SWIGTYPE_p_dsp__ChannelSplitter swig_types[10]
#define SWIGTYPE_p_dsp__Clipper swig_types[11]
#define SWIGTYPE_p_dsp__ClockTrigger swig_types[12]
#define SWIGTYPE_p_dsp__Comparison swig_types[13]
#define SWIGTYPE_p_dsp__CompressorGate swig_types[14]
#define SWIGTYPE_p_dsp__Consumer swig_types[15]
#define SWIGTYPE_p_dsp__Convolver swig_types[16]
#define SWIGTYPE_p_dsp__Crossover swig_types[17]
#define SWIGTYPE_p_dsp__Differentiator swig_types[18]
#define SWIGTYPE_p_dsp__Division swig_types[19]
#define SWIGTYPE_p_dsp__DryWet swig_types[20]
#define SWIGTYPE_p_dsp__Envelope swig_types[21]
#define SWIGTYPE_p_dsp__Floor swig_types[22]
#define SWIGTYPE_p_dsp__ForwardFFT swig_types[23]
#define SWIGTYPE_p_dsp__FrequencyToNote swig_types[24]
#define SWIGTYPE_p_dsp__FunctionOscillator swig_types[25]
#define SWIGTYPE_p_dsp__Hyperbolic swig_types[26]
#define SWIGTYPE_p_dsp__Identity swig_types[27]
#define SWIGTYPE_p_dsp__Integrator swig_types[28]
#define SWIGTYPE_p_dsp__Interpolation swig_types[29]
#define SWIGTYPE_p_dsp__InverseFFT swig_types[30]
#define SWIGTYPE_p_dsp__Lag swig_types[31]
#define SWIGTYPE_p_dsp__Logarithm swig_types[32]
#define SWIGTYPE_p_dsp__MidSide swig_types[33]
#define SWIGTYPE_p_dsp__MidiBuffer swig_types[34]
#define SWIGTYPE_p_dsp__MidiBuffer__Iterator swig_types[35]
#define SWIGTYPE_p_dsp__MidiInput swig_types[36]
#define SWIGTYPE_p_dsp__MidiMessage swig_types[37]
#define SWIGTYPE_p_dsp__MidiOutput swig_types[38]
#define SWIGTYPE_p_dsp__Modulo swig_types[39]
#define SWIGTYPE_p_dsp__MoorerOscillator swig_types[40]
#define SWIGTYPE_p_dsp__Multiplication swig_types[41]
#define SWIGTYPE_p_dsp__Negative swig_types[42]
#define SWIGTYPE_p_dsp__Noise swig_types[43]
#define SWIGTYPE_p_dsp__NotGate swig_types[44]
#define SWIGTYPE_p_dsp__NoteToFrequency swig_types[45]
#define SWIGTYPE_p_dsp__OnOff swig_types[46]
#define SWIGTYPE_p_dsp__OnePole swig_types[47]
#define SWIGTYPE_p_dsp__Phasor swig_types[48]
#define SWIGTYPE_p_dsp__Power swig_types[49]
#define SWIGTYPE_p_dsp__Producer swig_types[50]
#define SWIGTYPE_p_dsp__Reciprocal swig_types[51]
#define SWIGTYPE_p_dsp__Recorder swig_types[52]
#define SWIGTYPE_p_dsp__ResetTrigger swig_types[53]
#define SWIGTYPE_p_dsp__SampleAndHold swig_types[54]
#define SWIGTYPE_p_dsp__SampleDuration swig_types[55]
#define SWIGTYPE_p_dsp__SamplePlayer swig_types[56]
#define SWIGTYPE_p_dsp__SampleRate swig_types[57]
#define SWIGTYPE_p_dsp__ScaledFFT swig_types[58]
#define SWIGTYPE_p_dsp__Sequencer swig_types[59]
#define SWIGTYPE_p_dsp__Shape swig_types[60]
#define SWIGTYPE_p_dsp__Shaper swig_types[61]
#define SWIGTYPE_p_dsp__Spread swig_types[62]
#define SWIGTYPE_p_dsp__StereoPanner swig_types[63]
#define SWIGTYPE_p_dsp__TableOscillator swig_types[64]
#define SWIGTYPE_p_dsp__TimedMidiMessage swig_types[65]
#define SWIGTYPE_p_dsp__Transformer swig_types[66]
#define SWIGTYPE_p_dsp__TriggerHold swig_types[67]
#define SWIGTYPE_p_dsp__Trigonometric swig_types[68]
#define SWIGTYPE_p_dsp__VariableDelay swig_types[69]
#define SWIGTYPE_p_std__functionT_void_fF_t swig_types[70]
#define SWIGTYPE_p_std__shared_ptrT_Buffer_t swig_types[71]
#define SWIGTYPE_p_std__shared_ptrT_Input_t swig_types[72]
#define SWIGTYPE_p_std__shared_ptrT_Node_t swig_types[73]
#define SWIGTYPE_p_std__shared_ptrT_Output_t swig_types[74]
#define SWIGTYPE_p_std__shared_ptrT_dsp__Buffer_t swig_types[75]
#define SWIGTYPE_p_std__shared_ptrT_dsp__MidiBuffer_t swig_types[76]
#define SWIGTYPE_p_std__shared_ptrT_std__functionT_double_fdoubleF_t_t swig_types[77]
#define SWIGTYPE_p_std__unordered_setT_uint8_t_t swig_types[78]
#define SWIGTYPE_p_std__vectorT_double_t swig_types[79]
#define SWIGTYPE_p_std__vectorT_std__shared_ptrT_Buffer_t_t swig_types[80]
#define SWIGTYPE_p_std__vectorT_uint8_t_t swig_types[81]
#define SWIGTYPE_p_uint8_t swig_types[82]
static swig_type_info *swig_types[84];
static swig_module_info swig_module = {swig_types, 83, 0, 0, 0, 0};
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */

#define SWIG_name      "nodes"
#define SWIG_init      luaopen_nodes
#define SWIG_init_user luaopen_nodes_user

#define SWIG_LUACODE   luaopen_nodes_luacode

namespace swig {
typedef struct{} LANGUAGE_OBJ;
}


#include "AudioBuffer.h"
#include "AudioWrapper.h"
#include "Constants.h"
#include "Functions.h"
#include "MidiBuffer.h"
#include "MidiMessage.h"
#include "DSP.h"

#ifdef __cplusplus
extern "C" {
#endif
static int _wrap_PI_get(lua_State* L) {
  int SWIG_arg = 0;
  dsp::Sample result;
  
  SWIG_check_num_args("dsp::PI",0,0)
  result = (dsp::Sample)(dsp::Sample)dsp::PI;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ONE_OVER_PI_get(lua_State* L) {
  int SWIG_arg = 0;
  dsp::Sample result;
  
  SWIG_check_num_args("dsp::ONE_OVER_PI",0,0)
  result = (dsp::Sample)(dsp::Sample)dsp::ONE_OVER_PI;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TAU_get(lua_State* L) {
  int SWIG_arg = 0;
  dsp::Sample result;
  
  SWIG_check_num_args("dsp::TAU",0,0)
  result = (dsp::Sample)(dsp::Sample)dsp::TAU;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ONE_OVER_TAU_get(lua_State* L) {
  int SWIG_arg = 0;
  dsp::Sample result;
  
  SWIG_check_num_args("dsp::ONE_OVER_TAU",0,0)
  result = (dsp::Sample)(dsp::Sample)dsp::ONE_OVER_TAU;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PI_OVER_TWO_get(lua_State* L) {
  int SWIG_arg = 0;
  dsp::Sample result;
  
  SWIG_check_num_args("dsp::PI_OVER_TWO",0,0)
  result = (dsp::Sample)(dsp::Sample)dsp::PI_OVER_TWO;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SQRT_OF_TWO_get(lua_State* L) {
  int SWIG_arg = 0;
  dsp::Sample result;
  
  SWIG_check_num_args("dsp::SQRT_OF_TWO",0,0)
  result = (dsp::Sample)(dsp::Sample)dsp::SQRT_OF_TWO;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LOG_OF_TWO_get(lua_State* L) {
  int SWIG_arg = 0;
  dsp::Sample result;
  
  SWIG_check_num_args("dsp::LOG_OF_TWO",0,0)
  result = (dsp::Sample)(dsp::Sample)dsp::LOG_OF_TWO;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ONE_OVER_LOG_OF_TWO_get(lua_State* L) {
  int SWIG_arg = 0;
  dsp::Sample result;
  
  SWIG_check_num_args("dsp::ONE_OVER_LOG_OF_TWO",0,0)
  result = (dsp::Sample)(dsp::Sample)dsp::ONE_OVER_LOG_OF_TWO;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PHI_get(lua_State* L) {
  int SWIG_arg = 0;
  dsp::Sample result;
  
  SWIG_check_num_args("dsp::PHI",0,0)
  result = (dsp::Sample)(dsp::Sample)dsp::PHI;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_E_get(lua_State* L) {
  int SWIG_arg = 0;
  dsp::Sample result;
  
  SWIG_check_num_args("dsp::E",0,0)
  result = (dsp::Sample)(dsp::Sample)dsp::E;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Shape(lua_State* L) {
  int SWIG_arg = 0;
  dsp::Shape *result = 0 ;
  
  SWIG_check_num_args("dsp::Shape::Shape",0,0)
  result = (dsp::Shape *)new dsp::Shape();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_dsp__Shape,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Shape(void *obj) {
dsp::Shape *arg1 = (dsp::Shape *) obj;
delete arg1;
}
static int _proxy__wrap_new_Shape(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Shape);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Shape_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Shape_methods[]= {
    {0,0}
};
static swig_lua_method swig_Shape_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Shape_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Shape_Sf_SwigStatic_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("MIN", dsp::Shape::MIN)},
    {SWIG_LUA_CONSTTAB_INT("MAX", dsp::Shape::MAX)},
    {SWIG_LUA_CONSTTAB_INT("LINEAR", dsp::Shape::LINEAR)},
    {SWIG_LUA_CONSTTAB_INT("EXPONENTIAL", dsp::Shape::EXPONENTIAL)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Shape_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Shape_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Shape_Sf_SwigStatic = {
    "Shape",
    swig_Shape_Sf_SwigStatic_methods,
    swig_Shape_Sf_SwigStatic_attributes,
    swig_Shape_Sf_SwigStatic_constants,
    swig_Shape_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Shape_bases[] = {0};
static const char *swig_Shape_base_names[] = {0};
static swig_lua_class _wrap_class_Shape = { "Shape", "Shape", &SWIGTYPE_p_dsp__Shape,_proxy__wrap_new_Shape, swig_delete_Shape, swig_Shape_methods, swig_Shape_attributes, &swig_Shape_Sf_SwigStatic, swig_Shape_meta, swig_Shape_bases, swig_Shape_base_names };

static int _wrap_new_Interpolation(lua_State* L) {
  int SWIG_arg = 0;
  dsp::Interpolation *result = 0 ;
  
  SWIG_check_num_args("dsp::Interpolation::Interpolation",0,0)
  result = (dsp::Interpolation *)new dsp::Interpolation();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_dsp__Interpolation,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Interpolation(void *obj) {
dsp::Interpolation *arg1 = (dsp::Interpolation *) obj;
delete arg1;
}
static int _proxy__wrap_new_Interpolation(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Interpolation);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Interpolation_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Interpolation_methods[]= {
    {0,0}
};
static swig_lua_method swig_Interpolation_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Interpolation_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Interpolation_Sf_SwigStatic_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("MIN", dsp::Interpolation::MIN)},
    {SWIG_LUA_CONSTTAB_INT("MAX", dsp::Interpolation::MAX)},
    {SWIG_LUA_CONSTTAB_INT("NONE", dsp::Interpolation::NONE)},
    {SWIG_LUA_CONSTTAB_INT("LINEAR", dsp::Interpolation::LINEAR)},
    {SWIG_LUA_CONSTTAB_INT("HERMITE", dsp::Interpolation::HERMITE)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Interpolation_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Interpolation_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Interpolation_Sf_SwigStatic = {
    "Interpolation",
    swig_Interpolation_Sf_SwigStatic_methods,
    swig_Interpolation_Sf_SwigStatic_attributes,
    swig_Interpolation_Sf_SwigStatic_constants,
    swig_Interpolation_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Interpolation_bases[] = {0};
static const char *swig_Interpolation_base_names[] = {0};
static swig_lua_class _wrap_class_Interpolation = { "Interpolation", "Interpolation", &SWIGTYPE_p_dsp__Interpolation,_proxy__wrap_new_Interpolation, swig_delete_Interpolation, swig_Interpolation_methods, swig_Interpolation_attributes, &swig_Interpolation_Sf_SwigStatic, swig_Interpolation_meta, swig_Interpolation_bases, swig_Interpolation_base_names };

static int _wrap_byteToUnipolar(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  dsp::Sample result;
  
  SWIG_check_num_args("dsp::byteToUnipolar",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("dsp::byteToUnipolar",1,"int const");
  arg1 = (int const)lua_tonumber(L, 1);
  result = (dsp::Sample)dsp::byteToUnipolar(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_unipolarToByte(lua_State* L) {
  int SWIG_arg = 0;
  dsp::Sample arg1 ;
  int result;
  
  SWIG_check_num_args("dsp::unipolarToByte",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("dsp::unipolarToByte",1,"dsp::Sample const");
  arg1 = (dsp::Sample const)lua_tonumber(L, 1);
  result = (int)dsp::unipolarToByte(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_shortToBipolar(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  dsp::Sample result;
  
  SWIG_check_num_args("dsp::shortToBipolar",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("dsp::shortToBipolar",1,"int const");
  arg1 = (int const)lua_tonumber(L, 1);
  result = (dsp::Sample)dsp::shortToBipolar(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_bipolarToShort(lua_State* L) {
  int SWIG_arg = 0;
  dsp::Sample arg1 ;
  int result;
  
  SWIG_check_num_args("dsp::bipolarToShort",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("dsp::bipolarToShort",1,"dsp::Sample const");
  arg1 = (dsp::Sample const)lua_tonumber(L, 1);
  result = (int)dsp::bipolarToShort(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_clip(lua_State* L) {
  int SWIG_arg = 0;
  dsp::Sample arg1 ;
  dsp::Sample arg2 ;
  dsp::Sample arg3 ;
  dsp::Sample result;
  
  SWIG_check_num_args("dsp::clip",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("dsp::clip",1,"dsp::Sample const");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("dsp::clip",2,"dsp::Sample const");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("dsp::clip",3,"dsp::Sample const");
  arg1 = (dsp::Sample const)lua_tonumber(L, 1);
  arg2 = (dsp::Sample const)lua_tonumber(L, 2);
  arg3 = (dsp::Sample const)lua_tonumber(L, 3);
  result = (dsp::Sample)dsp::clip(arg1,arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_wrap(lua_State* L) {
  int SWIG_arg = 0;
  dsp::Sample arg1 ;
  dsp::Sample arg2 ;
  dsp::Sample result;
  
  SWIG_check_num_args("dsp::wrap",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("dsp::wrap",1,"dsp::Sample const");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("dsp::wrap",2,"dsp::Sample const");
  arg1 = (dsp::Sample const)lua_tonumber(L, 1);
  arg2 = (dsp::Sample const)lua_tonumber(L, 2);
  result = (dsp::Sample)dsp::wrap(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_linear__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  dsp::Sample *arg1 = (dsp::Sample *) 0 ;
  size_t arg2 ;
  dsp::Sample arg3 ;
  dsp::Sample arg4 ;
  dsp::Sample result;
  
  SWIG_check_num_args("dsp::linear",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("dsp::linear",1,"dsp::Sample *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("dsp::linear",2,"size_t const");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("dsp::linear",3,"dsp::Sample const");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("dsp::linear",4,"dsp::Sample const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("linear",1,SWIGTYPE_p_double);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t const)lua_tonumber(L, 2);
  arg3 = (dsp::Sample const)lua_tonumber(L, 3);
  arg4 = (dsp::Sample const)lua_tonumber(L, 4);
  result = (dsp::Sample)dsp::linear(arg1,arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_linear__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  dsp::Sample *arg1 = (dsp::Sample *) 0 ;
  size_t arg2 ;
  dsp::Sample arg3 ;
  dsp::Sample result;
  
  SWIG_check_num_args("dsp::linear",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("dsp::linear",1,"dsp::Sample *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("dsp::linear",2,"size_t const");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("dsp::linear",3,"dsp::Sample const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("linear",1,SWIGTYPE_p_double);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t const)lua_tonumber(L, 2);
  arg3 = (dsp::Sample const)lua_tonumber(L, 3);
  result = (dsp::Sample)dsp::linear(arg1,arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_linear(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_double, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_linear__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_double, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_linear__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'linear'\n"
    "  Possible C/C++ prototypes are:\n"
    "    dsp::linear(dsp::Sample *,size_t const,dsp::Sample const,dsp::Sample const)\n"
    "    dsp::linear(dsp::Sample *,size_t const,dsp::Sample const)\n");
  lua_error(L);return 0;
}


static int _wrap_hermite__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  dsp::Sample *arg1 = (dsp::Sample *) 0 ;
  size_t arg2 ;
  dsp::Sample arg3 ;
  dsp::Sample arg4 ;
  dsp::Sample result;
  
  SWIG_check_num_args("dsp::hermite",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("dsp::hermite",1,"dsp::Sample *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("dsp::hermite",2,"size_t const");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("dsp::hermite",3,"dsp::Sample const");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("dsp::hermite",4,"dsp::Sample const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("hermite",1,SWIGTYPE_p_double);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t const)lua_tonumber(L, 2);
  arg3 = (dsp::Sample const)lua_tonumber(L, 3);
  arg4 = (dsp::Sample const)lua_tonumber(L, 4);
  result = (dsp::Sample)dsp::hermite(arg1,arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_hermite__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  dsp::Sample *arg1 = (dsp::Sample *) 0 ;
  size_t arg2 ;
  dsp::Sample arg3 ;
  dsp::Sample result;
  
  SWIG_check_num_args("dsp::hermite",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("dsp::hermite",1,"dsp::Sample *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("dsp::hermite",2,"size_t const");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("dsp::hermite",3,"dsp::Sample const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("hermite",1,SWIGTYPE_p_double);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t const)lua_tonumber(L, 2);
  arg3 = (dsp::Sample const)lua_tonumber(L, 3);
  result = (dsp::Sample)dsp::hermite(arg1,arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_hermite(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_double, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_hermite__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_double, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_hermite__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'hermite'\n"
    "  Possible C/C++ prototypes are:\n"
    "    dsp::hermite(dsp::Sample *,size_t const,dsp::Sample const,dsp::Sample const)\n"
    "    dsp::hermite(dsp::Sample *,size_t const,dsp::Sample const)\n");
  lua_error(L);return 0;
}


static int _wrap_ScaledFFT_setup(lua_State* L) {
  int SWIG_arg = 0;
  dsp::ScaledFFT *arg1 = (dsp::ScaledFFT *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("dsp::ScaledFFT::setup",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("dsp::ScaledFFT::setup",1,"dsp::ScaledFFT *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("dsp::ScaledFFT::setup",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_dsp__ScaledFFT,0))){
    SWIG_fail_ptr("ScaledFFT_setup",1,SWIGTYPE_p_dsp__ScaledFFT);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->setup(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ScaledFFT_getSize(lua_State* L) {
  int SWIG_arg = 0;
  dsp::ScaledFFT *arg1 = (dsp::ScaledFFT *) 0 ;
  size_t result;
  
  SWIG_check_num_args("dsp::ScaledFFT::getSize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("dsp::ScaledFFT::getSize",1,"dsp::ScaledFFT *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_dsp__ScaledFFT,0))){
    SWIG_fail_ptr("ScaledFFT_getSize",1,SWIGTYPE_p_dsp__ScaledFFT);
  }
  
  result = (arg1)->getSize();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ScaledFFT_getComplexSize(lua_State* L) {
  int SWIG_arg = 0;
  dsp::ScaledFFT *arg1 = (dsp::ScaledFFT *) 0 ;
  size_t result;
  
  SWIG_check_num_args("dsp::ScaledFFT::getComplexSize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("dsp::ScaledFFT::getComplexSize",1,"dsp::ScaledFFT *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_dsp__ScaledFFT,0))){
    SWIG_fail_ptr("ScaledFFT_getComplexSize",1,SWIGTYPE_p_dsp__ScaledFFT);
  }
  
  result = (arg1)->getComplexSize();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ScaledFFT_toRealImaginary(lua_State* L) {
  int SWIG_arg = 0;
  dsp::ScaledFFT *arg1 = (dsp::ScaledFFT *) 0 ;
  dsp::Sample *arg2 = (dsp::Sample *) 0 ;
  dsp::Sample *arg3 = (dsp::Sample *) 0 ;
  dsp::Sample *arg4 = (dsp::Sample *) 0 ;
  
  SWIG_check_num_args("dsp::ScaledFFT::toRealImaginary",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("dsp::ScaledFFT::toRealImaginary",1,"dsp::ScaledFFT *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("dsp::ScaledFFT::toRealImaginary",2,"dsp::Sample *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("dsp::ScaledFFT::toRealImaginary",3,"dsp::Sample *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("dsp::ScaledFFT::toRealImaginary",4,"dsp::Sample *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_dsp__ScaledFFT,0))){
    SWIG_fail_ptr("ScaledFFT_toRealImaginary",1,SWIGTYPE_p_dsp__ScaledFFT);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("ScaledFFT_toRealImaginary",2,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("ScaledFFT_toRealImaginary",3,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("ScaledFFT_toRealImaginary",4,SWIGTYPE_p_double);
  }
  
  (arg1)->toRealImaginary(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ScaledFFT_fromRealImaginary(lua_State* L) {
  int SWIG_arg = 0;
  dsp::ScaledFFT *arg1 = (dsp::ScaledFFT *) 0 ;
  dsp::Sample *arg2 = (dsp::Sample *) 0 ;
  dsp::Sample *arg3 = (dsp::Sample *) 0 ;
  dsp::Sample *arg4 = (dsp::Sample *) 0 ;
  
  SWIG_check_num_args("dsp::ScaledFFT::fromRealImaginary",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("dsp::ScaledFFT::fromRealImaginary",1,"dsp::ScaledFFT *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("dsp::ScaledFFT::fromRealImaginary",2,"dsp::Sample *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("dsp::ScaledFFT::fromRealImaginary",3,"dsp::Sample *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("dsp::ScaledFFT::fromRealImaginary",4,"dsp::Sample *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_dsp__ScaledFFT,0))){
    SWIG_fail_ptr("ScaledFFT_fromRealImaginary",1,SWIGTYPE_p_dsp__ScaledFFT);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("ScaledFFT_fromRealImaginary",2,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("ScaledFFT_fromRealImaginary",3,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("ScaledFFT_fromRealImaginary",4,SWIGTYPE_p_double);
  }
  
  (arg1)->fromRealImaginary(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ScaledFFT_toMagnitudePhase(lua_State* L) {
  int SWIG_arg = 0;
  dsp::ScaledFFT *arg1 = (dsp::ScaledFFT *) 0 ;
  dsp::Sample *arg2 = (dsp::Sample *) 0 ;
  dsp::Sample *arg3 = (dsp::Sample *) 0 ;
  dsp::Sample *arg4 = (dsp::Sample *) 0 ;
  
  SWIG_check_num_args("dsp::ScaledFFT::toMagnitudePhase",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("dsp::ScaledFFT::toMagnitudePhase",1,"dsp::ScaledFFT *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("dsp::ScaledFFT::toMagnitudePhase",2,"dsp::Sample *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("dsp::ScaledFFT::toMagnitudePhase",3,"dsp::Sample *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("dsp::ScaledFFT::toMagnitudePhase",4,"dsp::Sample *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_dsp__ScaledFFT,0))){
    SWIG_fail_ptr("ScaledFFT_toMagnitudePhase",1,SWIGTYPE_p_dsp__ScaledFFT);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("ScaledFFT_toMagnitudePhase",2,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("ScaledFFT_toMagnitudePhase",3,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("ScaledFFT_toMagnitudePhase",4,SWIGTYPE_p_double);
  }
  
  (arg1)->toMagnitudePhase(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ScaledFFT_fromMagnitudePhase(lua_State* L) {
  int SWIG_arg = 0;
  dsp::ScaledFFT *arg1 = (dsp::ScaledFFT *) 0 ;
  dsp::Sample *arg2 = (dsp::Sample *) 0 ;
  dsp::Sample *arg3 = (dsp::Sample *) 0 ;
  dsp::Sample *arg4 = (dsp::Sample *) 0 ;
  
  SWIG_check_num_args("dsp::ScaledFFT::fromMagnitudePhase",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("dsp::ScaledFFT::fromMagnitudePhase",1,"dsp::ScaledFFT *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("dsp::ScaledFFT::fromMagnitudePhase",2,"dsp::Sample *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("dsp::ScaledFFT::fromMagnitudePhase",3,"dsp::Sample *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("dsp::ScaledFFT::fromMagnitudePhase",4,"dsp::Sample *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_dsp__ScaledFFT,0))){
    SWIG_fail_ptr("ScaledFFT_fromMagnitudePhase",1,SWIGTYPE_p_dsp__ScaledFFT);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("ScaledFFT_fromMagnitudePhase",2,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("ScaledFFT_fromMagnitudePhase",3,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("ScaledFFT_fromMagnitudePhase",4,SWIGTYPE_p_double);
  }
  
  (arg1)->fromMagnitudePhase(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ScaledFFT(lua_State* L) {
  int SWIG_arg = 0;
  dsp::ScaledFFT *result = 0 ;
  
  SWIG_check_num_args("dsp::ScaledFFT::ScaledFFT",0,0)
  result = (dsp::ScaledFFT *)new dsp::ScaledFFT();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_dsp__ScaledFFT,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ScaledFFT(void *obj) {
dsp::ScaledFFT *arg1 = (dsp::ScaledFFT *) obj;
delete arg1;
}
static int _proxy__wrap_new_ScaledFFT(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ScaledFFT);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ScaledFFT_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ScaledFFT_methods[]= {
    { "setup", _wrap_ScaledFFT_setup},
    { "getSize", _wrap_ScaledFFT_getSize},
    { "getComplexSize", _wrap_ScaledFFT_getComplexSize},
    { "toRealImaginary", _wrap_ScaledFFT_toRealImaginary},
    { "fromRealImaginary", _wrap_ScaledFFT_fromRealImaginary},
    { "toMagnitudePhase", _wrap_ScaledFFT_toMagnitudePhase},
    { "fromMagnitudePhase", _wrap_ScaledFFT_fromMagnitudePhase},
    {0,0}
};
static swig_lua_method swig_ScaledFFT_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ScaledFFT_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ScaledFFT_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ScaledFFT_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ScaledFFT_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ScaledFFT_Sf_SwigStatic = {
    "ScaledFFT",
    swig_ScaledFFT_Sf_SwigStatic_methods,
    swig_ScaledFFT_Sf_SwigStatic_attributes,
    swig_ScaledFFT_Sf_SwigStatic_constants,
    swig_ScaledFFT_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ScaledFFT_bases[] = {0};
static const char *swig_ScaledFFT_base_names[] = {0};
static swig_lua_class _wrap_class_ScaledFFT = { "ScaledFFT", "ScaledFFT", &SWIGTYPE_p_dsp__ScaledFFT,_proxy__wrap_new_ScaledFFT, swig_delete_ScaledFFT, swig_ScaledFFT_methods, swig_ScaledFFT_attributes, &swig_ScaledFFT_Sf_SwigStatic, swig_ScaledFFT_meta, swig_ScaledFFT_bases, swig_ScaledFFT_base_names };

static int _wrap_new_MidiBuffer(lua_State* L) {
  int SWIG_arg = 0;
  dsp::MidiBuffer *result = 0 ;
  
  SWIG_check_num_args("dsp::MidiBuffer::MidiBuffer",0,0)
  result = (dsp::MidiBuffer *)new dsp::MidiBuffer();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_dsp__MidiBuffer,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MidiBuffer_begin(lua_State* L) {
  int SWIG_arg = 0;
  dsp::MidiBuffer *arg1 = (dsp::MidiBuffer *) 0 ;
  dsp::MidiBuffer::Iterator result;
  
  SWIG_check_num_args("dsp::MidiBuffer::begin",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("dsp::MidiBuffer::begin",1,"dsp::MidiBuffer const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_dsp__MidiBuffer,0))){
    SWIG_fail_ptr("MidiBuffer_begin",1,SWIGTYPE_p_dsp__MidiBuffer);
  }
  
  result = ((dsp::MidiBuffer const *)arg1)->begin();
  {
    dsp::MidiBuffer::Iterator * resultptr = new dsp::MidiBuffer::Iterator((const dsp::MidiBuffer::Iterator &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_dsp__MidiBuffer__Iterator,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MidiBuffer_c_end(lua_State* L) {
  int SWIG_arg = 0;
  dsp::MidiBuffer *arg1 = (dsp::MidiBuffer *) 0 ;
  dsp::MidiBuffer::Iterator result;
  
  SWIG_check_num_args("dsp::MidiBuffer::end",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("dsp::MidiBuffer::end",1,"dsp::MidiBuffer const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_dsp__MidiBuffer,0))){
    SWIG_fail_ptr("MidiBuffer_c_end",1,SWIGTYPE_p_dsp__MidiBuffer);
  }
  
  result = ((dsp::MidiBuffer const *)arg1)->end();
  {
    dsp::MidiBuffer::Iterator * resultptr = new dsp::MidiBuffer::Iterator((const dsp::MidiBuffer::Iterator &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_dsp__MidiBuffer__Iterator,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MidiBuffer_addEvent(lua_State* L) {
  int SWIG_arg = 0;
  dsp::MidiBuffer *arg1 = (dsp::MidiBuffer *) 0 ;
  MidiMessage *arg2 = 0 ;
  size_t arg3 ;
  
  SWIG_check_num_args("dsp::MidiBuffer::addEvent",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("dsp::MidiBuffer::addEvent",1,"dsp::MidiBuffer *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("dsp::MidiBuffer::addEvent",2,"MidiMessage const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("dsp::MidiBuffer::addEvent",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_dsp__MidiBuffer,0))){
    SWIG_fail_ptr("MidiBuffer_addEvent",1,SWIGTYPE_p_dsp__MidiBuffer);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_MidiMessage,0))){
    SWIG_fail_ptr("MidiBuffer_addEvent",2,SWIGTYPE_p_MidiMessage);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  (arg1)->addEvent((MidiMessage const &)*arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MidiBuffer_addEvents(lua_State* L) {
  int SWIG_arg = 0;
  dsp::MidiBuffer *arg1 = (dsp::MidiBuffer *) 0 ;
  dsp::MidiBuffer *arg2 = 0 ;
  size_t arg3 ;
  size_t arg4 ;
  size_t arg5 ;
  
  SWIG_check_num_args("dsp::MidiBuffer::addEvents",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("dsp::MidiBuffer::addEvents",1,"dsp::MidiBuffer *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("dsp::MidiBuffer::addEvents",2,"dsp::MidiBuffer const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("dsp::MidiBuffer::addEvents",3,"size_t");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("dsp::MidiBuffer::addEvents",4,"size_t");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("dsp::MidiBuffer::addEvents",5,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_dsp__MidiBuffer,0))){
    SWIG_fail_ptr("MidiBuffer_addEvents",1,SWIGTYPE_p_dsp__MidiBuffer);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_dsp__MidiBuffer,0))){
    SWIG_fail_ptr("MidiBuffer_addEvents",2,SWIGTYPE_p_dsp__MidiBuffer);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative");
  arg4 = (size_t)lua_tonumber(L, 4);
  SWIG_contract_assert((lua_tonumber(L,5)>=0),"number must not be negative");
  arg5 = (size_t)lua_tonumber(L, 5);
  (arg1)->addEvents((dsp::MidiBuffer const &)*arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MidiBuffer_clear(lua_State* L) {
  int SWIG_arg = 0;
  dsp::MidiBuffer *arg1 = (dsp::MidiBuffer *) 0 ;
  
  SWIG_check_num_args("dsp::MidiBuffer::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("dsp::MidiBuffer::clear",1,"dsp::MidiBuffer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_dsp__MidiBuffer,0))){
    SWIG_fail_ptr("MidiBuffer_clear",1,SWIGTYPE_p_dsp__MidiBuffer);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_MidiBuffer(void *obj) {
dsp::MidiBuffer *arg1 = (dsp::MidiBuffer *) obj;
delete arg1;
}
static int _proxy__wrap_new_MidiBuffer(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_MidiBuffer);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_MidiBuffer_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_MidiBuffer_methods[]= {
    { "begin", _wrap_MidiBuffer_begin},
    { "c_end", _wrap_MidiBuffer_c_end},
    { "addEvent", _wrap_MidiBuffer_addEvent},
    { "addEvents", _wrap_MidiBuffer_addEvents},
    { "clear", _wrap_MidiBuffer_clear},
    {0,0}
};
static swig_lua_method swig_MidiBuffer_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_MidiBuffer_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_MidiBuffer_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_MidiBuffer_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_MidiBuffer_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_MidiBuffer_Sf_SwigStatic = {
    "MidiBuffer",
    swig_MidiBuffer_Sf_SwigStatic_methods,
    swig_MidiBuffer_Sf_SwigStatic_attributes,
    swig_MidiBuffer_Sf_SwigStatic_constants,
    swig_MidiBuffer_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_MidiBuffer_bases[] = {0};
static const char *swig_MidiBuffer_base_names[] = {0};
static swig_lua_class _wrap_class_MidiBuffer = { "MidiBuffer", "MidiBuffer", &SWIGTYPE_p_dsp__MidiBuffer,_proxy__wrap_new_MidiBuffer, swig_delete_MidiBuffer, swig_MidiBuffer_methods, swig_MidiBuffer_attributes, &swig_MidiBuffer_Sf_SwigStatic, swig_MidiBuffer_meta, swig_MidiBuffer_bases, swig_MidiBuffer_base_names };

static int _wrap_new_MidiMessage__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  uint8_t arg1 ;
  uint8_t *argp1 ;
  dsp::MidiMessage *result = 0 ;
  
  SWIG_check_num_args("dsp::MidiMessage::MidiMessage",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("dsp::MidiMessage::MidiMessage",1,"uint8_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_uint8_t,0))){
    SWIG_fail_ptr("new_MidiMessage",1,SWIGTYPE_p_uint8_t);
  }
  arg1 = *argp1;
  
  result = (dsp::MidiMessage *)new dsp::MidiMessage(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_dsp__MidiMessage,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_MidiMessage__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  uint8_t arg1 ;
  uint8_t arg2 ;
  uint8_t *argp1 ;
  uint8_t *argp2 ;
  dsp::MidiMessage *result = 0 ;
  
  SWIG_check_num_args("dsp::MidiMessage::MidiMessage",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("dsp::MidiMessage::MidiMessage",1,"uint8_t");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("dsp::MidiMessage::MidiMessage",2,"uint8_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_uint8_t,0))){
    SWIG_fail_ptr("new_MidiMessage",1,SWIGTYPE_p_uint8_t);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint8_t,0))){
    SWIG_fail_ptr("new_MidiMessage",2,SWIGTYPE_p_uint8_t);
  }
  arg2 = *argp2;
  
  result = (dsp::MidiMessage *)new dsp::MidiMessage(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_dsp__MidiMessage,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_MidiMessage__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  uint8_t arg1 ;
  uint8_t arg2 ;
  uint8_t arg3 ;
  uint8_t *argp1 ;
  uint8_t *argp2 ;
  uint8_t *argp3 ;
  dsp::MidiMessage *result = 0 ;
  
  SWIG_check_num_args("dsp::MidiMessage::MidiMessage",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("dsp::MidiMessage::MidiMessage",1,"uint8_t");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("dsp::MidiMessage::MidiMessage",2,"uint8_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("dsp::MidiMessage::MidiMessage",3,"uint8_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_uint8_t,0))){
    SWIG_fail_ptr("new_MidiMessage",1,SWIGTYPE_p_uint8_t);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint8_t,0))){
    SWIG_fail_ptr("new_MidiMessage",2,SWIGTYPE_p_uint8_t);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_uint8_t,0))){
    SWIG_fail_ptr("new_MidiMessage",3,SWIGTYPE_p_uint8_t);
  }
  arg3 = *argp3;
  
  result = (dsp::MidiMessage *)new dsp::MidiMessage(arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_dsp__MidiMessage,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_MidiMessage__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  uint8_t *arg1 = (uint8_t *) 0 ;
  size_t arg2 ;
  dsp::MidiMessage *result = 0 ;
  
  SWIG_check_num_args("dsp::MidiMessage::MidiMessage",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("dsp::MidiMessage::MidiMessage",1,"uint8_t const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("dsp::MidiMessage::MidiMessage",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uint8_t,0))){
    SWIG_fail_ptr("new_MidiMessage",1,SWIGTYPE_p_uint8_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (dsp::MidiMessage *)new dsp::MidiMessage((uint8_t const *)arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_dsp__MidiMessage,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_MidiMessage(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_uint8_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_MidiMessage__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_uint8_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_uint8_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_new_MidiMessage__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_uint8_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_MidiMessage__SWIG_3(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_uint8_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_uint8_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_uint8_t, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_new_MidiMessage__SWIG_2(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_MidiMessage'\n"
    "  Possible C/C++ prototypes are:\n"
    "    dsp::MidiMessage::MidiMessage(uint8_t)\n"
    "    dsp::MidiMessage::MidiMessage(uint8_t,uint8_t)\n"
    "    dsp::MidiMessage::MidiMessage(uint8_t,uint8_t,uint8_t)\n"
    "    dsp::MidiMessage::MidiMessage(uint8_t const *,size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_MidiMessage_isNote(lua_State* L) {
  int SWIG_arg = 0;
  dsp::MidiMessage *arg1 = (dsp::MidiMessage *) 0 ;
  bool result;
  
  SWIG_check_num_args("dsp::MidiMessage::isNote",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("dsp::MidiMessage::isNote",1,"dsp::MidiMessage const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_dsp__MidiMessage,0))){
    SWIG_fail_ptr("MidiMessage_isNote",1,SWIGTYPE_p_dsp__MidiMessage);
  }
  
  result = (bool)((dsp::MidiMessage const *)arg1)->isNote();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MidiMessage_isNoteOff(lua_State* L) {
  int SWIG_arg = 0;
  dsp::MidiMessage *arg1 = (dsp::MidiMessage *) 0 ;
  bool result;
  
  SWIG_check_num_args("dsp::MidiMessage::isNoteOff",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("dsp::MidiMessage::isNoteOff",1,"dsp::MidiMessage const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_dsp__MidiMessage,0))){
    SWIG_fail_ptr("MidiMessage_isNoteOff",1,SWIGTYPE_p_dsp__MidiMessage);
  }
  
  result = (bool)((dsp::MidiMessage const *)arg1)->isNoteOff();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MidiMessage_isNoteOn(lua_State* L) {
  int SWIG_arg = 0;
  dsp::MidiMessage *arg1 = (dsp::MidiMessage *) 0 ;
  bool result;
  
  SWIG_check_num_args("dsp::MidiMessage::isNoteOn",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("dsp::MidiMessage::isNoteOn",1,"dsp::MidiMessage const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_dsp__MidiMessage,0))){
    SWIG_fail_ptr("MidiMessage_isNoteOn",1,SWIGTYPE_p_dsp__MidiMessage);
  }
  
  result = (bool)((dsp::MidiMessage const *)arg1)->isNoteOn();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MidiMessage_isAftertouch(lua_State* L) {
  int SWIG_arg = 0;
  dsp::MidiMessage *arg1 = (dsp::MidiMessage *) 0 ;
  bool result;
  
  SWIG_check_num_args("dsp::MidiMessage::isAftertouch",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("dsp::MidiMessage::isAftertouch",1,"dsp::MidiMessage const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_dsp__MidiMessage,0))){
    SWIG_fail_ptr("MidiMessage_isAftertouch",1,SWIGTYPE_p_dsp__MidiMessage);
  }
  
  result = (bool)((dsp::MidiMessage const *)arg1)->isAftertouch();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MidiMessage_isController(lua_State* L) {
  int SWIG_arg = 0;
  dsp::MidiMessage *arg1 = (dsp::MidiMessage *) 0 ;
  bool result;
  
  SWIG_check_num_args("dsp::MidiMessage::isController",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("dsp::MidiMessage::isController",1,"dsp::MidiMessage const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_dsp__MidiMessage,0))){
    SWIG_fail_ptr("MidiMessage_isController",1,SWIGTYPE_p_dsp__MidiMessage);
  }
  
  result = (bool)((dsp::MidiMessage const *)arg1)->isController();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MidiMessage_isProgramChange(lua_State* L) {
  int SWIG_arg = 0;
  dsp::MidiMessage *arg1 = (dsp::MidiMessage *) 0 ;
  bool result;
  
  SWIG_check_num_args("dsp::MidiMessage::isProgramChange",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("dsp::MidiMessage::isProgramChange",1,"dsp::MidiMessage const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_dsp__MidiMessage,0))){
    SWIG_fail_ptr("MidiMessage_isProgramChange",1,SWIGTYPE_p_dsp__MidiMessage);
  }
  
  result = (bool)((dsp::MidiMessage const *)arg1)->isProgramChange();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MidiMessage_isChannelPressure(lua_State* L) {
  int SWIG_arg = 0;
  dsp::MidiMessage *arg1 = (dsp::MidiMessage *) 0 ;
  bool result;
  
  SWIG_check_num_args("dsp::MidiMessage::isChannelPressure",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("dsp::MidiMessage::isChannelPressure",1,"dsp::MidiMessage const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_dsp__MidiMessage,0))){
    SWIG_fail_ptr("MidiMessage_isChannelPressure",1,SWIGTYPE_p_dsp__MidiMessage);
  }
  
  result = (bool)((dsp::MidiMessage const *)arg1)->isChannelPressure();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MidiMessage_isPitchWheel(lua_State* L) {
  int SWIG_arg = 0;
  dsp::MidiMessage *arg1 = (dsp::MidiMessage *) 0 ;
  bool result;
  
  SWIG_check_num_args("dsp::MidiMessage::isPitchWheel",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("dsp::MidiMessage::isPitchWheel",1,"dsp::MidiMessage const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_dsp__MidiMessage,0))){
    SWIG_fail_ptr("MidiMessage_isPitchWheel",1,SWIGTYPE_p_dsp__MidiMessage);
  }
  
  result = (bool)((dsp::MidiMessage const *)arg1)->isPitchWheel();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MidiMessage_isAllNotesOff(lua_State* L) {
  int SWIG_arg = 0;
  dsp::MidiMessage *arg1 = (dsp::MidiMessage *) 0 ;
  bool result;
  
  SWIG_check_num_args("dsp::MidiMessage::isAllNotesOff",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("dsp::MidiMessage::isAllNotesOff",1,"dsp::MidiMessage const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_dsp__MidiMessage,0))){
    SWIG_fail_ptr("MidiMessage_isAllNotesOff",1,SWIGTYPE_p_dsp__MidiMessage);
  }
  
  result = (bool)((dsp::MidiMessage const *)arg1)->isAllNotesOff();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MidiMessage_isSongPositionPointer(lua_State* L) {
  int SWIG_arg = 0;
  dsp::MidiMessage *arg1 = (dsp::MidiMessage *) 0 ;
  bool result;
  
  SWIG_check_num_args("dsp::MidiMessage::isSongPositionPointer",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("dsp::MidiMessage::isSongPositionPointer",1,"dsp::MidiMessage const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_dsp__MidiMessage,0))){
    SWIG_fail_ptr("MidiMessage_isSongPositionPointer",1,SWIGTYPE_p_dsp__MidiMessage);
  }
  
  result = (bool)((dsp::MidiMessage const *)arg1)->isSongPositionPointer();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MidiMessage_isMidiClock(lua_State* L) {
  int SWIG_arg = 0;
  dsp::MidiMessage *arg1 = (dsp::MidiMessage *) 0 ;
  bool result;
  
  SWIG_check_num_args("dsp::MidiMessage::isMidiClock",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("dsp::MidiMessage::isMidiClock",1,"dsp::MidiMessage const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_dsp__MidiMessage,0))){
    SWIG_fail_ptr("MidiMessage_isMidiClock",1,SWIGTYPE_p_dsp__MidiMessage);
  }
  
  result = (bool)((dsp::MidiMessage const *)arg1)->isMidiClock();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MidiMessage_isMidiStart(lua_State* L) {
  int SWIG_arg = 0;
  dsp::MidiMessage *arg1 = (dsp::MidiMessage *) 0 ;
  bool result;
  
  SWIG_check_num_args("dsp::MidiMessage::isMidiStart",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("dsp::MidiMessage::isMidiStart",1,"dsp::MidiMessage const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_dsp__MidiMessage,0))){
    SWIG_fail_ptr("MidiMessage_isMidiStart",1,SWIGTYPE_p_dsp__MidiMessage);
  }
  
  result = (bool)((dsp::MidiMessage const *)arg1)->isMidiStart();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MidiMessage_isMidiContinue(lua_State* L) {
  int SWIG_arg = 0;
  dsp::MidiMessage *arg1 = (dsp::MidiMessage *) 0 ;
  bool result;
  
  SWIG_check_num_args("dsp::MidiMessage::isMidiContinue",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("dsp::MidiMessage::isMidiContinue",1,"dsp::MidiMessage const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_dsp__MidiMessage,0))){
    SWIG_fail_ptr("MidiMessage_isMidiContinue",1,SWIGTYPE_p_dsp__MidiMessage);
  }
  
  result = (bool)((dsp::MidiMessage const *)arg1)->isMidiContinue();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MidiMessage_isMidiStop(lua_State* L) {
  int SWIG_arg = 0;
  dsp::MidiMessage *arg1 = (dsp::MidiMessage *) 0 ;
  bool result;
  
  SWIG_check_num_args("dsp::MidiMessage::isMidiStop",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("dsp::MidiMessage::isMidiStop",1,"dsp::MidiMessage const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_dsp__MidiMessage,0))){
    SWIG_fail_ptr("MidiMessage_isMidiStop",1,SWIGTYPE_p_dsp__MidiMessage);
  }
  
  result = (bool)((dsp::MidiMessage const *)arg1)->isMidiStop();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MidiMessage_getChannel(lua_State* L) {
  int SWIG_arg = 0;
  dsp::MidiMessage *arg1 = (dsp::MidiMessage *) 0 ;
  uint8_t result;
  
  SWIG_check_num_args("dsp::MidiMessage::getChannel",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("dsp::MidiMessage::getChannel",1,"dsp::MidiMessage const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_dsp__MidiMessage,0))){
    SWIG_fail_ptr("MidiMessage_getChannel",1,SWIGTYPE_p_dsp__MidiMessage);
  }
  
  result = ((dsp::MidiMessage const *)arg1)->getChannel();
  {
    uint8_t * resultptr = new uint8_t((const uint8_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint8_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MidiMessage_getNoteNumber(lua_State* L) {
  int SWIG_arg = 0;
  dsp::MidiMessage *arg1 = (dsp::MidiMessage *) 0 ;
  uint8_t result;
  
  SWIG_check_num_args("dsp::MidiMessage::getNoteNumber",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("dsp::MidiMessage::getNoteNumber",1,"dsp::MidiMessage const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_dsp__MidiMessage,0))){
    SWIG_fail_ptr("MidiMessage_getNoteNumber",1,SWIGTYPE_p_dsp__MidiMessage);
  }
  
  result = ((dsp::MidiMessage const *)arg1)->getNoteNumber();
  {
    uint8_t * resultptr = new uint8_t((const uint8_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint8_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MidiMessage_getVelocity(lua_State* L) {
  int SWIG_arg = 0;
  dsp::MidiMessage *arg1 = (dsp::MidiMessage *) 0 ;
  uint8_t result;
  
  SWIG_check_num_args("dsp::MidiMessage::getVelocity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("dsp::MidiMessage::getVelocity",1,"dsp::MidiMessage const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_dsp__MidiMessage,0))){
    SWIG_fail_ptr("MidiMessage_getVelocity",1,SWIGTYPE_p_dsp__MidiMessage);
  }
  
  result = ((dsp::MidiMessage const *)arg1)->getVelocity();
  {
    uint8_t * resultptr = new uint8_t((const uint8_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint8_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MidiMessage_getAfterTouchValue(lua_State* L) {
  int SWIG_arg = 0;
  dsp::MidiMessage *arg1 = (dsp::MidiMessage *) 0 ;
  uint8_t result;
  
  SWIG_check_num_args("dsp::MidiMessage::getAfterTouchValue",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("dsp::MidiMessage::getAfterTouchValue",1,"dsp::MidiMessage const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_dsp__MidiMessage,0))){
    SWIG_fail_ptr("MidiMessage_getAfterTouchValue",1,SWIGTYPE_p_dsp__MidiMessage);
  }
  
  result = ((dsp::MidiMessage const *)arg1)->getAfterTouchValue();
  {
    uint8_t * resultptr = new uint8_t((const uint8_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint8_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MidiMessage_getControllerNumber(lua_State* L) {
  int SWIG_arg = 0;
  dsp::MidiMessage *arg1 = (dsp::MidiMessage *) 0 ;
  uint8_t result;
  
  SWIG_check_num_args("dsp::MidiMessage::getControllerNumber",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("dsp::MidiMessage::getControllerNumber",1,"dsp::MidiMessage const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_dsp__MidiMessage,0))){
    SWIG_fail_ptr("MidiMessage_getControllerNumber",1,SWIGTYPE_p_dsp__MidiMessage);
  }
  
  result = ((dsp::MidiMessage const *)arg1)->getControllerNumber();
  {
    uint8_t * resultptr = new uint8_t((const uint8_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint8_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MidiMessage_getControllerValue(lua_State* L) {
  int SWIG_arg = 0;
  dsp::MidiMessage *arg1 = (dsp::MidiMessage *) 0 ;
  uint8_t result;
  
  SWIG_check_num_args("dsp::MidiMessage::getControllerValue",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("dsp::MidiMessage::getControllerValue",1,"dsp::MidiMessage const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_dsp__MidiMessage,0))){
    SWIG_fail_ptr("MidiMessage_getControllerValue",1,SWIGTYPE_p_dsp__MidiMessage);
  }
  
  result = ((dsp::MidiMessage const *)arg1)->getControllerValue();
  {
    uint8_t * resultptr = new uint8_t((const uint8_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint8_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MidiMessage_getProgramChangeNumber(lua_State* L) {
  int SWIG_arg = 0;
  dsp::MidiMessage *arg1 = (dsp::MidiMessage *) 0 ;
  uint8_t result;
  
  SWIG_check_num_args("dsp::MidiMessage::getProgramChangeNumber",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("dsp::MidiMessage::getProgramChangeNumber",1,"dsp::MidiMessage const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_dsp__MidiMessage,0))){
    SWIG_fail_ptr("MidiMessage_getProgramChangeNumber",1,SWIGTYPE_p_dsp__MidiMessage);
  }
  
  result = ((dsp::MidiMessage const *)arg1)->getProgramChangeNumber();
  {
    uint8_t * resultptr = new uint8_t((const uint8_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint8_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MidiMessage_getChannelPressureValue(lua_State* L) {
  int SWIG_arg = 0;
  dsp::MidiMessage *arg1 = (dsp::MidiMessage *) 0 ;
  uint8_t result;
  
  SWIG_check_num_args("dsp::MidiMessage::getChannelPressureValue",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("dsp::MidiMessage::getChannelPressureValue",1,"dsp::MidiMessage const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_dsp__MidiMessage,0))){
    SWIG_fail_ptr("MidiMessage_getChannelPressureValue",1,SWIGTYPE_p_dsp__MidiMessage);
  }
  
  result = ((dsp::MidiMessage const *)arg1)->getChannelPressureValue();
  {
    uint8_t * resultptr = new uint8_t((const uint8_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint8_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MidiMessage_getPitchWheelValue(lua_State* L) {
  int SWIG_arg = 0;
  dsp::MidiMessage *arg1 = (dsp::MidiMessage *) 0 ;
  int result;
  
  SWIG_check_num_args("dsp::MidiMessage::getPitchWheelValue",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("dsp::MidiMessage::getPitchWheelValue",1,"dsp::MidiMessage const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_dsp__MidiMessage,0))){
    SWIG_fail_ptr("MidiMessage_getPitchWheelValue",1,SWIGTYPE_p_dsp__MidiMessage);
  }
  
  result = (int)((dsp::MidiMessage const *)arg1)->getPitchWheelValue();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MidiMessage_getSongPositionPointerMidiBeat(lua_State* L) {
  int SWIG_arg = 0;
  dsp::MidiMessage *arg1 = (dsp::MidiMessage *) 0 ;
  int result;
  
  SWIG_check_num_args("dsp::MidiMessage::getSongPositionPointerMidiBeat",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("dsp::MidiMessage::getSongPositionPointerMidiBeat",1,"dsp::MidiMessage const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_dsp__MidiMessage,0))){
    SWIG_fail_ptr("MidiMessage_getSongPositionPointerMidiBeat",1,SWIGTYPE_p_dsp__MidiMessage);
  }
  
  result = (int)((dsp::MidiMessage const *)arg1)->getSongPositionPointerMidiBeat();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MidiMessage_noteOff(lua_State* L) {
  int SWIG_arg = 0;
  uint8_t arg1 ;
  uint8_t arg2 ;
  uint8_t arg3 ;
  uint8_t *argp1 ;
  uint8_t *argp2 ;
  uint8_t *argp3 ;
  SwigValueWrapper< dsp::MidiMessage > result;
  
  SWIG_check_num_args("dsp::MidiMessage::noteOff",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("dsp::MidiMessage::noteOff",1,"uint8_t");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("dsp::MidiMessage::noteOff",2,"uint8_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("dsp::MidiMessage::noteOff",3,"uint8_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_uint8_t,0))){
    SWIG_fail_ptr("MidiMessage_noteOff",1,SWIGTYPE_p_uint8_t);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint8_t,0))){
    SWIG_fail_ptr("MidiMessage_noteOff",2,SWIGTYPE_p_uint8_t);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_uint8_t,0))){
    SWIG_fail_ptr("MidiMessage_noteOff",3,SWIGTYPE_p_uint8_t);
  }
  arg3 = *argp3;
  
  result = dsp::MidiMessage::noteOff(arg1,arg2,arg3);
  {
    dsp::MidiMessage * resultptr = new dsp::MidiMessage((const dsp::MidiMessage &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_dsp__MidiMessage,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MidiMessage_noteOn(lua_State* L) {
  int SWIG_arg = 0;
  uint8_t arg1 ;
  uint8_t arg2 ;
  uint8_t arg3 ;
  uint8_t *argp1 ;
  uint8_t *argp2 ;
  uint8_t *argp3 ;
  SwigValueWrapper< dsp::MidiMessage > result;
  
  SWIG_check_num_args("dsp::MidiMessage::noteOn",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("dsp::MidiMessage::noteOn",1,"uint8_t");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("dsp::MidiMessage::noteOn",2,"uint8_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("dsp::MidiMessage::noteOn",3,"uint8_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_uint8_t,0))){
    SWIG_fail_ptr("MidiMessage_noteOn",1,SWIGTYPE_p_uint8_t);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint8_t,0))){
    SWIG_fail_ptr("MidiMessage_noteOn",2,SWIGTYPE_p_uint8_t);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_uint8_t,0))){
    SWIG_fail_ptr("MidiMessage_noteOn",3,SWIGTYPE_p_uint8_t);
  }
  arg3 = *argp3;
  
  result = dsp::MidiMessage::noteOn(arg1,arg2,arg3);
  {
    dsp::MidiMessage * resultptr = new dsp::MidiMessage((const dsp::MidiMessage &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_dsp__MidiMessage,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MidiMessage_aftertouchChange(lua_State* L) {
  int SWIG_arg = 0;
  uint8_t arg1 ;
  uint8_t arg2 ;
  uint8_t arg3 ;
  uint8_t *argp1 ;
  uint8_t *argp2 ;
  uint8_t *argp3 ;
  SwigValueWrapper< dsp::MidiMessage > result;
  
  SWIG_check_num_args("dsp::MidiMessage::aftertouchChange",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("dsp::MidiMessage::aftertouchChange",1,"uint8_t");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("dsp::MidiMessage::aftertouchChange",2,"uint8_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("dsp::MidiMessage::aftertouchChange",3,"uint8_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_uint8_t,0))){
    SWIG_fail_ptr("MidiMessage_aftertouchChange",1,SWIGTYPE_p_uint8_t);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint8_t,0))){
    SWIG_fail_ptr("MidiMessage_aftertouchChange",2,SWIGTYPE_p_uint8_t);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_uint8_t,0))){
    SWIG_fail_ptr("MidiMessage_aftertouchChange",3,SWIGTYPE_p_uint8_t);
  }
  arg3 = *argp3;
  
  result = dsp::MidiMessage::aftertouchChange(arg1,arg2,arg3);
  {
    dsp::MidiMessage * resultptr = new dsp::MidiMessage((const dsp::MidiMessage &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_dsp__MidiMessage,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MidiMessage_controllerEvent(lua_State* L) {
  int SWIG_arg = 0;
  uint8_t arg1 ;
  uint8_t arg2 ;
  uint8_t arg3 ;
  uint8_t *argp1 ;
  uint8_t *argp2 ;
  uint8_t *argp3 ;
  SwigValueWrapper< dsp::MidiMessage > result;
  
  SWIG_check_num_args("dsp::MidiMessage::controllerEvent",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("dsp::MidiMessage::controllerEvent",1,"uint8_t");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("dsp::MidiMessage::controllerEvent",2,"uint8_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("dsp::MidiMessage::controllerEvent",3,"uint8_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_uint8_t,0))){
    SWIG_fail_ptr("MidiMessage_controllerEvent",1,SWIGTYPE_p_uint8_t);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint8_t,0))){
    SWIG_fail_ptr("MidiMessage_controllerEvent",2,SWIGTYPE_p_uint8_t);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_uint8_t,0))){
    SWIG_fail_ptr("MidiMessage_controllerEvent",3,SWIGTYPE_p_uint8_t);
  }
  arg3 = *argp3;
  
  result = dsp::MidiMessage::controllerEvent(arg1,arg2,arg3);
  {
    dsp::MidiMessage * resultptr = new dsp::MidiMessage((const dsp::MidiMessage &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_dsp__MidiMessage,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MidiMessage_programChange(lua_State* L) {
  int SWIG_arg = 0;
  uint8_t arg1 ;
  uint8_t arg2 ;
  uint8_t *argp1 ;
  uint8_t *argp2 ;
  SwigValueWrapper< dsp::MidiMessage > result;
  
  SWIG_check_num_args("dsp::MidiMessage::programChange",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("dsp::MidiMessage::programChange",1,"uint8_t");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("dsp::MidiMessage::programChange",2,"uint8_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_uint8_t,0))){
    SWIG_fail_ptr("MidiMessage_programChange",1,SWIGTYPE_p_uint8_t);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint8_t,0))){
    SWIG_fail_ptr("MidiMessage_programChange",2,SWIGTYPE_p_uint8_t);
  }
  arg2 = *argp2;
  
  result = dsp::MidiMessage::programChange(arg1,arg2);
  {
    dsp::MidiMessage * resultptr = new dsp::MidiMessage((const dsp::MidiMessage &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_dsp__MidiMessage,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MidiMessage_channelPressureChange(lua_State* L) {
  int SWIG_arg = 0;
  uint8_t arg1 ;
  uint8_t arg2 ;
  uint8_t *argp1 ;
  uint8_t *argp2 ;
  SwigValueWrapper< dsp::MidiMessage > result;
  
  SWIG_check_num_args("dsp::MidiMessage::channelPressureChange",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("dsp::MidiMessage::channelPressureChange",1,"uint8_t");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("dsp::MidiMessage::channelPressureChange",2,"uint8_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_uint8_t,0))){
    SWIG_fail_ptr("MidiMessage_channelPressureChange",1,SWIGTYPE_p_uint8_t);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint8_t,0))){
    SWIG_fail_ptr("MidiMessage_channelPressureChange",2,SWIGTYPE_p_uint8_t);
  }
  arg2 = *argp2;
  
  result = dsp::MidiMessage::channelPressureChange(arg1,arg2);
  {
    dsp::MidiMessage * resultptr = new dsp::MidiMessage((const dsp::MidiMessage &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_dsp__MidiMessage,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MidiMessage_pitchWheel(lua_State* L) {
  int SWIG_arg = 0;
  uint8_t arg1 ;
  int arg2 ;
  uint8_t *argp1 ;
  SwigValueWrapper< dsp::MidiMessage > result;
  
  SWIG_check_num_args("dsp::MidiMessage::pitchWheel",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("dsp::MidiMessage::pitchWheel",1,"uint8_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("dsp::MidiMessage::pitchWheel",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_uint8_t,0))){
    SWIG_fail_ptr("MidiMessage_pitchWheel",1,SWIGTYPE_p_uint8_t);
  }
  arg1 = *argp1;
  
  arg2 = (int)lua_tonumber(L, 2);
  result = dsp::MidiMessage::pitchWheel(arg1,arg2);
  {
    dsp::MidiMessage * resultptr = new dsp::MidiMessage((const dsp::MidiMessage &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_dsp__MidiMessage,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MidiMessage_allNotesOff(lua_State* L) {
  int SWIG_arg = 0;
  uint8_t arg1 ;
  uint8_t *argp1 ;
  SwigValueWrapper< dsp::MidiMessage > result;
  
  SWIG_check_num_args("dsp::MidiMessage::allNotesOff",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("dsp::MidiMessage::allNotesOff",1,"uint8_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_uint8_t,0))){
    SWIG_fail_ptr("MidiMessage_allNotesOff",1,SWIGTYPE_p_uint8_t);
  }
  arg1 = *argp1;
  
  result = dsp::MidiMessage::allNotesOff(arg1);
  {
    dsp::MidiMessage * resultptr = new dsp::MidiMessage((const dsp::MidiMessage &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_dsp__MidiMessage,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MidiMessage_songPositionPointer(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  SwigValueWrapper< dsp::MidiMessage > result;
  
  SWIG_check_num_args("dsp::MidiMessage::songPositionPointer",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("dsp::MidiMessage::songPositionPointer",1,"int");
  arg1 = (int)lua_tonumber(L, 1);
  result = dsp::MidiMessage::songPositionPointer(arg1);
  {
    dsp::MidiMessage * resultptr = new dsp::MidiMessage((const dsp::MidiMessage &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_dsp__MidiMessage,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MidiMessage_midiClock(lua_State* L) {
  int SWIG_arg = 0;
  SwigValueWrapper< dsp::MidiMessage > result;
  
  SWIG_check_num_args("dsp::MidiMessage::midiClock",0,0)
  result = dsp::MidiMessage::midiClock();
  {
    dsp::MidiMessage * resultptr = new dsp::MidiMessage((const dsp::MidiMessage &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_dsp__MidiMessage,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MidiMessage_midiStart(lua_State* L) {
  int SWIG_arg = 0;
  SwigValueWrapper< dsp::MidiMessage > result;
  
  SWIG_check_num_args("dsp::MidiMessage::midiStart",0,0)
  result = dsp::MidiMessage::midiStart();
  {
    dsp::MidiMessage * resultptr = new dsp::MidiMessage((const dsp::MidiMessage &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_dsp__MidiMessage,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MidiMessage_midiContinue(lua_State* L) {
  int SWIG_arg = 0;
  SwigValueWrapper< dsp::MidiMessage > result;
  
  SWIG_check_num_args("dsp::MidiMessage::midiContinue",0,0)
  result = dsp::MidiMessage::midiContinue();
  {
    dsp::MidiMessage * resultptr = new dsp::MidiMessage((const dsp::MidiMessage &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_dsp__MidiMessage,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MidiMessage_midiStop(lua_State* L) {
  int SWIG_arg = 0;
  SwigValueWrapper< dsp::MidiMessage > result;
  
  SWIG_check_num_args("dsp::MidiMessage::midiStop",0,0)
  result = dsp::MidiMessage::midiStop();
  {
    dsp::MidiMessage * resultptr = new dsp::MidiMessage((const dsp::MidiMessage &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_dsp__MidiMessage,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MidiMessage_getBytes(lua_State* L) {
  int SWIG_arg = 0;
  dsp::MidiMessage *arg1 = (dsp::MidiMessage *) 0 ;
  std::vector< uint8_t > *result = 0 ;
  
  SWIG_check_num_args("dsp::MidiMessage::getBytes",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("dsp::MidiMessage::getBytes",1,"dsp::MidiMessage *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_dsp__MidiMessage,0))){
    SWIG_fail_ptr("MidiMessage_getBytes",1,SWIGTYPE_p_dsp__MidiMessage);
  }
  
  result = (std::vector< uint8_t > *) &(arg1)->getBytes();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_uint8_t_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MidiMessage_getRawData(lua_State* L) {
  int SWIG_arg = 0;
  dsp::MidiMessage *arg1 = (dsp::MidiMessage *) 0 ;
  uint8_t *result = 0 ;
  
  SWIG_check_num_args("dsp::MidiMessage::getRawData",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("dsp::MidiMessage::getRawData",1,"dsp::MidiMessage const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_dsp__MidiMessage,0))){
    SWIG_fail_ptr("MidiMessage_getRawData",1,SWIGTYPE_p_dsp__MidiMessage);
  }
  
  result = (uint8_t *)((dsp::MidiMessage const *)arg1)->getRawData();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_uint8_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MidiMessage_getRawDataSize(lua_State* L) {
  int SWIG_arg = 0;
  dsp::MidiMessage *arg1 = (dsp::MidiMessage *) 0 ;
  size_t result;
  
  SWIG_check_num_args("dsp::MidiMessage::getRawDataSize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("dsp::MidiMessage::getRawDataSize",1,"dsp::MidiMessage const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_dsp__MidiMessage,0))){
    SWIG_fail_ptr("MidiMessage_getRawDataSize",1,SWIGTYPE_p_dsp__MidiMessage);
  }
  
  result = ((dsp::MidiMessage const *)arg1)->getRawDataSize();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_MidiMessage(void *obj) {
dsp::MidiMessage *arg1 = (dsp::MidiMessage *) obj;
delete arg1;
}
static int _proxy__wrap_new_MidiMessage(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_MidiMessage);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_MidiMessage_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_MidiMessage_methods[]= {
    { "isNote", _wrap_MidiMessage_isNote},
    { "isNoteOff", _wrap_MidiMessage_isNoteOff},
    { "isNoteOn", _wrap_MidiMessage_isNoteOn},
    { "isAftertouch", _wrap_MidiMessage_isAftertouch},
    { "isController", _wrap_MidiMessage_isController},
    { "isProgramChange", _wrap_MidiMessage_isProgramChange},
    { "isChannelPressure", _wrap_MidiMessage_isChannelPressure},
    { "isPitchWheel", _wrap_MidiMessage_isPitchWheel},
    { "isAllNotesOff", _wrap_MidiMessage_isAllNotesOff},
    { "isSongPositionPointer", _wrap_MidiMessage_isSongPositionPointer},
    { "isMidiClock", _wrap_MidiMessage_isMidiClock},
    { "isMidiStart", _wrap_MidiMessage_isMidiStart},
    { "isMidiContinue", _wrap_MidiMessage_isMidiContinue},
    { "isMidiStop", _wrap_MidiMessage_isMidiStop},
    { "getChannel", _wrap_MidiMessage_getChannel},
    { "getNoteNumber", _wrap_MidiMessage_getNoteNumber},
    { "getVelocity", _wrap_MidiMessage_getVelocity},
    { "getAfterTouchValue", _wrap_MidiMessage_getAfterTouchValue},
    { "getControllerNumber", _wrap_MidiMessage_getControllerNumber},
    { "getControllerValue", _wrap_MidiMessage_getControllerValue},
    { "getProgramChangeNumber", _wrap_MidiMessage_getProgramChangeNumber},
    { "getChannelPressureValue", _wrap_MidiMessage_getChannelPressureValue},
    { "getPitchWheelValue", _wrap_MidiMessage_getPitchWheelValue},
    { "getSongPositionPointerMidiBeat", _wrap_MidiMessage_getSongPositionPointerMidiBeat},
    { "getBytes", _wrap_MidiMessage_getBytes},
    { "getRawData", _wrap_MidiMessage_getRawData},
    { "getRawDataSize", _wrap_MidiMessage_getRawDataSize},
    {0,0}
};
static swig_lua_method swig_MidiMessage_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_MidiMessage_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_MidiMessage_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_MidiMessage_Sf_SwigStatic_methods[]= {
    { "noteOff", _wrap_MidiMessage_noteOff},
    { "noteOn", _wrap_MidiMessage_noteOn},
    { "aftertouchChange", _wrap_MidiMessage_aftertouchChange},
    { "controllerEvent", _wrap_MidiMessage_controllerEvent},
    { "programChange", _wrap_MidiMessage_programChange},
    { "channelPressureChange", _wrap_MidiMessage_channelPressureChange},
    { "pitchWheel", _wrap_MidiMessage_pitchWheel},
    { "allNotesOff", _wrap_MidiMessage_allNotesOff},
    { "songPositionPointer", _wrap_MidiMessage_songPositionPointer},
    { "midiClock", _wrap_MidiMessage_midiClock},
    { "midiStart", _wrap_MidiMessage_midiStart},
    { "midiContinue", _wrap_MidiMessage_midiContinue},
    { "midiStop", _wrap_MidiMessage_midiStop},
    {0,0}
};
static swig_lua_class* swig_MidiMessage_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_MidiMessage_Sf_SwigStatic = {
    "MidiMessage",
    swig_MidiMessage_Sf_SwigStatic_methods,
    swig_MidiMessage_Sf_SwigStatic_attributes,
    swig_MidiMessage_Sf_SwigStatic_constants,
    swig_MidiMessage_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_MidiMessage_bases[] = {0};
static const char *swig_MidiMessage_base_names[] = {0};
static swig_lua_class _wrap_class_MidiMessage = { "MidiMessage", "MidiMessage", &SWIGTYPE_p_dsp__MidiMessage,_proxy__wrap_new_MidiMessage, swig_delete_MidiMessage, swig_MidiMessage_methods, swig_MidiMessage_attributes, &swig_MidiMessage_Sf_SwigStatic, swig_MidiMessage_meta, swig_MidiMessage_bases, swig_MidiMessage_base_names };

static int _wrap_TimedMidiMessage_samplePosition_set(lua_State* L) {
  int SWIG_arg = 0;
  dsp::TimedMidiMessage *arg1 = (dsp::TimedMidiMessage *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("dsp::TimedMidiMessage::samplePosition",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("dsp::TimedMidiMessage::samplePosition",1,"dsp::TimedMidiMessage *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("dsp::TimedMidiMessage::samplePosition",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_dsp__TimedMidiMessage,0))){
    SWIG_fail_ptr("TimedMidiMessage_samplePosition_set",1,SWIGTYPE_p_dsp__TimedMidiMessage);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  if (arg1) (arg1)->samplePosition = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TimedMidiMessage_samplePosition_get(lua_State* L) {
  int SWIG_arg = 0;
  dsp::TimedMidiMessage *arg1 = (dsp::TimedMidiMessage *) 0 ;
  size_t result;
  
  SWIG_check_num_args("dsp::TimedMidiMessage::samplePosition",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("dsp::TimedMidiMessage::samplePosition",1,"dsp::TimedMidiMessage *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_dsp__TimedMidiMessage,0))){
    SWIG_fail_ptr("TimedMidiMessage_samplePosition_get",1,SWIGTYPE_p_dsp__TimedMidiMessage);
  }
  
  result =  ((arg1)->samplePosition);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_TimedMidiMessage__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SwigValueWrapper< dsp::MidiMessage > arg1 ;
  size_t arg2 ;
  dsp::MidiMessage *argp1 ;
  dsp::TimedMidiMessage *result = 0 ;
  
  SWIG_check_num_args("dsp::TimedMidiMessage::TimedMidiMessage",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("dsp::TimedMidiMessage::TimedMidiMessage",1,"dsp::MidiMessage");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("dsp::TimedMidiMessage::TimedMidiMessage",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_dsp__MidiMessage,0))){
    SWIG_fail_ptr("new_TimedMidiMessage",1,SWIGTYPE_p_dsp__MidiMessage);
  }
  arg1 = *argp1;
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (dsp::TimedMidiMessage *)new dsp::TimedMidiMessage(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_dsp__TimedMidiMessage,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_TimedMidiMessage__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SwigValueWrapper< dsp::MidiMessage > arg1 ;
  dsp::MidiMessage *argp1 ;
  dsp::TimedMidiMessage *result = 0 ;
  
  SWIG_check_num_args("dsp::TimedMidiMessage::TimedMidiMessage",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("dsp::TimedMidiMessage::TimedMidiMessage",1,"dsp::MidiMessage");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_dsp__MidiMessage,0))){
    SWIG_fail_ptr("new_TimedMidiMessage",1,SWIGTYPE_p_dsp__MidiMessage);
  }
  arg1 = *argp1;
  
  result = (dsp::TimedMidiMessage *)new dsp::TimedMidiMessage(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_dsp__TimedMidiMessage,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_TimedMidiMessage(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_dsp__MidiMessage, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_TimedMidiMessage__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_dsp__MidiMessage, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_TimedMidiMessage__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_TimedMidiMessage'\n"
    "  Possible C/C++ prototypes are:\n"
    "    dsp::TimedMidiMessage::TimedMidiMessage(dsp::MidiMessage,size_t)\n"
    "    dsp::TimedMidiMessage::TimedMidiMessage(dsp::MidiMessage)\n");
  lua_error(L);return 0;
}


static int _wrap_TimedMidiMessage_getMessage(lua_State* L) {
  int SWIG_arg = 0;
  dsp::TimedMidiMessage *arg1 = (dsp::TimedMidiMessage *) 0 ;
  SwigValueWrapper< dsp::MidiMessage > result;
  
  SWIG_check_num_args("dsp::TimedMidiMessage::getMessage",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("dsp::TimedMidiMessage::getMessage",1,"dsp::TimedMidiMessage const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_dsp__TimedMidiMessage,0))){
    SWIG_fail_ptr("TimedMidiMessage_getMessage",1,SWIGTYPE_p_dsp__TimedMidiMessage);
  }
  
  result = ((dsp::TimedMidiMessage const *)arg1)->getMessage();
  {
    dsp::MidiMessage * resultptr = new dsp::MidiMessage((const dsp::MidiMessage &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_dsp__MidiMessage,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_TimedMidiMessage(void *obj) {
dsp::TimedMidiMessage *arg1 = (dsp::TimedMidiMessage *) obj;
delete arg1;
}
static int _proxy__wrap_new_TimedMidiMessage(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_TimedMidiMessage);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_TimedMidiMessage_attributes[] = {
    { "samplePosition", _wrap_TimedMidiMessage_samplePosition_get, _wrap_TimedMidiMessage_samplePosition_set },
    {0,0,0}
};
static swig_lua_method swig_TimedMidiMessage_methods[]= {
    { "getMessage", _wrap_TimedMidiMessage_getMessage},
    {0,0}
};
static swig_lua_method swig_TimedMidiMessage_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_TimedMidiMessage_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_TimedMidiMessage_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_TimedMidiMessage_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_TimedMidiMessage_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_TimedMidiMessage_Sf_SwigStatic = {
    "TimedMidiMessage",
    swig_TimedMidiMessage_Sf_SwigStatic_methods,
    swig_TimedMidiMessage_Sf_SwigStatic_attributes,
    swig_TimedMidiMessage_Sf_SwigStatic_constants,
    swig_TimedMidiMessage_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_TimedMidiMessage_bases[] = {0};
static const char *swig_TimedMidiMessage_base_names[] = {0};
static swig_lua_class _wrap_class_TimedMidiMessage = { "TimedMidiMessage", "TimedMidiMessage", &SWIGTYPE_p_dsp__TimedMidiMessage,_proxy__wrap_new_TimedMidiMessage, swig_delete_TimedMidiMessage, swig_TimedMidiMessage_methods, swig_TimedMidiMessage_attributes, &swig_TimedMidiMessage_Sf_SwigStatic, swig_TimedMidiMessage_meta, swig_TimedMidiMessage_bases, swig_TimedMidiMessage_base_names };

static int _wrap_new_Producer__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  dsp::Type arg1 ;
  dsp::Space arg2 ;
  dsp::Producer *result = 0 ;
  
  SWIG_check_num_args("dsp::Producer::Producer",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("dsp::Producer::Producer",1,"dsp::Type");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("dsp::Producer::Producer",2,"dsp::Space");
  arg1 = (dsp::Type)(int)lua_tonumber(L, 1);
  arg2 = (dsp::Space)(int)lua_tonumber(L, 2);
  result = (dsp::Producer *)new dsp::Producer(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_dsp__Producer,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Producer__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  dsp::Type arg1 ;
  dsp::Producer *result = 0 ;
  
  SWIG_check_num_args("dsp::Producer::Producer",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("dsp::Producer::Producer",1,"dsp::Type");
  arg1 = (dsp::Type)(int)lua_tonumber(L, 1);
  result = (dsp::Producer *)new dsp::Producer(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_dsp__Producer,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Producer__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  dsp::Producer *result = 0 ;
  
  SWIG_check_num_args("dsp::Producer::Producer",0,0)
  result = (dsp::Producer *)new dsp::Producer();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_dsp__Producer,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Producer(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_Producer__SWIG_2(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_Producer__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_Producer__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_Producer'\n"
    "  Possible C/C++ prototypes are:\n"
    "    dsp::Producer::Producer(dsp::Type,dsp::Space)\n"
    "    dsp::Producer::Producer(dsp::Type)\n"
    "    dsp::Producer::Producer()\n");
  lua_error(L);return 0;
}


static int _wrap_Producer_getOutput(lua_State* L) {
  int SWIG_arg = 0;
  dsp::Producer *arg1 = (dsp::Producer *) 0 ;
  std::shared_ptr< Output > result;
  
  SWIG_check_num_args("dsp::Producer::getOutput",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("dsp::Producer::getOutput",1,"dsp::Producer const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_dsp__Producer,0))){
    SWIG_fail_ptr("Producer_getOutput",1,SWIGTYPE_p_dsp__Producer);
  }
  
  result = ((dsp::Producer const *)arg1)->getOutput();
  {
    std::shared_ptr< Output > * resultptr = new std::shared_ptr< Output >((const std::shared_ptr< Output > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__shared_ptrT_Output_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Producer(void *obj) {
dsp::Producer *arg1 = (dsp::Producer *) obj;
delete arg1;
}
static int _proxy__wrap_new_Producer(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Producer);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Producer_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Producer_methods[]= {
    { "getOutput", _wrap_Producer_getOutput},
    {0,0}
};
static swig_lua_method swig_Producer_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Producer_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Producer_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Producer_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Producer_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Producer_Sf_SwigStatic = {
    "Producer",
    swig_Producer_Sf_SwigStatic_methods,
    swig_Producer_Sf_SwigStatic_attributes,
    swig_Producer_Sf_SwigStatic_constants,
    swig_Producer_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Producer_bases[] = {0};
static const char *swig_Producer_base_names[] = {0};
static swig_lua_class _wrap_class_Producer = { "Producer", "Producer", &SWIGTYPE_p_dsp__Producer,_proxy__wrap_new_Producer, swig_delete_Producer, swig_Producer_methods, swig_Producer_attributes, &swig_Producer_Sf_SwigStatic, swig_Producer_meta, swig_Producer_bases, swig_Producer_base_names };

static int _wrap_new_Transformer__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  dsp::Type arg1 ;
  dsp::Type arg2 ;
  dsp::Space arg3 ;
  dsp::Transformer *result = 0 ;
  
  SWIG_check_num_args("dsp::Transformer::Transformer",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("dsp::Transformer::Transformer",1,"dsp::Type");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("dsp::Transformer::Transformer",2,"dsp::Type");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("dsp::Transformer::Transformer",3,"dsp::Space");
  arg1 = (dsp::Type)(int)lua_tonumber(L, 1);
  arg2 = (dsp::Type)(int)lua_tonumber(L, 2);
  arg3 = (dsp::Space)(int)lua_tonumber(L, 3);
  result = (dsp::Transformer *)new dsp::Transformer(arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_dsp__Transformer,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Transformer__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  dsp::Type arg1 ;
  dsp::Type arg2 ;
  dsp::Transformer *result = 0 ;
  
  SWIG_check_num_args("dsp::Transformer::Transformer",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("dsp::Transformer::Transformer",1,"dsp::Type");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("dsp::Transformer::Transformer",2,"dsp::Type");
  arg1 = (dsp::Type)(int)lua_tonumber(L, 1);
  arg2 = (dsp::Type)(int)lua_tonumber(L, 2);
  result = (dsp::Transformer *)new dsp::Transformer(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_dsp__Transformer,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Transformer__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  dsp::Type arg1 ;
  dsp::Type arg2 ;
  dsp::Space arg3 ;
  dsp::Space arg4 ;
  dsp::Transformer *result = 0 ;
  
  SWIG_check_num_args("dsp::Transformer::Transformer",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("dsp::Transformer::Transformer",1,"dsp::Type");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("dsp::Transformer::Transformer",2,"dsp::Type");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("dsp::Transformer::Transformer",3,"dsp::Space");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("dsp::Transformer::Transformer",4,"dsp::Space");
  arg1 = (dsp::Type)(int)lua_tonumber(L, 1);
  arg2 = (dsp::Type)(int)lua_tonumber(L, 2);
  arg3 = (dsp::Space)(int)lua_tonumber(L, 3);
  arg4 = (dsp::Space)(int)lua_tonumber(L, 4);
  result = (dsp::Transformer *)new dsp::Transformer(arg1,arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_dsp__Transformer,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Transformer(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_Transformer__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_new_Transformer__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_Transformer__SWIG_2(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_Transformer'\n"
    "  Possible C/C++ prototypes are:\n"
    "    dsp::Transformer::Transformer(dsp::Type,dsp::Type,dsp::Space)\n"
    "    dsp::Transformer::Transformer(dsp::Type,dsp::Type)\n"
    "    dsp::Transformer::Transformer(dsp::Type,dsp::Type,dsp::Space,dsp::Space)\n");
  lua_error(L);return 0;
}


static void swig_delete_Transformer(void *obj) {
dsp::Transformer *arg1 = (dsp::Transformer *) obj;
delete arg1;
}
static int _proxy__wrap_new_Transformer(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Transformer);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Transformer_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Transformer_methods[]= {
    {0,0}
};
static swig_lua_method swig_Transformer_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Transformer_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Transformer_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Transformer_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Transformer_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Transformer_Sf_SwigStatic = {
    "Transformer",
    swig_Transformer_Sf_SwigStatic_methods,
    swig_Transformer_Sf_SwigStatic_attributes,
    swig_Transformer_Sf_SwigStatic_constants,
    swig_Transformer_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Transformer_bases[] = {0,0};
static const char *swig_Transformer_base_names[] = {"dsp::Producer *",0};
static swig_lua_class _wrap_class_Transformer = { "Transformer", "Transformer", &SWIGTYPE_p_dsp__Transformer,_proxy__wrap_new_Transformer, swig_delete_Transformer, swig_Transformer_methods, swig_Transformer_attributes, &swig_Transformer_Sf_SwigStatic, swig_Transformer_meta, swig_Transformer_bases, swig_Transformer_base_names };

static int _wrap_new_Consumer__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  dsp::Type arg1 ;
  dsp::Space arg2 ;
  dsp::Consumer *result = 0 ;
  
  SWIG_check_num_args("dsp::Consumer::Consumer",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("dsp::Consumer::Consumer",1,"dsp::Type");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("dsp::Consumer::Consumer",2,"dsp::Space");
  arg1 = (dsp::Type)(int)lua_tonumber(L, 1);
  arg2 = (dsp::Space)(int)lua_tonumber(L, 2);
  result = (dsp::Consumer *)new dsp::Consumer(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_dsp__Consumer,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Consumer__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  dsp::Type arg1 ;
  dsp::Consumer *result = 0 ;
  
  SWIG_check_num_args("dsp::Consumer::Consumer",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("dsp::Consumer::Consumer",1,"dsp::Type");
  arg1 = (dsp::Type)(int)lua_tonumber(L, 1);
  result = (dsp::Consumer *)new dsp::Consumer(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_dsp__Consumer,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Consumer__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  dsp::Consumer *result = 0 ;
  
  SWIG_check_num_args("dsp::Consumer::Consumer",0,0)
  result = (dsp::Consumer *)new dsp::Consumer();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_dsp__Consumer,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Consumer(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_Consumer__SWIG_2(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_Consumer__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_Consumer__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_Consumer'\n"
    "  Possible C/C++ prototypes are:\n"
    "    dsp::Consumer::Consumer(dsp::Type,dsp::Space)\n"
    "    dsp::Consumer::Consumer(dsp::Type)\n"
    "    dsp::Consumer::Consumer()\n");
  lua_error(L);return 0;
}


static int _wrap_Consumer_getInput(lua_State* L) {
  int SWIG_arg = 0;
  dsp::Consumer *arg1 = (dsp::Consumer *) 0 ;
  std::shared_ptr< Input > result;
  
  SWIG_check_num_args("dsp::Consumer::getInput",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("dsp::Consumer::getInput",1,"dsp::Consumer const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_dsp__Consumer,0))){
    SWIG_fail_ptr("Consumer_getInput",1,SWIGTYPE_p_dsp__Consumer);
  }
  
  result = ((dsp::Consumer const *)arg1)->getInput();
  {
    std::shared_ptr< Input > * resultptr = new std::shared_ptr< Input >((const std::shared_ptr< Input > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__shared_ptrT_Input_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Consumer(void *obj) {
dsp::Consumer *arg1 = (dsp::Consumer *) obj;
delete arg1;
}
static int _proxy__wrap_new_Consumer(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Consumer);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Consumer_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Consumer_methods[]= {
    { "getInput", _wrap_Consumer_getInput},
    {0,0}
};
static swig_lua_method swig_Consumer_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Consumer_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Consumer_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Consumer_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Consumer_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Consumer_Sf_SwigStatic = {
    "Consumer",
    swig_Consumer_Sf_SwigStatic_methods,
    swig_Consumer_Sf_SwigStatic_attributes,
    swig_Consumer_Sf_SwigStatic_constants,
    swig_Consumer_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Consumer_bases[] = {0};
static const char *swig_Consumer_base_names[] = {0};
static swig_lua_class _wrap_class_Consumer = { "Consumer", "Consumer", &SWIGTYPE_p_dsp__Consumer,_proxy__wrap_new_Consumer, swig_delete_Consumer, swig_Consumer_methods, swig_Consumer_attributes, &swig_Consumer_Sf_SwigStatic, swig_Consumer_meta, swig_Consumer_bases, swig_Consumer_base_names };

static int _wrap_new_Recorder__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  dsp::Type arg1 ;
  dsp::Space arg2 ;
  dsp::Sample arg3 ;
  dsp::Recorder *result = 0 ;
  
  SWIG_check_num_args("dsp::Recorder::Recorder",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("dsp::Recorder::Recorder",1,"dsp::Type");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("dsp::Recorder::Recorder",2,"dsp::Space");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("dsp::Recorder::Recorder",3,"dsp::Sample");
  arg1 = (dsp::Type)(int)lua_tonumber(L, 1);
  arg2 = (dsp::Space)(int)lua_tonumber(L, 2);
  arg3 = (dsp::Sample)lua_tonumber(L, 3);
  result = (dsp::Recorder *)new dsp::Recorder(arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_dsp__Recorder,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Recorder__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  dsp::Type arg1 ;
  dsp::Space arg2 ;
  dsp::Recorder *result = 0 ;
  
  SWIG_check_num_args("dsp::Recorder::Recorder",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("dsp::Recorder::Recorder",1,"dsp::Type");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("dsp::Recorder::Recorder",2,"dsp::Space");
  arg1 = (dsp::Type)(int)lua_tonumber(L, 1);
  arg2 = (dsp::Space)(int)lua_tonumber(L, 2);
  result = (dsp::Recorder *)new dsp::Recorder(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_dsp__Recorder,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Recorder__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  dsp::Type arg1 ;
  dsp::Recorder *result = 0 ;
  
  SWIG_check_num_args("dsp::Recorder::Recorder",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("dsp::Recorder::Recorder",1,"dsp::Type");
  arg1 = (dsp::Type)(int)lua_tonumber(L, 1);
  result = (dsp::Recorder *)new dsp::Recorder(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_dsp__Recorder,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Recorder__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  dsp::Recorder *result = 0 ;
  
  SWIG_check_num_args("dsp::Recorder::Recorder",0,0)
  result = (dsp::Recorder *)new dsp::Recorder();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_dsp__Recorder,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Recorder(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_Recorder__SWIG_3(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_Recorder__SWIG_2(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_Recorder__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_new_Recorder__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_Recorder'\n"
    "  Possible C/C++ prototypes are:\n"
    "    dsp::Recorder::Recorder(dsp::Type,dsp::Space,dsp::Sample)\n"
    "    dsp::Recorder::Recorder(dsp::Type,dsp::Space)\n"
    "    dsp::Recorder::Recorder(dsp::Type)\n"
    "    dsp::Recorder::Recorder()\n");
  lua_error(L);return 0;
}


static int _wrap_Recorder_getMode(lua_State* L) {
  int SWIG_arg = 0;
  dsp::Recorder *arg1 = (dsp::Recorder *) 0 ;
  dsp::Recorder::Mode result;
  
  SWIG_check_num_args("dsp::Recorder::getMode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("dsp::Recorder::getMode",1,"dsp::Recorder const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_dsp__Recorder,0))){
    SWIG_fail_ptr("Recorder_getMode",1,SWIGTYPE_p_dsp__Recorder);
  }
  
  result = (dsp::Recorder::Mode)((dsp::Recorder const *)arg1)->getMode();
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Recorder_setMode(lua_State* L) {
  int SWIG_arg = 0;
  dsp::Recorder *arg1 = (dsp::Recorder *) 0 ;
  dsp::Recorder::Mode arg2 ;
  
  SWIG_check_num_args("dsp::Recorder::setMode",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("dsp::Recorder::setMode",1,"dsp::Recorder *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("dsp::Recorder::setMode",2,"dsp::Recorder::Mode");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_dsp__Recorder,0))){
    SWIG_fail_ptr("Recorder_setMode",1,SWIGTYPE_p_dsp__Recorder);
  }
  
  arg2 = (dsp::Recorder::Mode)(int)lua_tonumber(L, 2);
  (arg1)->setMode(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Recorder_getRecordingTime(lua_State* L) {
  int SWIG_arg = 0;
  dsp::Recorder *arg1 = (dsp::Recorder *) 0 ;
  dsp::Sample result;
  
  SWIG_check_num_args("dsp::Recorder::getRecordingTime",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("dsp::Recorder::getRecordingTime",1,"dsp::Recorder const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_dsp__Recorder,0))){
    SWIG_fail_ptr("Recorder_getRecordingTime",1,SWIGTYPE_p_dsp__Recorder);
  }
  
  result = (dsp::Sample)((dsp::Recorder const *)arg1)->getRecordingTime();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Recorder_setRecordingTime(lua_State* L) {
  int SWIG_arg = 0;
  dsp::Recorder *arg1 = (dsp::Recorder *) 0 ;
  dsp::Sample arg2 ;
  
  SWIG_check_num_args("dsp::Recorder::setRecordingTime",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("dsp::Recorder::setRecordingTime",1,"dsp::Recorder *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("dsp::Recorder::setRecordingTime",2,"dsp::Sample");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_dsp__Recorder,0))){
    SWIG_fail_ptr("Recorder_setRecordingTime",1,SWIGTYPE_p_dsp__Recorder);
  }
  
  arg2 = (dsp::Sample)lua_tonumber(L, 2);
  (arg1)->setRecordingTime(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Recorder_getRecordingBuffer(lua_State* L) {
  int SWIG_arg = 0;
  dsp::Recorder *arg1 = (dsp::Recorder *) 0 ;
  std::shared_ptr< Buffer > result;
  
  SWIG_check_num_args("dsp::Recorder::getRecordingBuffer",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("dsp::Recorder::getRecordingBuffer",1,"dsp::Recorder const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_dsp__Recorder,0))){
    SWIG_fail_ptr("Recorder_getRecordingBuffer",1,SWIGTYPE_p_dsp__Recorder);
  }
  
  result = ((dsp::Recorder const *)arg1)->getRecordingBuffer();
  {
    std::shared_ptr< Buffer > * resultptr = new std::shared_ptr< Buffer >((const std::shared_ptr< Buffer > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__shared_ptrT_Buffer_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Recorder_getGate(lua_State* L) {
  int SWIG_arg = 0;
  dsp::Recorder *arg1 = (dsp::Recorder *) 0 ;
  std::shared_ptr< Input > result;
  
  SWIG_check_num_args("dsp::Recorder::getGate",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("dsp::Recorder::getGate",1,"dsp::Recorder const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_dsp__Recorder,0))){
    SWIG_fail_ptr("Recorder_getGate",1,SWIGTYPE_p_dsp__Recorder);
  }
  
  result = ((dsp::Recorder const *)arg1)->getGate();
  {
    std::shared_ptr< Input > * resultptr = new std::shared_ptr< Input >((const std::shared_ptr< Input > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__shared_ptrT_Input_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Recorder_getReset(lua_State* L) {
  int SWIG_arg = 0;
  dsp::Recorder *arg1 = (dsp::Recorder *) 0 ;
  std::shared_ptr< Input > result;
  
  SWIG_check_num_args("dsp::Recorder::getReset",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("dsp::Recorder::getReset",1,"dsp::Recorder const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_dsp__Recorder,0))){
    SWIG_fail_ptr("Recorder_getReset",1,SWIGTYPE_p_dsp__Recorder);
  }
  
  result = ((dsp::Recorder const *)arg1)->getReset();
  {
    std::shared_ptr< Input > * resultptr = new std::shared_ptr< Input >((const std::shared_ptr< Input > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__shared_ptrT_Input_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Recorder(void *obj) {
dsp::Recorder *arg1 = (dsp::Recorder *) obj;
delete arg1;
}
static int _proxy__wrap_new_Recorder(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Recorder);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Recorder_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Recorder_methods[]= {
    { "getMode", _wrap_Recorder_getMode},
    { "setMode", _wrap_Recorder_setMode},
    { "getRecordingTime", _wrap_Recorder_getRecordingTime},
    { "setRecordingTime", _wrap_Recorder_setRecordingTime},
    { "getRecordingBuffer", _wrap_Recorder_getRecordingBuffer},
    { "getGate", _wrap_Recorder_getGate},
    { "getReset", _wrap_Recorder_getReset},
    {0,0}
};
static swig_lua_method swig_Recorder_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Recorder_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Recorder_Sf_SwigStatic_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("Mode_FIXED_SINGLE", dsp::Recorder::Mode::FIXED_SINGLE)},
    {SWIG_LUA_CONSTTAB_INT("Mode_FIXED_DOUBLE", dsp::Recorder::Mode::FIXED_DOUBLE)},
    {SWIG_LUA_CONSTTAB_INT("Mode_VARIABLE", dsp::Recorder::Mode::VARIABLE)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Recorder_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Recorder_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Recorder_Sf_SwigStatic = {
    "Recorder",
    swig_Recorder_Sf_SwigStatic_methods,
    swig_Recorder_Sf_SwigStatic_attributes,
    swig_Recorder_Sf_SwigStatic_constants,
    swig_Recorder_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Recorder_bases[] = {0,0};
static const char *swig_Recorder_base_names[] = {"dsp::Consumer *",0};
static swig_lua_class _wrap_class_Recorder = { "Recorder", "Recorder", &SWIGTYPE_p_dsp__Recorder,_proxy__wrap_new_Recorder, swig_delete_Recorder, swig_Recorder_methods, swig_Recorder_attributes, &swig_Recorder_Sf_SwigStatic, swig_Recorder_meta, swig_Recorder_bases, swig_Recorder_base_names };

static int _wrap_new_ChannelMerger__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  dsp::Type arg1 ;
  dsp::Space arg2 ;
  dsp::ChannelMerger *result = 0 ;
  
  SWIG_check_num_args("dsp::ChannelMerger::ChannelMerger",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("dsp::ChannelMerger::ChannelMerger",1,"dsp::Type");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("dsp::ChannelMerger::ChannelMerger",2,"dsp::Space");
  arg1 = (dsp::Type)(int)lua_tonumber(L, 1);
  arg2 = (dsp::Space)(int)lua_tonumber(L, 2);
  result = (dsp::ChannelMerger *)new dsp::ChannelMerger(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_dsp__ChannelMerger,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ChannelMerger__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  dsp::Type arg1 ;
  dsp::ChannelMerger *result = 0 ;
  
  SWIG_check_num_args("dsp::ChannelMerger::ChannelMerger",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("dsp::ChannelMerger::ChannelMerger",1,"dsp::Type");
  arg1 = (dsp::Type)(int)lua_tonumber(L, 1);
  result = (dsp::ChannelMerger *)new dsp::ChannelMerger(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_dsp__ChannelMerger,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ChannelMerger__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  dsp::ChannelMerger *result = 0 ;
  
  SWIG_check_num_args("dsp::ChannelMerger::ChannelMerger",0,0)
  result = (dsp::ChannelMerger *)new dsp::ChannelMerger();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_dsp__ChannelMerger,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ChannelMerger(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_ChannelMerger__SWIG_2(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_ChannelMerger__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_ChannelMerger__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_ChannelMerger'\n"
    "  Possible C/C++ prototypes are:\n"
    "    dsp::ChannelMerger::ChannelMerger(dsp::Type,dsp::Space)\n"
    "    dsp::ChannelMerger::ChannelMerger(dsp::Type)\n"
    "    dsp::ChannelMerger::ChannelMerger()\n");
  lua_error(L);return 0;
}


static int _wrap_ChannelMerger_getInput(lua_State* L) {
  int SWIG_arg = 0;
  dsp::ChannelMerger *arg1 = (dsp::ChannelMerger *) 0 ;
  size_t arg2 ;
  std::shared_ptr< Input > result;
  
  SWIG_check_num_args("dsp::ChannelMerger::getInput",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("dsp::ChannelMerger::getInput",1,"dsp::ChannelMerger const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("dsp::ChannelMerger::getInput",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_dsp__ChannelMerger,0))){
    SWIG_fail_ptr("ChannelMerger_getInput",1,SWIGTYPE_p_dsp__ChannelMerger);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = ((dsp::ChannelMerger const *)arg1)->getInput(arg2);
  {
    std::shared_ptr< Input > * resultptr = new std::shared_ptr< Input >((const std::shared_ptr< Input > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__shared_ptrT_Input_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ChannelMerger(void *obj) {
dsp::ChannelMerger *arg1 = (dsp::ChannelMerger *) obj;
delete arg1;
}
static int _proxy__wrap_new_ChannelMerger(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ChannelMerger);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ChannelMerger_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ChannelMerger_methods[]= {
    { "getInput", _wrap_ChannelMerger_getInput},
    {0,0}
};
static swig_lua_method swig_ChannelMerger_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ChannelMerger_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ChannelMerger_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ChannelMerger_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ChannelMerger_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ChannelMerger_Sf_SwigStatic = {
    "ChannelMerger",
    swig_ChannelMerger_Sf_SwigStatic_methods,
    swig_ChannelMerger_Sf_SwigStatic_attributes,
    swig_ChannelMerger_Sf_SwigStatic_constants,
    swig_ChannelMerger_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ChannelMerger_bases[] = {0,0};
static const char *swig_ChannelMerger_base_names[] = {"dsp::Producer *",0};
static swig_lua_class _wrap_class_ChannelMerger = { "ChannelMerger", "ChannelMerger", &SWIGTYPE_p_dsp__ChannelMerger,_proxy__wrap_new_ChannelMerger, swig_delete_ChannelMerger, swig_ChannelMerger_methods, swig_ChannelMerger_attributes, &swig_ChannelMerger_Sf_SwigStatic, swig_ChannelMerger_meta, swig_ChannelMerger_bases, swig_ChannelMerger_base_names };

static int _wrap_new_ChannelSplitter__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  dsp::Type arg1 ;
  dsp::Space arg2 ;
  dsp::ChannelSplitter *result = 0 ;
  
  SWIG_check_num_args("dsp::ChannelSplitter::ChannelSplitter",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("dsp::ChannelSplitter::ChannelSplitter",1,"dsp::Type");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("dsp::ChannelSplitter::ChannelSplitter",2,"dsp::Space");
  arg1 = (dsp::Type)(int)lua_tonumber(L, 1);
  arg2 = (dsp::Space)(int)lua_tonumber(L, 2);
  result = (dsp::ChannelSplitter *)new dsp::ChannelSplitter(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_dsp__ChannelSplitter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ChannelSplitter__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  dsp::Type arg1 ;
  dsp::ChannelSplitter *result = 0 ;
  
  SWIG_check_num_args("dsp::ChannelSplitter::ChannelSplitter",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("dsp::ChannelSplitter::ChannelSplitter",1,"dsp::Type");
  arg1 = (dsp::Type)(int)lua_tonumber(L, 1);
  result = (dsp::ChannelSplitter *)new dsp::ChannelSplitter(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_dsp__ChannelSplitter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ChannelSplitter__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  dsp::ChannelSplitter *result = 0 ;
  
  SWIG_check_num_args("dsp::ChannelSplitter::ChannelSplitter",0,0)
  result = (dsp::ChannelSplitter *)new dsp::ChannelSplitter();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_dsp__ChannelSplitter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ChannelSplitter(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_ChannelSplitter__SWIG_2(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_ChannelSplitter__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_ChannelSplitter__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_ChannelSplitter'\n"
    "  Possible C/C++ prototypes are:\n"
    "    dsp::ChannelSplitter::ChannelSplitter(dsp::Type,dsp::Space)\n"
    "    dsp::ChannelSplitter::ChannelSplitter(dsp::Type)\n"
    "    dsp::ChannelSplitter::ChannelSplitter()\n");
  lua_error(L);return 0;
}


static int _wrap_ChannelSplitter_getOutput(lua_State* L) {
  int SWIG_arg = 0;
  dsp::ChannelSplitter *arg1 = (dsp::ChannelSplitter *) 0 ;
  size_t arg2 ;
  std::shared_ptr< Output > result;
  
  SWIG_check_num_args("dsp::ChannelSplitter::getOutput",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("dsp::ChannelSplitter::getOutput",1,"dsp::ChannelSplitter const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("dsp::ChannelSplitter::getOutput",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_dsp__ChannelSplitter,0))){
    SWIG_fail_ptr("ChannelSplitter_getOutput",1,SWIGTYPE_p_dsp__ChannelSplitter);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = ((dsp::ChannelSplitter const *)arg1)->getOutput(arg2);
  {
    std::shared_ptr< Output > * resultptr = new std::shared_ptr< Output >((const std::shared_ptr< Output > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__shared_ptrT_Output_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ChannelSplitter(void *obj) {
dsp::ChannelSplitter *arg1 = (dsp::ChannelSplitter *) obj;
delete arg1;
}
static int _proxy__wrap_new_ChannelSplitter(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ChannelSplitter);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ChannelSplitter_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ChannelSplitter_methods[]= {
    { "getOutput", _wrap_ChannelSplitter_getOutput},
    {0,0}
};
static swig_lua_method swig_ChannelSplitter_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ChannelSplitter_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ChannelSplitter_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ChannelSplitter_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ChannelSplitter_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ChannelSplitter_Sf_SwigStatic = {
    "ChannelSplitter",
    swig_ChannelSplitter_Sf_SwigStatic_methods,
    swig_ChannelSplitter_Sf_SwigStatic_attributes,
    swig_ChannelSplitter_Sf_SwigStatic_constants,
    swig_ChannelSplitter_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ChannelSplitter_bases[] = {0,0};
static const char *swig_ChannelSplitter_base_names[] = {"dsp::Consumer *",0};
static swig_lua_class _wrap_class_ChannelSplitter = { "ChannelSplitter", "ChannelSplitter", &SWIGTYPE_p_dsp__ChannelSplitter,_proxy__wrap_new_ChannelSplitter, swig_delete_ChannelSplitter, swig_ChannelSplitter_methods, swig_ChannelSplitter_attributes, &swig_ChannelSplitter_Sf_SwigStatic, swig_ChannelSplitter_meta, swig_ChannelSplitter_bases, swig_ChannelSplitter_base_names };

static int _wrap_new_MidSide__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  dsp::Type arg1 ;
  dsp::Space arg2 ;
  dsp::MidSide *result = 0 ;
  
  SWIG_check_num_args("dsp::MidSide::MidSide",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("dsp::MidSide::MidSide",1,"dsp::Type");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("dsp::MidSide::MidSide",2,"dsp::Space");
  arg1 = (dsp::Type)(int)lua_tonumber(L, 1);
  arg2 = (dsp::Space)(int)lua_tonumber(L, 2);
  result = (dsp::MidSide *)new dsp::MidSide(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_dsp__MidSide,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_MidSide__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  dsp::Type arg1 ;
  dsp::MidSide *result = 0 ;
  
  SWIG_check_num_args("dsp::MidSide::MidSide",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("dsp::MidSide::MidSide",1,"dsp::Type");
  arg1 = (dsp::Type)(int)lua_tonumber(L, 1);
  result = (dsp::MidSide *)new dsp::MidSide(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_dsp__MidSide,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_MidSide__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  dsp::MidSide *result = 0 ;
  
  SWIG_check_num_args("dsp::MidSide::MidSide",0,0)
  result = (dsp::MidSide *)new dsp::MidSide();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_dsp__MidSide,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_MidSide(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_MidSide__SWIG_2(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_MidSide__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_MidSide__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_MidSide'\n"
    "  Possible C/C++ prototypes are:\n"
    "    dsp::MidSide::MidSide(dsp::Type,dsp::Space)\n"
    "    dsp::MidSide::MidSide(dsp::Type)\n"
    "    dsp::MidSide::MidSide()\n");
  lua_error(L);return 0;
}


static int _wrap_MidSide_getMixAmount(lua_State* L) {
  int SWIG_arg = 0;
  dsp::MidSide *arg1 = (dsp::MidSide *) 0 ;
  std::shared_ptr< Input > result;
  
  SWIG_check_num_args("dsp::MidSide::getMixAmount",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("dsp::MidSide::getMixAmount",1,"dsp::MidSide const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_dsp__MidSide,0))){
    SWIG_fail_ptr("MidSide_getMixAmount",1,SWIGTYPE_p_dsp__MidSide);
  }
  
  result = ((dsp::MidSide const *)arg1)->getMixAmount();
  {
    std::shared_ptr< Input > * resultptr = new std::shared_ptr< Input >((const std::shared_ptr< Input > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__shared_ptrT_Input_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MidSide_getMid(lua_State* L) {
  int SWIG_arg = 0;
  dsp::MidSide *arg1 = (dsp::MidSide *) 0 ;
  std::shared_ptr< Output > result;
  
  SWIG_check_num_args("dsp::MidSide::getMid",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("dsp::MidSide::getMid",1,"dsp::MidSide const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_dsp__MidSide,0))){
    SWIG_fail_ptr("MidSide_getMid",1,SWIGTYPE_p_dsp__MidSide);
  }
  
  result = ((dsp::MidSide const *)arg1)->getMid();
  {
    std::shared_ptr< Output > * resultptr = new std::shared_ptr< Output >((const std::shared_ptr< Output > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__shared_ptrT_Output_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MidSide_getSide(lua_State* L) {
  int SWIG_arg = 0;
  dsp::MidSide *arg1 = (dsp::MidSide *) 0 ;
  std::shared_ptr< Output > result;
  
  SWIG_check_num_args("dsp::MidSide::getSide",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("dsp::MidSide::getSide",1,"dsp::MidSide const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_dsp__MidSide,0))){
    SWIG_fail_ptr("MidSide_getSide",1,SWIGTYPE_p_dsp__MidSide);
  }
  
  result = ((dsp::MidSide const *)arg1)->getSide();
  {
    std::shared_ptr< Output > * resultptr = new std::shared_ptr< Output >((const std::shared_ptr< Output > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__shared_ptrT_Output_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_MidSide(void *obj) {
dsp::MidSide *arg1 = (dsp::MidSide *) obj;
delete arg1;
}
static int _proxy__wrap_new_MidSide(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_MidSide);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_MidSide_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_MidSide_methods[]= {
    { "getMixAmount", _wrap_MidSide_getMixAmount},
    { "getMid", _wrap_MidSide_getMid},
    { "getSide", _wrap_MidSide_getSide},
    {0,0}
};
static swig_lua_method swig_MidSide_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_MidSide_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_MidSide_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_MidSide_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_MidSide_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_MidSide_Sf_SwigStatic = {
    "MidSide",
    swig_MidSide_Sf_SwigStatic_methods,
    swig_MidSide_Sf_SwigStatic_attributes,
    swig_MidSide_Sf_SwigStatic_constants,
    swig_MidSide_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_MidSide_bases[] = {0,0};
static const char *swig_MidSide_base_names[] = {"dsp::Consumer *",0};
static swig_lua_class _wrap_class_MidSide = { "MidSide", "MidSide", &SWIGTYPE_p_dsp__MidSide,_proxy__wrap_new_MidSide, swig_delete_MidSide, swig_MidSide_methods, swig_MidSide_attributes, &swig_MidSide_Sf_SwigStatic, swig_MidSide_meta, swig_MidSide_bases, swig_MidSide_base_names };

static int _wrap_new_Spread__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  dsp::Type arg1 ;
  dsp::Space arg2 ;
  dsp::Spread *result = 0 ;
  
  SWIG_check_num_args("dsp::Spread::Spread",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("dsp::Spread::Spread",1,"dsp::Type");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("dsp::Spread::Spread",2,"dsp::Space");
  arg1 = (dsp::Type)(int)lua_tonumber(L, 1);
  arg2 = (dsp::Space)(int)lua_tonumber(L, 2);
  result = (dsp::Spread *)new dsp::Spread(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_dsp__Spread,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Spread__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  dsp::Type arg1 ;
  dsp::Spread *result = 0 ;
  
  SWIG_check_num_args("dsp::Spread::Spread",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("dsp::Spread::Spread",1,"dsp::Type");
  arg1 = (dsp::Type)(int)lua_tonumber(L, 1);
  result = (dsp::Spread *)new dsp::Spread(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_dsp__Spread,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Spread__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  dsp::Spread *result = 0 ;
  
  SWIG_check_num_args("dsp::Spread::Spread",0,0)
  result = (dsp::Spread *)new dsp::Spread();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_dsp__Spread,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Spread(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_Spread__SWIG_2(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_Spread__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_Spread__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_Spread'\n"
    "  Possible C/C++ prototypes are:\n"
    "    dsp::Spread::Spread(dsp::Type,dsp::Space)\n"
    "    dsp::Spread::Spread(dsp::Type)\n"
    "    dsp::Spread::Spread()\n");
  lua_error(L);return 0;
}


static int _wrap_Spread_getSpread(lua_State* L) {
  int SWIG_arg = 0;
  dsp::Spread *arg1 = (dsp::Spread *) 0 ;
  std::shared_ptr< Input > result;
  
  SWIG_check_num_args("dsp::Spread::getSpread",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("dsp::Spread::getSpread",1,"dsp::Spread const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_dsp__Spread,0))){
    SWIG_fail_ptr("Spread_getSpread",1,SWIGTYPE_p_dsp__Spread);
  }
  
  result = ((dsp::Spread const *)arg1)->getSpread();
  {
    std::shared_ptr< Input > * resultptr = new std::shared_ptr< Input >((const std::shared_ptr< Input > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__shared_ptrT_Input_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Spread_getMode(lua_State* L) {
  int SWIG_arg = 0;
  dsp::Spread *arg1 = (dsp::Spread *) 0 ;
  std::shared_ptr< Input > result;
  
  SWIG_check_num_args("dsp::Spread::getMode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("dsp::Spread::getMode",1,"dsp::Spread const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_dsp__Spread,0))){
    SWIG_fail_ptr("Spread_getMode",1,SWIGTYPE_p_dsp__Spread);
  }
  
  result = ((dsp::Spread const *)arg1)->getMode();
  {
    std::shared_ptr< Input > * resultptr = new std::shared_ptr< Input >((const std::shared_ptr< Input > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__shared_ptrT_Input_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Spread(void *obj) {
dsp::Spread *arg1 = (dsp::Spread *) obj;
delete arg1;
}
static int _proxy__wrap_new_Spread(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Spread);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Spread_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Spread_methods[]= {
    { "getSpread", _wrap_Spread_getSpread},
    { "getMode", _wrap_Spread_getMode},
    {0,0}
};
static swig_lua_method swig_Spread_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Spread_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Spread_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Spread_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Spread_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Spread_Sf_SwigStatic = {
    "Spread",
    swig_Spread_Sf_SwigStatic_methods,
    swig_Spread_Sf_SwigStatic_attributes,
    swig_Spread_Sf_SwigStatic_constants,
    swig_Spread_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Spread_bases[] = {0,0};
static const char *swig_Spread_base_names[] = {"dsp::Transformer *",0};
static swig_lua_class _wrap_class_Spread = { "Spread", "Spread", &SWIGTYPE_p_dsp__Spread,_proxy__wrap_new_Spread, swig_delete_Spread, swig_Spread_methods, swig_Spread_attributes, &swig_Spread_Sf_SwigStatic, swig_Spread_meta, swig_Spread_bases, swig_Spread_base_names };

static int _wrap_new_StereoPanner__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  dsp::Type arg1 ;
  dsp::Space arg2 ;
  dsp::StereoPanner *result = 0 ;
  
  SWIG_check_num_args("dsp::StereoPanner::StereoPanner",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("dsp::StereoPanner::StereoPanner",1,"dsp::Type");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("dsp::StereoPanner::StereoPanner",2,"dsp::Space");
  arg1 = (dsp::Type)(int)lua_tonumber(L, 1);
  arg2 = (dsp::Space)(int)lua_tonumber(L, 2);
  result = (dsp::StereoPanner *)new dsp::StereoPanner(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_dsp__StereoPanner,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_StereoPanner__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  dsp::Type arg1 ;
  dsp::StereoPanner *result = 0 ;
  
  SWIG_check_num_args("dsp::StereoPanner::StereoPanner",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("dsp::StereoPanner::StereoPanner",1,"dsp::Type");
  arg1 = (dsp::Type)(int)lua_tonumber(L, 1);
  result = (dsp::StereoPanner *)new dsp::StereoPanner(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_dsp__StereoPanner,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_StereoPanner__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  dsp::StereoPanner *result = 0 ;
  
  SWIG_check_num_args("dsp::StereoPanner::StereoPanner",0,0)
  result = (dsp::StereoPanner *)new dsp::StereoPanner();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_dsp__StereoPanner,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_StereoPanner(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_StereoPanner__SWIG_2(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_StereoPanner__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_StereoPanner__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_StereoPanner'\n"
    "  Possible C/C++ prototypes are:\n"
    "    dsp::StereoPanner::StereoPanner(dsp::Type,dsp::Space)\n"
    "    dsp::StereoPanner::StereoPanner(dsp::Type)\n"
    "    dsp::StereoPanner::StereoPanner()\n");
  lua_error(L);return 0;
}


static int _wrap_StereoPanner_getDirection(lua_State* L) {
  int SWIG_arg = 0;
  dsp::StereoPanner *arg1 = (dsp::StereoPanner *) 0 ;
  std::shared_ptr< Input > result;
  
  SWIG_check_num_args("dsp::StereoPanner::getDirection",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("dsp::StereoPanner::getDirection",1,"dsp::StereoPanner const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_dsp__StereoPanner,0))){
    SWIG_fail_ptr("StereoPanner_getDirection",1,SWIGTYPE_p_dsp__StereoPanner);
  }
  
  result = ((dsp::StereoPanner const *)arg1)->getDirection();
  {
    std::shared_ptr< Input > * resultptr = new std::shared_ptr< Input >((const std::shared_ptr< Input > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__shared_ptrT_Input_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoPanner_getLeft(lua_State* L) {
  int SWIG_arg = 0;
  dsp::StereoPanner *arg1 = (dsp::StereoPanner *) 0 ;
  std::shared_ptr< Output > result;
  
  SWIG_check_num_args("dsp::StereoPanner::getLeft",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("dsp::StereoPanner::getLeft",1,"dsp::StereoPanner const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_dsp__StereoPanner,0))){
    SWIG_fail_ptr("StereoPanner_getLeft",1,SWIGTYPE_p_dsp__StereoPanner);
  }
  
  result = ((dsp::StereoPanner const *)arg1)->getLeft();
  {
    std::shared_ptr< Output > * resultptr = new std::shared_ptr< Output >((const std::shared_ptr< Output > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__shared_ptrT_Output_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoPanner_getRight(lua_State* L) {
  int SWIG_arg = 0;
  dsp::StereoPanner *arg1 = (dsp::StereoPanner *) 0 ;
  std::shared_ptr< Output > result;
  
  SWIG_check_num_args("dsp::StereoPanner::getRight",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("dsp::StereoPanner::getRight",1,"dsp::StereoPanner const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_dsp__StereoPanner,0))){
    SWIG_fail_ptr("StereoPanner_getRight",1,SWIGTYPE_p_dsp__StereoPanner);
  }
  
  result = ((dsp::StereoPanner const *)arg1)->getRight();
  {
    std::shared_ptr< Output > * resultptr = new std::shared_ptr< Output >((const std::shared_ptr< Output > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__shared_ptrT_Output_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_StereoPanner(void *obj) {
dsp::StereoPanner *arg1 = (dsp::StereoPanner *) obj;
delete arg1;
}
static int _proxy__wrap_new_StereoPanner(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_StereoPanner);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_StereoPanner_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_StereoPanner_methods[]= {
    { "getDirection", _wrap_StereoPanner_getDirection},
    { "getLeft", _wrap_StereoPanner_getLeft},
    { "getRight", _wrap_StereoPanner_getRight},
    {0,0}
};
static swig_lua_method swig_StereoPanner_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_StereoPanner_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_StereoPanner_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_StereoPanner_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_StereoPanner_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_StereoPanner_Sf_SwigStatic = {
    "StereoPanner",
    swig_StereoPanner_Sf_SwigStatic_methods,
    swig_StereoPanner_Sf_SwigStatic_attributes,
    swig_StereoPanner_Sf_SwigStatic_constants,
    swig_StereoPanner_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_StereoPanner_bases[] = {0,0};
static const char *swig_StereoPanner_base_names[] = {"dsp::Consumer *",0};
static swig_lua_class _wrap_class_StereoPanner = { "StereoPanner", "StereoPanner", &SWIGTYPE_p_dsp__StereoPanner,_proxy__wrap_new_StereoPanner, swig_delete_StereoPanner, swig_StereoPanner_methods, swig_StereoPanner_attributes, &swig_StereoPanner_Sf_SwigStatic, swig_StereoPanner_meta, swig_StereoPanner_bases, swig_StereoPanner_base_names };

static int _wrap_new_Convolver(lua_State* L) {
  int SWIG_arg = 0;
  dsp::Convolver *result = 0 ;
  
  SWIG_check_num_args("dsp::Convolver::Convolver",0,0)
  result = (dsp::Convolver *)new dsp::Convolver();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_dsp__Convolver,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Convolver_getHeadSize(lua_State* L) {
  int SWIG_arg = 0;
  dsp::Convolver *arg1 = (dsp::Convolver *) 0 ;
  size_t result;
  
  SWIG_check_num_args("dsp::Convolver::getHeadSize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("dsp::Convolver::getHeadSize",1,"dsp::Convolver const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_dsp__Convolver,0))){
    SWIG_fail_ptr("Convolver_getHeadSize",1,SWIGTYPE_p_dsp__Convolver);
  }
  
  result = ((dsp::Convolver const *)arg1)->getHeadSize();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Convolver_setHeadSize(lua_State* L) {
  int SWIG_arg = 0;
  dsp::Convolver *arg1 = (dsp::Convolver *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("dsp::Convolver::setHeadSize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("dsp::Convolver::setHeadSize",1,"dsp::Convolver *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("dsp::Convolver::setHeadSize",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_dsp__Convolver,0))){
    SWIG_fail_ptr("Convolver_setHeadSize",1,SWIGTYPE_p_dsp__Convolver);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->setHeadSize(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Convolver_getTailSize(lua_State* L) {
  int SWIG_arg = 0;
  dsp::Convolver *arg1 = (dsp::Convolver *) 0 ;
  size_t result;
  
  SWIG_check_num_args("dsp::Convolver::getTailSize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("dsp::Convolver::getTailSize",1,"dsp::Convolver const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_dsp__Convolver,0))){
    SWIG_fail_ptr("Convolver_getTailSize",1,SWIGTYPE_p_dsp__Convolver);
  }
  
  result = ((dsp::Convolver const *)arg1)->getTailSize();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Convolver_setTailSize(lua_State* L) {
  int SWIG_arg = 0;
  dsp::Convolver *arg1 = (dsp::Convolver *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("dsp::Convolver::setTailSize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("dsp::Convolver::setTailSize",1,"dsp::Convolver *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("dsp::Convolver::setTailSize",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_dsp__Convolver,0))){
    SWIG_fail_ptr("Convolver_setTailSize",1,SWIGTYPE_p_dsp__Convolver);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->setTailSize(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Convolver_getBuffer(lua_State* L) {
  int SWIG_arg = 0;
  dsp::Convolver *arg1 = (dsp::Convolver *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  std::shared_ptr< dsp::Buffer > result;
  
  SWIG_check_num_args("dsp::Convolver::getBuffer",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("dsp::Convolver::getBuffer",1,"dsp::Convolver const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("dsp::Convolver::getBuffer",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("dsp::Convolver::getBuffer",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_dsp__Convolver,0))){
    SWIG_fail_ptr("Convolver_getBuffer",1,SWIGTYPE_p_dsp__Convolver);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  result = ((dsp::Convolver const *)arg1)->getBuffer(arg2,arg3);
  {
    std::shared_ptr< dsp::Buffer > * resultptr = new std::shared_ptr< dsp::Buffer >((const std::shared_ptr< dsp::Buffer > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__shared_ptrT_dsp__Buffer_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Convolver_setBuffer(lua_State* L) {
  int SWIG_arg = 0;
  dsp::Convolver *arg1 = (dsp::Convolver *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  std::shared_ptr< Buffer > arg4 ;
  std::shared_ptr< Buffer > *argp4 ;
  
  SWIG_check_num_args("dsp::Convolver::setBuffer",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("dsp::Convolver::setBuffer",1,"dsp::Convolver *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("dsp::Convolver::setBuffer",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("dsp::Convolver::setBuffer",3,"size_t");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("dsp::Convolver::setBuffer",4,"std::shared_ptr< Buffer >");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_dsp__Convolver,0))){
    SWIG_fail_ptr("Convolver_setBuffer",1,SWIGTYPE_p_dsp__Convolver);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_std__shared_ptrT_Buffer_t,0))){
    SWIG_fail_ptr("Convolver_setBuffer",4,SWIGTYPE_p_std__shared_ptrT_Buffer_t);
  }
  arg4 = *argp4;
  
  (arg1)->setBuffer(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Convolver_initConvolvers(lua_State* L) {
  int SWIG_arg = 0;
  dsp::Convolver *arg1 = (dsp::Convolver *) 0 ;
  
  SWIG_check_num_args("dsp::Convolver::initConvolvers",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("dsp::Convolver::initConvolvers",1,"dsp::Convolver *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_dsp__Convolver,0))){
    SWIG_fail_ptr("Convolver_initConvolvers",1,SWIGTYPE_p_dsp__Convolver);
  }
  
  (arg1)->initConvolvers();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Convolver(void *obj) {
dsp::Convolver *arg1 = (dsp::Convolver *) obj;
delete arg1;
}
static int _proxy__wrap_new_Convolver(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Convolver);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Convolver_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Convolver_methods[]= {
    { "getHeadSize", _wrap_Convolver_getHeadSize},
    { "setHeadSize", _wrap_Convolver_setHeadSize},
    { "getTailSize", _wrap_Convolver_getTailSize},
    { "setTailSize", _wrap_Convolver_setTailSize},
    { "getBuffer", _wrap_Convolver_getBuffer},
    { "setBuffer", _wrap_Convolver_setBuffer},
    { "initConvolvers", _wrap_Convolver_initConvolvers},
    {0,0}
};
static swig_lua_method swig_Convolver_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Convolver_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Convolver_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Convolver_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Convolver_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Convolver_Sf_SwigStatic = {
    "Convolver",
    swig_Convolver_Sf_SwigStatic_methods,
    swig_Convolver_Sf_SwigStatic_attributes,
    swig_Convolver_Sf_SwigStatic_constants,
    swig_Convolver_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Convolver_bases[] = {0,0};
static const char *swig_Convolver_base_names[] = {"dsp::Transformer *",0};
static swig_lua_class _wrap_class_Convolver = { "Convolver", "Convolver", &SWIGTYPE_p_dsp__Convolver,_proxy__wrap_new_Convolver, swig_delete_Convolver, swig_Convolver_methods, swig_Convolver_attributes, &swig_Convolver_Sf_SwigStatic, swig_Convolver_meta, swig_Convolver_bases, swig_Convolver_base_names };

static int _wrap_new_VariableDelay__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  dsp::Type arg1 ;
  dsp::VariableDelay *result = 0 ;
  
  SWIG_check_num_args("dsp::VariableDelay::VariableDelay",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("dsp::VariableDelay::VariableDelay",1,"dsp::Type");
  arg1 = (dsp::Type)(int)lua_tonumber(L, 1);
  result = (dsp::VariableDelay *)new dsp::VariableDelay(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_dsp__VariableDelay,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_VariableDelay__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  dsp::VariableDelay *result = 0 ;
  
  SWIG_check_num_args("dsp::VariableDelay::VariableDelay",0,0)
  result = (dsp::VariableDelay *)new dsp::VariableDelay();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_dsp__VariableDelay,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_VariableDelay(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_VariableDelay__SWIG_1(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_VariableDelay__SWIG_0(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_VariableDelay'\n"
    "  Possible C/C++ prototypes are:\n"
    "    dsp::VariableDelay::VariableDelay(dsp::Type)\n"
    "    dsp::VariableDelay::VariableDelay()\n");
  lua_error(L);return 0;
}


static int _wrap_VariableDelay_getMaxDelayTime(lua_State* L) {
  int SWIG_arg = 0;
  dsp::VariableDelay *arg1 = (dsp::VariableDelay *) 0 ;
  dsp::Sample result;
  
  SWIG_check_num_args("dsp::VariableDelay::getMaxDelayTime",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("dsp::VariableDelay::getMaxDelayTime",1,"dsp::VariableDelay const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_dsp__VariableDelay,0))){
    SWIG_fail_ptr("VariableDelay_getMaxDelayTime",1,SWIGTYPE_p_dsp__VariableDelay);
  }
  
  result = (dsp::Sample)((dsp::VariableDelay const *)arg1)->getMaxDelayTime();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VariableDelay_setMaxDelayTime(lua_State* L) {
  int SWIG_arg = 0;
  dsp::VariableDelay *arg1 = (dsp::VariableDelay *) 0 ;
  dsp::Sample arg2 ;
  
  SWIG_check_num_args("dsp::VariableDelay::setMaxDelayTime",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("dsp::VariableDelay::setMaxDelayTime",1,"dsp::VariableDelay *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("dsp::VariableDelay::setMaxDelayTime",2,"dsp::Sample");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_dsp__VariableDelay,0))){
    SWIG_fail_ptr("VariableDelay_setMaxDelayTime",1,SWIGTYPE_p_dsp__VariableDelay);
  }
  
  arg2 = (dsp::Sample)lua_tonumber(L, 2);
  (arg1)->setMaxDelayTime(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VariableDelay_getDelayTime(lua_State* L) {
  int SWIG_arg = 0;
  dsp::VariableDelay *arg1 = (dsp::VariableDelay *) 0 ;
  std::shared_ptr< Input > result;
  
  SWIG_check_num_args("dsp::VariableDelay::getDelayTime",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("dsp::VariableDelay::getDelayTime",1,"dsp::VariableDelay const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_dsp__VariableDelay,0))){
    SWIG_fail_ptr("VariableDelay_getDelayTime",1,SWIGTYPE_p_dsp__VariableDelay);
  }
  
  result = ((dsp::VariableDelay const *)arg1)->getDelayTime();
  {
    std::shared_ptr< Input > * resultptr = new std::shared_ptr< Input >((const std::shared_ptr< Input > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__shared_ptrT_Input_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VariableDelay_getDecayTime(lua_State* L) {
  int SWIG_arg = 0;
  dsp::VariableDelay *arg1 = (dsp::VariableDelay *) 0 ;
  std::shared_ptr< Input > result;
  
  SWIG_check_num_args("dsp::VariableDelay::getDecayTime",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("dsp::VariableDelay::getDecayTime",1,"dsp::VariableDelay const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_dsp__VariableDelay,0))){
    SWIG_fail_ptr("VariableDelay_getDecayTime",1,SWIGTYPE_p_dsp__VariableDelay);
  }
  
  result = ((dsp::VariableDelay const *)arg1)->getDecayTime();
  {
    std::shared_ptr< Input > * resultptr = new std::shared_ptr< Input >((const std::shared_ptr< Input > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__shared_ptrT_Input_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VariableDelay_getReset(lua_State* L) {
  int SWIG_arg = 0;
  dsp::VariableDelay *arg1 = (dsp::VariableDelay *) 0 ;
  std::shared_ptr< Input > result;
  
  SWIG_check_num_args("dsp::VariableDelay::getReset",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("dsp::VariableDelay::getReset",1,"dsp::VariableDelay const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_dsp__VariableDelay,0))){
    SWIG_fail_ptr("VariableDelay_getReset",1,SWIGTYPE_p_dsp__VariableDelay);
  }
  
  result = ((dsp::VariableDelay const *)arg1)->getReset();
  {
    std::shared_ptr< Input > * resultptr = new std::shared_ptr< Input >((const std::shared_ptr< Input > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__shared_ptrT_Input_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VariableDelay_getFeedbackSource(lua_State* L) {
  int SWIG_arg = 0;
  dsp::VariableDelay *arg1 = (dsp::VariableDelay *) 0 ;
  std::shared_ptr< Output > result;
  
  SWIG_check_num_args("dsp::VariableDelay::getFeedbackSource",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("dsp::VariableDelay::getFeedbackSource",1,"dsp::VariableDelay const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_dsp__VariableDelay,0))){
    SWIG_fail_ptr("VariableDelay_getFeedbackSource",1,SWIGTYPE_p_dsp__VariableDelay);
  }
  
  result = ((dsp::VariableDelay const *)arg1)->getFeedbackSource();
  {
    std::shared_ptr< Output > * resultptr = new std::shared_ptr< Output >((const std::shared_ptr< Output > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__shared_ptrT_Output_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VariableDelay_getFeedbackSink(lua_State* L) {
  int SWIG_arg = 0;
  dsp::VariableDelay *arg1 = (dsp::VariableDelay *) 0 ;
  std::shared_ptr< Input > result;
  
  SWIG_check_num_args("dsp::VariableDelay::getFeedbackSink",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("dsp::VariableDelay::getFeedbackSink",1,"dsp::VariableDelay const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_dsp__VariableDelay,0))){
    SWIG_fail_ptr("VariableDelay_getFeedbackSink",1,SWIGTYPE_p_dsp__VariableDelay);
  }
  
  result = ((dsp::VariableDelay const *)arg1)->getFeedbackSink();
  {
    std::shared_ptr< Input > * resultptr = new std::shared_ptr< Input >((const std::shared_ptr< Input > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__shared_ptrT_Input_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VariableDelay_getFeedbackProcessor(lua_State* L) {
  int SWIG_arg = 0;
  dsp::VariableDelay *arg1 = (dsp::VariableDelay *) 0 ;
  std::shared_ptr< Node > result;
  
  SWIG_check_num_args("dsp::VariableDelay::getFeedbackProcessor",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("dsp::VariableDelay::getFeedbackProcessor",1,"dsp::VariableDelay const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_dsp__VariableDelay,0))){
    SWIG_fail_ptr("VariableDelay_getFeedbackProcessor",1,SWIGTYPE_p_dsp__VariableDelay);
  }
  
  result = ((dsp::VariableDelay const *)arg1)->getFeedbackProcessor();
  {
    std::shared_ptr< Node > * resultptr = new std::shared_ptr< Node >((const std::shared_ptr< Node > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__shared_ptrT_Node_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_VariableDelay(void *obj) {
dsp::VariableDelay *arg1 = (dsp::VariableDelay *) obj;
delete arg1;
}
static int _proxy__wrap_new_VariableDelay(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_VariableDelay);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_VariableDelay_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_VariableDelay_methods[]= {
    { "getMaxDelayTime", _wrap_VariableDelay_getMaxDelayTime},
    { "setMaxDelayTime", _wrap_VariableDelay_setMaxDelayTime},
    { "getDelayTime", _wrap_VariableDelay_getDelayTime},
    { "getDecayTime", _wrap_VariableDelay_getDecayTime},
    { "getReset", _wrap_VariableDelay_getReset},
    { "getFeedbackSource", _wrap_VariableDelay_getFeedbackSource},
    { "getFeedbackSink", _wrap_VariableDelay_getFeedbackSink},
    { "getFeedbackProcessor", _wrap_VariableDelay_getFeedbackProcessor},
    {0,0}
};
static swig_lua_method swig_VariableDelay_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_VariableDelay_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_VariableDelay_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_VariableDelay_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_VariableDelay_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_VariableDelay_Sf_SwigStatic = {
    "VariableDelay",
    swig_VariableDelay_Sf_SwigStatic_methods,
    swig_VariableDelay_Sf_SwigStatic_attributes,
    swig_VariableDelay_Sf_SwigStatic_constants,
    swig_VariableDelay_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_VariableDelay_bases[] = {0,0};
static const char *swig_VariableDelay_base_names[] = {"dsp::Transformer *",0};
static swig_lua_class _wrap_class_VariableDelay = { "VariableDelay", "VariableDelay", &SWIGTYPE_p_dsp__VariableDelay,_proxy__wrap_new_VariableDelay, swig_delete_VariableDelay, swig_VariableDelay_methods, swig_VariableDelay_attributes, &swig_VariableDelay_Sf_SwigStatic, swig_VariableDelay_meta, swig_VariableDelay_bases, swig_VariableDelay_base_names };

static int _wrap_new_Clipper__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  dsp::Type arg1 ;
  dsp::Space arg2 ;
  dsp::Clipper *result = 0 ;
  
  SWIG_check_num_args("dsp::Clipper::Clipper",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("dsp::Clipper::Clipper",1,"dsp::Type");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("dsp::Clipper::Clipper",2,"dsp::Space");
  arg1 = (dsp::Type)(int)lua_tonumber(L, 1);
  arg2 = (dsp::Space)(int)lua_tonumber(L, 2);
  result = (dsp::Clipper *)new dsp::Clipper(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_dsp__Clipper,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Clipper__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  dsp::Type arg1 ;
  dsp::Clipper *result = 0 ;
  
  SWIG_check_num_args("dsp::Clipper::Clipper",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("dsp::Clipper::Clipper",1,"dsp::Type");
  arg1 = (dsp::Type)(int)lua_tonumber(L, 1);
  result = (dsp::Clipper *)new dsp::Clipper(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_dsp__Clipper,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Clipper__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  dsp::Clipper *result = 0 ;
  
  SWIG_check_num_args("dsp::Clipper::Clipper",0,0)
  result = (dsp::Clipper *)new dsp::Clipper();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_dsp__Clipper,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Clipper(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_Clipper__SWIG_2(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_Clipper__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_Clipper__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_Clipper'\n"
    "  Possible C/C++ prototypes are:\n"
    "    dsp::Clipper::Clipper(dsp::Type,dsp::Space)\n"
    "    dsp::Clipper::Clipper(dsp::Type)\n"
    "    dsp::Clipper::Clipper()\n");
  lua_error(L);return 0;
}


static int _wrap_Clipper_getMinimum(lua_State* L) {
  int SWIG_arg = 0;
  dsp::Clipper *arg1 = (dsp::Clipper *) 0 ;
  std::shared_ptr< Input > result;
  
  SWIG_check_num_args("dsp::Clipper::getMinimum",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("dsp::Clipper::getMinimum",1,"dsp::Clipper const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_dsp__Clipper,0))){
    SWIG_fail_ptr("Clipper_getMinimum",1,SWIGTYPE_p_dsp__Clipper);
  }
  
  result = ((dsp::Clipper const *)arg1)->getMinimum();
  {
    std::shared_ptr< Input > * resultptr = new std::shared_ptr< Input >((const std::shared_ptr< Input > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__shared_ptrT_Input_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Clipper_getMaximum(lua_State* L) {
  int SWIG_arg = 0;
  dsp::Clipper *arg1 = (dsp::Clipper *) 0 ;
  std::shared_ptr< Input > result;
  
  SWIG_check_num_args("dsp::Clipper::getMaximum",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("dsp::Clipper::getMaximum",1,"dsp::Clipper const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_dsp__Clipper,0))){
    SWIG_fail_ptr("Clipper_getMaximum",1,SWIGTYPE_p_dsp__Clipper);
  }
  
  result = ((dsp::Clipper const *)arg1)->getMaximum();
  {
    std::shared_ptr< Input > * resultptr = new std::shared_ptr< Input >((const std::shared_ptr< Input > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__shared_ptrT_Input_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Clipper_getMode(lua_State* L) {
  int SWIG_arg = 0;
  dsp::Clipper *arg1 = (dsp::Clipper *) 0 ;
  std::shared_ptr< Input > result;
  
  SWIG_check_num_args("dsp::Clipper::getMode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("dsp::Clipper::getMode",1,"dsp::Clipper const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_dsp__Clipper,0))){
    SWIG_fail_ptr("Clipper_getMode",1,SWIGTYPE_p_dsp__Clipper);
  }
  
  result = ((dsp::Clipper const *)arg1)->getMode();
  {
    std::shared_ptr< Input > * resultptr = new std::shared_ptr< Input >((const std::shared_ptr< Input > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__shared_ptrT_Input_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Clipper(void *obj) {
dsp::Clipper *arg1 = (dsp::Clipper *) obj;
delete arg1;
}
static int _proxy__wrap_new_Clipper(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Clipper);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Clipper_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Clipper_methods[]= {
    { "getMinimum", _wrap_Clipper_getMinimum},
    { "getMaximum", _wrap_Clipper_getMaximum},
    { "getMode", _wrap_Clipper_getMode},
    {0,0}
};
static swig_lua_method swig_Clipper_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Clipper_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Clipper_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Clipper_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Clipper_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Clipper_Sf_SwigStatic = {
    "Clipper",
    swig_Clipper_Sf_SwigStatic_methods,
    swig_Clipper_Sf_SwigStatic_attributes,
    swig_Clipper_Sf_SwigStatic_constants,
    swig_Clipper_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Clipper_bases[] = {0,0};
static const char *swig_Clipper_base_names[] = {"dsp::Transformer *",0};
static swig_lua_class _wrap_class_Clipper = { "Clipper", "Clipper", &SWIGTYPE_p_dsp__Clipper,_proxy__wrap_new_Clipper, swig_delete_Clipper, swig_Clipper_methods, swig_Clipper_attributes, &swig_Clipper_Sf_SwigStatic, swig_Clipper_meta, swig_Clipper_bases, swig_Clipper_base_names };

static int _wrap_new_CompressorGate(lua_State* L) {
  int SWIG_arg = 0;
  dsp::CompressorGate *result = 0 ;
  
  SWIG_check_num_args("dsp::CompressorGate::CompressorGate",0,0)
  result = (dsp::CompressorGate *)new dsp::CompressorGate();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_dsp__CompressorGate,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CompressorGate_getControl(lua_State* L) {
  int SWIG_arg = 0;
  dsp::CompressorGate *arg1 = (dsp::CompressorGate *) 0 ;
  std::shared_ptr< Input > result;
  
  SWIG_check_num_args("dsp::CompressorGate::getControl",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("dsp::CompressorGate::getControl",1,"dsp::CompressorGate const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_dsp__CompressorGate,0))){
    SWIG_fail_ptr("CompressorGate_getControl",1,SWIGTYPE_p_dsp__CompressorGate);
  }
  
  result = ((dsp::CompressorGate const *)arg1)->getControl();
  {
    std::shared_ptr< Input > * resultptr = new std::shared_ptr< Input >((const std::shared_ptr< Input > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__shared_ptrT_Input_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CompressorGate_getThreshold(lua_State* L) {
  int SWIG_arg = 0;
  dsp::CompressorGate *arg1 = (dsp::CompressorGate *) 0 ;
  std::shared_ptr< Input > result;
  
  SWIG_check_num_args("dsp::CompressorGate::getThreshold",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("dsp::CompressorGate::getThreshold",1,"dsp::CompressorGate const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_dsp__CompressorGate,0))){
    SWIG_fail_ptr("CompressorGate_getThreshold",1,SWIGTYPE_p_dsp__CompressorGate);
  }
  
  result = ((dsp::CompressorGate const *)arg1)->getThreshold();
  {
    std::shared_ptr< Input > * resultptr = new std::shared_ptr< Input >((const std::shared_ptr< Input > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__shared_ptrT_Input_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CompressorGate_getSoftness(lua_State* L) {
  int SWIG_arg = 0;
  dsp::CompressorGate *arg1 = (dsp::CompressorGate *) 0 ;
  std::shared_ptr< Input > result;
  
  SWIG_check_num_args("dsp::CompressorGate::getSoftness",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("dsp::CompressorGate::getSoftness",1,"dsp::CompressorGate const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_dsp__CompressorGate,0))){
    SWIG_fail_ptr("CompressorGate_getSoftness",1,SWIGTYPE_p_dsp__CompressorGate);
  }
  
  result = ((dsp::CompressorGate const *)arg1)->getSoftness();
  {
    std::shared_ptr< Input > * resultptr = new std::shared_ptr< Input >((const std::shared_ptr< Input > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__shared_ptrT_Input_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CompressorGate_getCompressionRatio(lua_State* L) {
  int SWIG_arg = 0;
  dsp::CompressorGate *arg1 = (dsp::CompressorGate *) 0 ;
  std::shared_ptr< Input > result;
  
  SWIG_check_num_args("dsp::CompressorGate::getCompressionRatio",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("dsp::CompressorGate::getCompressionRatio",1,"dsp::CompressorGate const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_dsp__CompressorGate,0))){
    SWIG_fail_ptr("CompressorGate_getCompressionRatio",1,SWIGTYPE_p_dsp__CompressorGate);
  }
  
  result = ((dsp::CompressorGate const *)arg1)->getCompressionRatio();
  {
    std::shared_ptr< Input > * resultptr = new std::shared_ptr< Input >((const std::shared_ptr< Input > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__shared_ptrT_Input_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CompressorGate_getGateRatio(lua_State* L) {
  int SWIG_arg = 0;
  dsp::CompressorGate *arg1 = (dsp::CompressorGate *) 0 ;
  std::shared_ptr< Input > result;
  
  SWIG_check_num_args("dsp::CompressorGate::getGateRatio",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("dsp::CompressorGate::getGateRatio",1,"dsp::CompressorGate const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_dsp__CompressorGate,0))){
    SWIG_fail_ptr("CompressorGate_getGateRatio",1,SWIGTYPE_p_dsp__CompressorGate);
  }
  
  result = ((dsp::CompressorGate const *)arg1)->getGateRatio();
  {
    std::shared_ptr< Input > * resultptr = new std::shared_ptr< Input >((const std::shared_ptr< Input > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__shared_ptrT_Input_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CompressorGate_getAttack(lua_State* L) {
  int SWIG_arg = 0;
  dsp::CompressorGate *arg1 = (dsp::CompressorGate *) 0 ;
  std::shared_ptr< Input > result;
  
  SWIG_check_num_args("dsp::CompressorGate::getAttack",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("dsp::CompressorGate::getAttack",1,"dsp::CompressorGate const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_dsp__CompressorGate,0))){
    SWIG_fail_ptr("CompressorGate_getAttack",1,SWIGTYPE_p_dsp__CompressorGate);
  }
  
  result = ((dsp::CompressorGate const *)arg1)->getAttack();
  {
    std::shared_ptr< Input > * resultptr = new std::shared_ptr< Input >((const std::shared_ptr< Input > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__shared_ptrT_Input_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CompressorGate_getRelease(lua_State* L) {
  int SWIG_arg = 0;
  dsp::CompressorGate *arg1 = (dsp::CompressorGate *) 0 ;
  std::shared_ptr< Input > result;
  
  SWIG_check_num_args("dsp::CompressorGate::getRelease",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("dsp::CompressorGate::getRelease",1,"dsp::CompressorGate const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_dsp__CompressorGate,0))){
    SWIG_fail_ptr("CompressorGate_getRelease",1,SWIGTYPE_p_dsp__CompressorGate);
  }
  
  result = ((dsp::CompressorGate const *)arg1)->getRelease();
  {
    std::shared_ptr< Input > * resultptr = new std::shared_ptr< Input >((const std::shared_ptr< Input > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__shared_ptrT_Input_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CompressorGate_getGain(lua_State* L) {
  int SWIG_arg = 0;
  dsp::CompressorGate *arg1 = (dsp::CompressorGate *) 0 ;
  std::shared_ptr< Output > result;
  
  SWIG_check_num_args("dsp::CompressorGate::getGain",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("dsp::CompressorGate::getGain",1,"dsp::CompressorGate const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_dsp__CompressorGate,0))){
    SWIG_fail_ptr("CompressorGate_getGain",1,SWIGTYPE_p_dsp__CompressorGate);
  }
  
  result = ((dsp::CompressorGate const *)arg1)->getGain();
  {
    std::shared_ptr< Output > * resultptr = new std::shared_ptr< Output >((const std::shared_ptr< Output > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__shared_ptrT_Output_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CompressorGate_getGainResponse(lua_State* L) {
  int SWIG_arg = 0;
  dsp::CompressorGate *arg1 = (dsp::CompressorGate *) 0 ;
  size_t arg2 ;
  dsp::Sample arg3 ;
  dsp::Sample result;
  
  SWIG_check_num_args("dsp::CompressorGate::getGainResponse",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("dsp::CompressorGate::getGainResponse",1,"dsp::CompressorGate *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("dsp::CompressorGate::getGainResponse",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("dsp::CompressorGate::getGainResponse",3,"dsp::Sample");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_dsp__CompressorGate,0))){
    SWIG_fail_ptr("CompressorGate_getGainResponse",1,SWIGTYPE_p_dsp__CompressorGate);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  arg3 = (dsp::Sample)lua_tonumber(L, 3);
  result = (dsp::Sample)(arg1)->getGainResponse(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_CompressorGate(void *obj) {
dsp::CompressorGate *arg1 = (dsp::CompressorGate *) obj;
delete arg1;
}
static int _proxy__wrap_new_CompressorGate(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_CompressorGate);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_CompressorGate_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_CompressorGate_methods[]= {
    { "getControl", _wrap_CompressorGate_getControl},
    { "getThreshold", _wrap_CompressorGate_getThreshold},
    { "getSoftness", _wrap_CompressorGate_getSoftness},
    { "getCompressionRatio", _wrap_CompressorGate_getCompressionRatio},
    { "getGateRatio", _wrap_CompressorGate_getGateRatio},
    { "getAttack", _wrap_CompressorGate_getAttack},
    { "getRelease", _wrap_CompressorGate_getRelease},
    { "getGain", _wrap_CompressorGate_getGain},
    { "getGainResponse", _wrap_CompressorGate_getGainResponse},
    {0,0}
};
static swig_lua_method swig_CompressorGate_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CompressorGate_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CompressorGate_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CompressorGate_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CompressorGate_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CompressorGate_Sf_SwigStatic = {
    "CompressorGate",
    swig_CompressorGate_Sf_SwigStatic_methods,
    swig_CompressorGate_Sf_SwigStatic_attributes,
    swig_CompressorGate_Sf_SwigStatic_constants,
    swig_CompressorGate_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CompressorGate_bases[] = {0,0};
static const char *swig_CompressorGate_base_names[] = {"dsp::Transformer *",0};
static swig_lua_class _wrap_class_CompressorGate = { "CompressorGate", "CompressorGate", &SWIGTYPE_p_dsp__CompressorGate,_proxy__wrap_new_CompressorGate, swig_delete_CompressorGate, swig_CompressorGate_methods, swig_CompressorGate_attributes, &swig_CompressorGate_Sf_SwigStatic, swig_CompressorGate_meta, swig_CompressorGate_bases, swig_CompressorGate_base_names };

static int _wrap_new_DryWet__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  dsp::Type arg1 ;
  dsp::Space arg2 ;
  dsp::DryWet *result = 0 ;
  
  SWIG_check_num_args("dsp::DryWet::DryWet",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("dsp::DryWet::DryWet",1,"dsp::Type");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("dsp::DryWet::DryWet",2,"dsp::Space");
  arg1 = (dsp::Type)(int)lua_tonumber(L, 1);
  arg2 = (dsp::Space)(int)lua_tonumber(L, 2);
  result = (dsp::DryWet *)new dsp::DryWet(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_dsp__DryWet,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_DryWet__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  dsp::Type arg1 ;
  dsp::DryWet *result = 0 ;
  
  SWIG_check_num_args("dsp::DryWet::DryWet",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("dsp::DryWet::DryWet",1,"dsp::Type");
  arg1 = (dsp::Type)(int)lua_tonumber(L, 1);
  result = (dsp::DryWet *)new dsp::DryWet(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_dsp__DryWet,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_DryWet__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  dsp::DryWet *result = 0 ;
  
  SWIG_check_num_args("dsp::DryWet::DryWet",0,0)
  result = (dsp::DryWet *)new dsp::DryWet();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_dsp__DryWet,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_DryWet(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_DryWet__SWIG_2(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_DryWet__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_DryWet__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_DryWet'\n"
    "  Possible C/C++ prototypes are:\n"
    "    dsp::DryWet::DryWet(dsp::Type,dsp::Space)\n"
    "    dsp::DryWet::DryWet(dsp::Type)\n"
    "    dsp::DryWet::DryWet()\n");
  lua_error(L);return 0;
}


static int _wrap_DryWet_getDry(lua_State* L) {
  int SWIG_arg = 0;
  dsp::DryWet *arg1 = (dsp::DryWet *) 0 ;
  std::shared_ptr< Input > result;
  
  SWIG_check_num_args("dsp::DryWet::getDry",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("dsp::DryWet::getDry",1,"dsp::DryWet const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_dsp__DryWet,0))){
    SWIG_fail_ptr("DryWet_getDry",1,SWIGTYPE_p_dsp__DryWet);
  }
  
  result = ((dsp::DryWet const *)arg1)->getDry();
  {
    std::shared_ptr< Input > * resultptr = new std::shared_ptr< Input >((const std::shared_ptr< Input > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__shared_ptrT_Input_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DryWet_getWet(lua_State* L) {
  int SWIG_arg = 0;
  dsp::DryWet *arg1 = (dsp::DryWet *) 0 ;
  std::shared_ptr< Input > result;
  
  SWIG_check_num_args("dsp::DryWet::getWet",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("dsp::DryWet::getWet",1,"dsp::DryWet const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_dsp__DryWet,0))){
    SWIG_fail_ptr("DryWet_getWet",1,SWIGTYPE_p_dsp__DryWet);
  }
  
  result = ((dsp::DryWet const *)arg1)->getWet();
  {
    std::shared_ptr< Input > * resultptr = new std::shared_ptr< Input >((const std::shared_ptr< Input > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__shared_ptrT_Input_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DryWet_getMixAmount(lua_State* L) {
  int SWIG_arg = 0;
  dsp::DryWet *arg1 = (dsp::DryWet *) 0 ;
  std::shared_ptr< Input > result;
  
  SWIG_check_num_args("dsp::DryWet::getMixAmount",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("dsp::DryWet::getMixAmount",1,"dsp::DryWet const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_dsp__DryWet,0))){
    SWIG_fail_ptr("DryWet_getMixAmount",1,SWIGTYPE_p_dsp__DryWet);
  }
  
  result = ((dsp::DryWet const *)arg1)->getMixAmount();
  {
    std::shared_ptr< Input > * resultptr = new std::shared_ptr< Input >((const std::shared_ptr< Input > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__shared_ptrT_Input_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DryWet_getA(lua_State* L) {
  int SWIG_arg = 0;
  dsp::DryWet *arg1 = (dsp::DryWet *) 0 ;
  std::shared_ptr< Output > result;
  
  SWIG_check_num_args("dsp::DryWet::getA",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("dsp::DryWet::getA",1,"dsp::DryWet const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_dsp__DryWet,0))){
    SWIG_fail_ptr("DryWet_getA",1,SWIGTYPE_p_dsp__DryWet);
  }
  
  result = ((dsp::DryWet const *)arg1)->getA();
  {
    std::shared_ptr< Output > * resultptr = new std::shared_ptr< Output >((const std::shared_ptr< Output > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__shared_ptrT_Output_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DryWet_getB(lua_State* L) {
  int SWIG_arg = 0;
  dsp::DryWet *arg1 = (dsp::DryWet *) 0 ;
  std::shared_ptr< Output > result;
  
  SWIG_check_num_args("dsp::DryWet::getB",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("dsp::DryWet::getB",1,"dsp::DryWet const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_dsp__DryWet,0))){
    SWIG_fail_ptr("DryWet_getB",1,SWIGTYPE_p_dsp__DryWet);
  }
  
  result = ((dsp::DryWet const *)arg1)->getB();
  {
    std::shared_ptr< Output > * resultptr = new std::shared_ptr< Output >((const std::shared_ptr< Output > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__shared_ptrT_Output_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_DryWet(void *obj) {
dsp::DryWet *arg1 = (dsp::DryWet *) obj;
delete arg1;
}
static int _proxy__wrap_new_DryWet(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_DryWet);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_DryWet_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_DryWet_methods[]= {
    { "getDry", _wrap_DryWet_getDry},
    { "getWet", _wrap_DryWet_getWet},
    { "getMixAmount", _wrap_DryWet_getMixAmount},
    { "getA", _wrap_DryWet_getA},
    { "getB", _wrap_DryWet_getB},
    {0,0}
};
static swig_lua_method swig_DryWet_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_DryWet_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_DryWet_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_DryWet_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_DryWet_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_DryWet_Sf_SwigStatic = {
    "DryWet",
    swig_DryWet_Sf_SwigStatic_methods,
    swig_DryWet_Sf_SwigStatic_attributes,
    swig_DryWet_Sf_SwigStatic_constants,
    swig_DryWet_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_DryWet_bases[] = {0,0};
static const char *swig_DryWet_base_names[] = {"dsp::Producer *",0};
static swig_lua_class _wrap_class_DryWet = { "DryWet", "DryWet", &SWIGTYPE_p_dsp__DryWet,_proxy__wrap_new_DryWet, swig_delete_DryWet, swig_DryWet_methods, swig_DryWet_attributes, &swig_DryWet_Sf_SwigStatic, swig_DryWet_meta, swig_DryWet_bases, swig_DryWet_base_names };

static int _wrap_new_Envelope(lua_State* L) {
  int SWIG_arg = 0;
  dsp::Envelope *result = 0 ;
  
  SWIG_check_num_args("dsp::Envelope::Envelope",0,0)
  result = (dsp::Envelope *)new dsp::Envelope();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_dsp__Envelope,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Envelope_getAttack(lua_State* L) {
  int SWIG_arg = 0;
  dsp::Envelope *arg1 = (dsp::Envelope *) 0 ;
  std::shared_ptr< Input > result;
  
  SWIG_check_num_args("dsp::Envelope::getAttack",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("dsp::Envelope::getAttack",1,"dsp::Envelope const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_dsp__Envelope,0))){
    SWIG_fail_ptr("Envelope_getAttack",1,SWIGTYPE_p_dsp__Envelope);
  }
  
  result = ((dsp::Envelope const *)arg1)->getAttack();
  {
    std::shared_ptr< Input > * resultptr = new std::shared_ptr< Input >((const std::shared_ptr< Input > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__shared_ptrT_Input_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Envelope_getRelease(lua_State* L) {
  int SWIG_arg = 0;
  dsp::Envelope *arg1 = (dsp::Envelope *) 0 ;
  std::shared_ptr< Input > result;
  
  SWIG_check_num_args("dsp::Envelope::getRelease",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("dsp::Envelope::getRelease",1,"dsp::Envelope const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_dsp__Envelope,0))){
    SWIG_fail_ptr("Envelope_getRelease",1,SWIGTYPE_p_dsp__Envelope);
  }
  
  result = ((dsp::Envelope const *)arg1)->getRelease();
  {
    std::shared_ptr< Input > * resultptr = new std::shared_ptr< Input >((const std::shared_ptr< Input > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__shared_ptrT_Input_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Envelope_getAttackShape(lua_State* L) {
  int SWIG_arg = 0;
  dsp::Envelope *arg1 = (dsp::Envelope *) 0 ;
  std::shared_ptr< Input > result;
  
  SWIG_check_num_args("dsp::Envelope::getAttackShape",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("dsp::Envelope::getAttackShape",1,"dsp::Envelope const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_dsp__Envelope,0))){
    SWIG_fail_ptr("Envelope_getAttackShape",1,SWIGTYPE_p_dsp__Envelope);
  }
  
  result = ((dsp::Envelope const *)arg1)->getAttackShape();
  {
    std::shared_ptr< Input > * resultptr = new std::shared_ptr< Input >((const std::shared_ptr< Input > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__shared_ptrT_Input_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Envelope_getReleaseShape(lua_State* L) {
  int SWIG_arg = 0;
  dsp::Envelope *arg1 = (dsp::Envelope *) 0 ;
  std::shared_ptr< Input > result;
  
  SWIG_check_num_args("dsp::Envelope::getReleaseShape",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("dsp::Envelope::getReleaseShape",1,"dsp::Envelope const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_dsp__Envelope,0))){
    SWIG_fail_ptr("Envelope_getReleaseShape",1,SWIGTYPE_p_dsp__Envelope);
  }
  
  result = ((dsp::Envelope const *)arg1)->getReleaseShape();
  {
    std::shared_ptr< Input > * resultptr = new std::shared_ptr< Input >((const std::shared_ptr< Input > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__shared_ptrT_Input_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Envelope_getGate(lua_State* L) {
  int SWIG_arg = 0;
  dsp::Envelope *arg1 = (dsp::Envelope *) 0 ;
  std::shared_ptr< Input > result;
  
  SWIG_check_num_args("dsp::Envelope::getGate",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("dsp::Envelope::getGate",1,"dsp::Envelope const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_dsp__Envelope,0))){
    SWIG_fail_ptr("Envelope_getGate",1,SWIGTYPE_p_dsp__Envelope);
  }
  
  result = ((dsp::Envelope const *)arg1)->getGate();
  {
    std::shared_ptr< Input > * resultptr = new std::shared_ptr< Input >((const std::shared_ptr< Input > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__shared_ptrT_Input_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Envelope_getReset(lua_State* L) {
  int SWIG_arg = 0;
  dsp::Envelope *arg1 = (dsp::Envelope *) 0 ;
  std::shared_ptr< Input > result;
  
  SWIG_check_num_args("dsp::Envelope::getReset",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("dsp::Envelope::getReset",1,"dsp::Envelope const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_dsp__Envelope,0))){
    SWIG_fail_ptr("Envelope_getReset",1,SWIGTYPE_p_dsp__Envelope);
  }
  
  result = ((dsp::Envelope const *)arg1)->getReset();
  {
    std::shared_ptr< Input > * resultptr = new std::shared_ptr< Input >((const std::shared_ptr< Input > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__shared_ptrT_Input_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Envelope_getCurrentTime(lua_State* L) {
  int SWIG_arg = 0;
  dsp::Envelope *arg1 = (dsp::Envelope *) 0 ;
  std::shared_ptr< Output > result;
  
  SWIG_check_num_args("dsp::Envelope::getCurrentTime",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("dsp::Envelope::getCurrentTime",1,"dsp::Envelope const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_dsp__Envelope,0))){
    SWIG_fail_ptr("Envelope_getCurrentTime",1,SWIGTYPE_p_dsp__Envelope);
  }
  
  result = ((dsp::Envelope const *)arg1)->getCurrentTime();
  {
    std::shared_ptr< Output > * resultptr = new std::shared_ptr< Output >((const std::shared_ptr< Output > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__shared_ptrT_Output_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Envelope(void *obj) {
dsp::Envelope *arg1 = (dsp::Envelope *) obj;
delete arg1;
}
static int _proxy__wrap_new_Envelope(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Envelope);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Envelope_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Envelope_methods[]= {
    { "getAttack", _wrap_Envelope_getAttack},
    { "getRelease", _wrap_Envelope_getRelease},
    { "getAttackShape", _wrap_Envelope_getAttackShape},
    { "getReleaseShape", _wrap_Envelope_getReleaseShape},
    { "getGate", _wrap_Envelope_getGate},
    { "getReset", _wrap_Envelope_getReset},
    { "getCurrentTime", _wrap_Envelope_getCurrentTime},
    {0,0}
};
static swig_lua_method swig_Envelope_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Envelope_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Envelope_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Envelope_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Envelope_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Envelope_Sf_SwigStatic = {
    "Envelope",
    swig_Envelope_Sf_SwigStatic_methods,
    swig_Envelope_Sf_SwigStatic_attributes,
    swig_Envelope_Sf_SwigStatic_constants,
    swig_Envelope_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Envelope_bases[] = {0,0};
static const char *swig_Envelope_base_names[] = {"dsp::Producer *",0};
static swig_lua_class _wrap_class_Envelope = { "Envelope", "Envelope", &SWIGTYPE_p_dsp__Envelope,_proxy__wrap_new_Envelope, swig_delete_Envelope, swig_Envelope_methods, swig_Envelope_attributes, &swig_Envelope_Sf_SwigStatic, swig_Envelope_meta, swig_Envelope_bases, swig_Envelope_base_names };

static int _wrap_new_Lag__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  dsp::Type arg1 ;
  dsp::Lag *result = 0 ;
  
  SWIG_check_num_args("dsp::Lag::Lag",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("dsp::Lag::Lag",1,"dsp::Type");
  arg1 = (dsp::Type)(int)lua_tonumber(L, 1);
  result = (dsp::Lag *)new dsp::Lag(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_dsp__Lag,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Lag__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  dsp::Lag *result = 0 ;
  
  SWIG_check_num_args("dsp::Lag::Lag",0,0)
  result = (dsp::Lag *)new dsp::Lag();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_dsp__Lag,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Lag(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_Lag__SWIG_1(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_Lag__SWIG_0(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_Lag'\n"
    "  Possible C/C++ prototypes are:\n"
    "    dsp::Lag::Lag(dsp::Type)\n"
    "    dsp::Lag::Lag()\n");
  lua_error(L);return 0;
}


static int _wrap_Lag_getLagTime(lua_State* L) {
  int SWIG_arg = 0;
  dsp::Lag *arg1 = (dsp::Lag *) 0 ;
  std::shared_ptr< Input > result;
  
  SWIG_check_num_args("dsp::Lag::getLagTime",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("dsp::Lag::getLagTime",1,"dsp::Lag const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_dsp__Lag,0))){
    SWIG_fail_ptr("Lag_getLagTime",1,SWIGTYPE_p_dsp__Lag);
  }
  
  result = ((dsp::Lag const *)arg1)->getLagTime();
  {
    std::shared_ptr< Input > * resultptr = new std::shared_ptr< Input >((const std::shared_ptr< Input > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__shared_ptrT_Input_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Lag(void *obj) {
dsp::Lag *arg1 = (dsp::Lag *) obj;
delete arg1;
}
static int _proxy__wrap_new_Lag(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Lag);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Lag_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Lag_methods[]= {
    { "getLagTime", _wrap_Lag_getLagTime},
    {0,0}
};
static swig_lua_method swig_Lag_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Lag_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Lag_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Lag_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Lag_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Lag_Sf_SwigStatic = {
    "Lag",
    swig_Lag_Sf_SwigStatic_methods,
    swig_Lag_Sf_SwigStatic_attributes,
    swig_Lag_Sf_SwigStatic_constants,
    swig_Lag_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Lag_bases[] = {0,0};
static const char *swig_Lag_base_names[] = {"dsp::Transformer *",0};
static swig_lua_class _wrap_class_Lag = { "Lag", "Lag", &SWIGTYPE_p_dsp__Lag,_proxy__wrap_new_Lag, swig_delete_Lag, swig_Lag_methods, swig_Lag_attributes, &swig_Lag_Sf_SwigStatic, swig_Lag_meta, swig_Lag_bases, swig_Lag_base_names };

static int _wrap_new_Shaper__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  dsp::Space arg1 ;
  dsp::Shaper *result = 0 ;
  
  SWIG_check_num_args("dsp::Shaper::Shaper",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("dsp::Shaper::Shaper",1,"dsp::Space");
  arg1 = (dsp::Space)(int)lua_tonumber(L, 1);
  result = (dsp::Shaper *)new dsp::Shaper(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_dsp__Shaper,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Shaper__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  dsp::Shaper *result = 0 ;
  
  SWIG_check_num_args("dsp::Shaper::Shaper",0,0)
  result = (dsp::Shaper *)new dsp::Shaper();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_dsp__Shaper,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Shaper(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_Shaper__SWIG_1(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_Shaper__SWIG_0(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_Shaper'\n"
    "  Possible C/C++ prototypes are:\n"
    "    dsp::Shaper::Shaper(dsp::Space)\n"
    "    dsp::Shaper::Shaper()\n");
  lua_error(L);return 0;
}


static int _wrap_Shaper_getDrive(lua_State* L) {
  int SWIG_arg = 0;
  dsp::Shaper *arg1 = (dsp::Shaper *) 0 ;
  std::shared_ptr< Input > result;
  
  SWIG_check_num_args("dsp::Shaper::getDrive",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("dsp::Shaper::getDrive",1,"dsp::Shaper const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_dsp__Shaper,0))){
    SWIG_fail_ptr("Shaper_getDrive",1,SWIGTYPE_p_dsp__Shaper);
  }
  
  result = ((dsp::Shaper const *)arg1)->getDrive();
  {
    std::shared_ptr< Input > * resultptr = new std::shared_ptr< Input >((const std::shared_ptr< Input > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__shared_ptrT_Input_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Shaper_getMode(lua_State* L) {
  int SWIG_arg = 0;
  dsp::Shaper *arg1 = (dsp::Shaper *) 0 ;
  std::shared_ptr< Input > result;
  
  SWIG_check_num_args("dsp::Shaper::getMode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("dsp::Shaper::getMode",1,"dsp::Shaper const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_dsp__Shaper,0))){
    SWIG_fail_ptr("Shaper_getMode",1,SWIGTYPE_p_dsp__Shaper);
  }
  
  result = ((dsp::Shaper const *)arg1)->getMode();
  {
    std::shared_ptr< Input > * resultptr = new std::shared_ptr< Input >((const std::shared_ptr< Input > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__shared_ptrT_Input_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Shaper_getOutputSignal(lua_State* L) {
  int SWIG_arg = 0;
  dsp::Shaper *arg1 = (dsp::Shaper *) 0 ;
  size_t arg2 ;
  dsp::Sample arg3 ;
  dsp::Sample result;
  
  SWIG_check_num_args("dsp::Shaper::getOutputSignal",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("dsp::Shaper::getOutputSignal",1,"dsp::Shaper *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("dsp::Shaper::getOutputSignal",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("dsp::Shaper::getOutputSignal",3,"dsp::Sample");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_dsp__Shaper,0))){
    SWIG_fail_ptr("Shaper_getOutputSignal",1,SWIGTYPE_p_dsp__Shaper);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  arg3 = (dsp::Sample)lua_tonumber(L, 3);
  result = (dsp::Sample)(arg1)->getOutputSignal(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Shaper(void *obj) {
dsp::Shaper *arg1 = (dsp::Shaper *) obj;
delete arg1;
}
static int _proxy__wrap_new_Shaper(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Shaper);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Shaper_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Shaper_methods[]= {
    { "getDrive", _wrap_Shaper_getDrive},
    { "getMode", _wrap_Shaper_getMode},
    { "getOutputSignal", _wrap_Shaper_getOutputSignal},
    {0,0}
};
static swig_lua_method swig_Shaper_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Shaper_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Shaper_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Shaper_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Shaper_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Shaper_Sf_SwigStatic = {
    "Shaper",
    swig_Shaper_Sf_SwigStatic_methods,
    swig_Shaper_Sf_SwigStatic_attributes,
    swig_Shaper_Sf_SwigStatic_constants,
    swig_Shaper_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Shaper_bases[] = {0,0};
static const char *swig_Shaper_base_names[] = {"dsp::Transformer *",0};
static swig_lua_class _wrap_class_Shaper = { "Shaper", "Shaper", &SWIGTYPE_p_dsp__Shaper,_proxy__wrap_new_Shaper, swig_delete_Shaper, swig_Shaper_methods, swig_Shaper_attributes, &swig_Shaper_Sf_SwigStatic, swig_Shaper_meta, swig_Shaper_bases, swig_Shaper_base_names };

static int _wrap_new_MidiInput__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SwigValueWrapper< std::shared_ptr< dsp::MidiBuffer > > arg1 ;
  dsp::Type arg2 ;
  std::shared_ptr< dsp::MidiBuffer > *argp1 ;
  dsp::MidiInput *result = 0 ;
  
  SWIG_check_num_args("dsp::MidiInput::MidiInput",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("dsp::MidiInput::MidiInput",1,"std::shared_ptr< dsp::MidiBuffer >");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("dsp::MidiInput::MidiInput",2,"dsp::Type");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_std__shared_ptrT_dsp__MidiBuffer_t,0))){
    SWIG_fail_ptr("new_MidiInput",1,SWIGTYPE_p_std__shared_ptrT_dsp__MidiBuffer_t);
  }
  arg1 = *argp1;
  
  arg2 = (dsp::Type)(int)lua_tonumber(L, 2);
  result = (dsp::MidiInput *)new dsp::MidiInput(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_dsp__MidiInput,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_MidiInput__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SwigValueWrapper< std::shared_ptr< dsp::MidiBuffer > > arg1 ;
  std::shared_ptr< dsp::MidiBuffer > *argp1 ;
  dsp::MidiInput *result = 0 ;
  
  SWIG_check_num_args("dsp::MidiInput::MidiInput",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("dsp::MidiInput::MidiInput",1,"std::shared_ptr< dsp::MidiBuffer >");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_std__shared_ptrT_dsp__MidiBuffer_t,0))){
    SWIG_fail_ptr("new_MidiInput",1,SWIGTYPE_p_std__shared_ptrT_dsp__MidiBuffer_t);
  }
  arg1 = *argp1;
  
  result = (dsp::MidiInput *)new dsp::MidiInput(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_dsp__MidiInput,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_MidiInput(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__shared_ptrT_dsp__MidiBuffer_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_MidiInput__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__shared_ptrT_dsp__MidiBuffer_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_MidiInput__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_MidiInput'\n"
    "  Possible C/C++ prototypes are:\n"
    "    dsp::MidiInput::MidiInput(std::shared_ptr< dsp::MidiBuffer >,dsp::Type)\n"
    "    dsp::MidiInput::MidiInput(std::shared_ptr< dsp::MidiBuffer >)\n");
  lua_error(L);return 0;
}


static int _wrap_MidiInput_getInputMessages(lua_State* L) {
  int SWIG_arg = 0;
  dsp::MidiInput *arg1 = (dsp::MidiInput *) 0 ;
  SwigValueWrapper< std::shared_ptr< dsp::MidiBuffer > > result;
  
  SWIG_check_num_args("dsp::MidiInput::getInputMessages",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("dsp::MidiInput::getInputMessages",1,"dsp::MidiInput const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_dsp__MidiInput,0))){
    SWIG_fail_ptr("MidiInput_getInputMessages",1,SWIGTYPE_p_dsp__MidiInput);
  }
  
  result = ((dsp::MidiInput const *)arg1)->getInputMessages();
  {
    std::shared_ptr< dsp::MidiBuffer > * resultptr = new std::shared_ptr< dsp::MidiBuffer >((const std::shared_ptr< dsp::MidiBuffer > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__shared_ptrT_dsp__MidiBuffer_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MidiInput_getProcessFunction(lua_State* L) {
  int SWIG_arg = 0;
  dsp::MidiInput *arg1 = (dsp::MidiInput *) 0 ;
  std::function< void () > result;
  
  SWIG_check_num_args("dsp::MidiInput::getProcessFunction",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("dsp::MidiInput::getProcessFunction",1,"dsp::MidiInput const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_dsp__MidiInput,0))){
    SWIG_fail_ptr("MidiInput_getProcessFunction",1,SWIGTYPE_p_dsp__MidiInput);
  }
  
  result = ((dsp::MidiInput const *)arg1)->getProcessFunction();
  {
    std::function< void () > * resultptr = new std::function< void () >((const std::function< void () > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__functionT_void_fF_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MidiInput_setProcessFunction(lua_State* L) {
  int SWIG_arg = 0;
  dsp::MidiInput *arg1 = (dsp::MidiInput *) 0 ;
  std::function< void () > arg2 ;
  std::function< void () > *argp2 ;
  
  SWIG_check_num_args("dsp::MidiInput::setProcessFunction",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("dsp::MidiInput::setProcessFunction",1,"dsp::MidiInput *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("dsp::MidiInput::setProcessFunction",2,"std::function< void () >");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_dsp__MidiInput,0))){
    SWIG_fail_ptr("MidiInput_setProcessFunction",1,SWIGTYPE_p_dsp__MidiInput);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_std__functionT_void_fF_t,0))){
    SWIG_fail_ptr("MidiInput_setProcessFunction",2,SWIGTYPE_p_std__functionT_void_fF_t);
  }
  arg2 = *argp2;
  
  (arg1)->setProcessFunction(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MidiInput_processNote(lua_State* L) {
  int SWIG_arg = 0;
  dsp::MidiInput *arg1 = (dsp::MidiInput *) 0 ;
  dsp::uint8 arg2 ;
  std::unordered_set< dsp::uint8 > arg3 ;
  dsp::uint8 *argp2 ;
  std::unordered_set< dsp::uint8 > *argp3 ;
  std::function< void () > result;
  
  SWIG_check_num_args("dsp::MidiInput::processNote",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("dsp::MidiInput::processNote",1,"dsp::MidiInput *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("dsp::MidiInput::processNote",2,"dsp::uint8");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("dsp::MidiInput::processNote",3,"std::unordered_set< dsp::uint8 >");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_dsp__MidiInput,0))){
    SWIG_fail_ptr("MidiInput_processNote",1,SWIGTYPE_p_dsp__MidiInput);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint8_t,0))){
    SWIG_fail_ptr("MidiInput_processNote",2,SWIGTYPE_p_uint8_t);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_std__unordered_setT_uint8_t_t,0))){
    SWIG_fail_ptr("MidiInput_processNote",3,SWIGTYPE_p_std__unordered_setT_uint8_t_t);
  }
  arg3 = *argp3;
  
  result = (arg1)->processNote(arg2,arg3);
  {
    std::function< void () > * resultptr = new std::function< void () >((const std::function< void () > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__functionT_void_fF_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MidiInput_processNoteOn(lua_State* L) {
  int SWIG_arg = 0;
  dsp::MidiInput *arg1 = (dsp::MidiInput *) 0 ;
  dsp::uint8 arg2 ;
  std::unordered_set< dsp::uint8 > arg3 ;
  dsp::uint8 *argp2 ;
  std::unordered_set< dsp::uint8 > *argp3 ;
  std::function< void () > result;
  
  SWIG_check_num_args("dsp::MidiInput::processNoteOn",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("dsp::MidiInput::processNoteOn",1,"dsp::MidiInput *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("dsp::MidiInput::processNoteOn",2,"dsp::uint8");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("dsp::MidiInput::processNoteOn",3,"std::unordered_set< dsp::uint8 >");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_dsp__MidiInput,0))){
    SWIG_fail_ptr("MidiInput_processNoteOn",1,SWIGTYPE_p_dsp__MidiInput);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint8_t,0))){
    SWIG_fail_ptr("MidiInput_processNoteOn",2,SWIGTYPE_p_uint8_t);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_std__unordered_setT_uint8_t_t,0))){
    SWIG_fail_ptr("MidiInput_processNoteOn",3,SWIGTYPE_p_std__unordered_setT_uint8_t_t);
  }
  arg3 = *argp3;
  
  result = (arg1)->processNoteOn(arg2,arg3);
  {
    std::function< void () > * resultptr = new std::function< void () >((const std::function< void () > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__functionT_void_fF_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MidiInput_processNoteOff(lua_State* L) {
  int SWIG_arg = 0;
  dsp::MidiInput *arg1 = (dsp::MidiInput *) 0 ;
  dsp::uint8 arg2 ;
  std::unordered_set< dsp::uint8 > arg3 ;
  dsp::uint8 *argp2 ;
  std::unordered_set< dsp::uint8 > *argp3 ;
  std::function< void () > result;
  
  SWIG_check_num_args("dsp::MidiInput::processNoteOff",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("dsp::MidiInput::processNoteOff",1,"dsp::MidiInput *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("dsp::MidiInput::processNoteOff",2,"dsp::uint8");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("dsp::MidiInput::processNoteOff",3,"std::unordered_set< dsp::uint8 >");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_dsp__MidiInput,0))){
    SWIG_fail_ptr("MidiInput_processNoteOff",1,SWIGTYPE_p_dsp__MidiInput);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint8_t,0))){
    SWIG_fail_ptr("MidiInput_processNoteOff",2,SWIGTYPE_p_uint8_t);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_std__unordered_setT_uint8_t_t,0))){
    SWIG_fail_ptr("MidiInput_processNoteOff",3,SWIGTYPE_p_std__unordered_setT_uint8_t_t);
  }
  arg3 = *argp3;
  
  result = (arg1)->processNoteOff(arg2,arg3);
  {
    std::function< void () > * resultptr = new std::function< void () >((const std::function< void () > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__functionT_void_fF_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MidiInput_processNotePressure(lua_State* L) {
  int SWIG_arg = 0;
  dsp::MidiInput *arg1 = (dsp::MidiInput *) 0 ;
  dsp::uint8 arg2 ;
  std::unordered_set< dsp::uint8 > arg3 ;
  dsp::uint8 *argp2 ;
  std::unordered_set< dsp::uint8 > *argp3 ;
  std::function< void () > result;
  
  SWIG_check_num_args("dsp::MidiInput::processNotePressure",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("dsp::MidiInput::processNotePressure",1,"dsp::MidiInput *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("dsp::MidiInput::processNotePressure",2,"dsp::uint8");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("dsp::MidiInput::processNotePressure",3,"std::unordered_set< dsp::uint8 >");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_dsp__MidiInput,0))){
    SWIG_fail_ptr("MidiInput_processNotePressure",1,SWIGTYPE_p_dsp__MidiInput);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint8_t,0))){
    SWIG_fail_ptr("MidiInput_processNotePressure",2,SWIGTYPE_p_uint8_t);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_std__unordered_setT_uint8_t_t,0))){
    SWIG_fail_ptr("MidiInput_processNotePressure",3,SWIGTYPE_p_std__unordered_setT_uint8_t_t);
  }
  arg3 = *argp3;
  
  result = (arg1)->processNotePressure(arg2,arg3);
  {
    std::function< void () > * resultptr = new std::function< void () >((const std::function< void () > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__functionT_void_fF_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MidiInput_processControl(lua_State* L) {
  int SWIG_arg = 0;
  dsp::MidiInput *arg1 = (dsp::MidiInput *) 0 ;
  dsp::uint8 arg2 ;
  std::unordered_set< dsp::uint8 > arg3 ;
  dsp::uint8 *argp2 ;
  std::unordered_set< dsp::uint8 > *argp3 ;
  std::function< void () > result;
  
  SWIG_check_num_args("dsp::MidiInput::processControl",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("dsp::MidiInput::processControl",1,"dsp::MidiInput *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("dsp::MidiInput::processControl",2,"dsp::uint8");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("dsp::MidiInput::processControl",3,"std::unordered_set< dsp::uint8 >");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_dsp__MidiInput,0))){
    SWIG_fail_ptr("MidiInput_processControl",1,SWIGTYPE_p_dsp__MidiInput);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint8_t,0))){
    SWIG_fail_ptr("MidiInput_processControl",2,SWIGTYPE_p_uint8_t);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_std__unordered_setT_uint8_t_t,0))){
    SWIG_fail_ptr("MidiInput_processControl",3,SWIGTYPE_p_std__unordered_setT_uint8_t_t);
  }
  arg3 = *argp3;
  
  result = (arg1)->processControl(arg2,arg3);
  {
    std::function< void () > * resultptr = new std::function< void () >((const std::function< void () > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__functionT_void_fF_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MidiInput_processControlValue(lua_State* L) {
  int SWIG_arg = 0;
  dsp::MidiInput *arg1 = (dsp::MidiInput *) 0 ;
  dsp::uint8 arg2 ;
  std::unordered_set< dsp::uint8 > arg3 ;
  dsp::uint8 *argp2 ;
  std::unordered_set< dsp::uint8 > *argp3 ;
  std::function< void () > result;
  
  SWIG_check_num_args("dsp::MidiInput::processControlValue",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("dsp::MidiInput::processControlValue",1,"dsp::MidiInput *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("dsp::MidiInput::processControlValue",2,"dsp::uint8");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("dsp::MidiInput::processControlValue",3,"std::unordered_set< dsp::uint8 >");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_dsp__MidiInput,0))){
    SWIG_fail_ptr("MidiInput_processControlValue",1,SWIGTYPE_p_dsp__MidiInput);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint8_t,0))){
    SWIG_fail_ptr("MidiInput_processControlValue",2,SWIGTYPE_p_uint8_t);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_std__unordered_setT_uint8_t_t,0))){
    SWIG_fail_ptr("MidiInput_processControlValue",3,SWIGTYPE_p_std__unordered_setT_uint8_t_t);
  }
  arg3 = *argp3;
  
  result = (arg1)->processControlValue(arg2,arg3);
  {
    std::function< void () > * resultptr = new std::function< void () >((const std::function< void () > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__functionT_void_fF_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MidiInput_processProgram(lua_State* L) {
  int SWIG_arg = 0;
  dsp::MidiInput *arg1 = (dsp::MidiInput *) 0 ;
  dsp::uint8 arg2 ;
  dsp::uint8 *argp2 ;
  std::function< void () > result;
  
  SWIG_check_num_args("dsp::MidiInput::processProgram",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("dsp::MidiInput::processProgram",1,"dsp::MidiInput *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("dsp::MidiInput::processProgram",2,"dsp::uint8");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_dsp__MidiInput,0))){
    SWIG_fail_ptr("MidiInput_processProgram",1,SWIGTYPE_p_dsp__MidiInput);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint8_t,0))){
    SWIG_fail_ptr("MidiInput_processProgram",2,SWIGTYPE_p_uint8_t);
  }
  arg2 = *argp2;
  
  result = (arg1)->processProgram(arg2);
  {
    std::function< void () > * resultptr = new std::function< void () >((const std::function< void () > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__functionT_void_fF_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MidiInput_processChannelPressure(lua_State* L) {
  int SWIG_arg = 0;
  dsp::MidiInput *arg1 = (dsp::MidiInput *) 0 ;
  dsp::uint8 arg2 ;
  dsp::uint8 *argp2 ;
  std::function< void () > result;
  
  SWIG_check_num_args("dsp::MidiInput::processChannelPressure",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("dsp::MidiInput::processChannelPressure",1,"dsp::MidiInput *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("dsp::MidiInput::processChannelPressure",2,"dsp::uint8");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_dsp__MidiInput,0))){
    SWIG_fail_ptr("MidiInput_processChannelPressure",1,SWIGTYPE_p_dsp__MidiInput);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint8_t,0))){
    SWIG_fail_ptr("MidiInput_processChannelPressure",2,SWIGTYPE_p_uint8_t);
  }
  arg2 = *argp2;
  
  result = (arg1)->processChannelPressure(arg2);
  {
    std::function< void () > * resultptr = new std::function< void () >((const std::function< void () > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__functionT_void_fF_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MidiInput_processPitchBend(lua_State* L) {
  int SWIG_arg = 0;
  dsp::MidiInput *arg1 = (dsp::MidiInput *) 0 ;
  dsp::uint8 arg2 ;
  dsp::uint8 *argp2 ;
  std::function< void () > result;
  
  SWIG_check_num_args("dsp::MidiInput::processPitchBend",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("dsp::MidiInput::processPitchBend",1,"dsp::MidiInput *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("dsp::MidiInput::processPitchBend",2,"dsp::uint8");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_dsp__MidiInput,0))){
    SWIG_fail_ptr("MidiInput_processPitchBend",1,SWIGTYPE_p_dsp__MidiInput);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint8_t,0))){
    SWIG_fail_ptr("MidiInput_processPitchBend",2,SWIGTYPE_p_uint8_t);
  }
  arg2 = *argp2;
  
  result = (arg1)->processPitchBend(arg2);
  {
    std::function< void () > * resultptr = new std::function< void () >((const std::function< void () > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__functionT_void_fF_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MidiInput_processAllNotesOff(lua_State* L) {
  int SWIG_arg = 0;
  dsp::MidiInput *arg1 = (dsp::MidiInput *) 0 ;
  dsp::uint8 arg2 ;
  dsp::uint8 *argp2 ;
  std::function< void () > result;
  
  SWIG_check_num_args("dsp::MidiInput::processAllNotesOff",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("dsp::MidiInput::processAllNotesOff",1,"dsp::MidiInput *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("dsp::MidiInput::processAllNotesOff",2,"dsp::uint8");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_dsp__MidiInput,0))){
    SWIG_fail_ptr("MidiInput_processAllNotesOff",1,SWIGTYPE_p_dsp__MidiInput);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint8_t,0))){
    SWIG_fail_ptr("MidiInput_processAllNotesOff",2,SWIGTYPE_p_uint8_t);
  }
  arg2 = *argp2;
  
  result = (arg1)->processAllNotesOff(arg2);
  {
    std::function< void () > * resultptr = new std::function< void () >((const std::function< void () > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__functionT_void_fF_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MidiInput_processSongPositionInQuarterNotes(lua_State* L) {
  int SWIG_arg = 0;
  dsp::MidiInput *arg1 = (dsp::MidiInput *) 0 ;
  std::function< void () > result;
  
  SWIG_check_num_args("dsp::MidiInput::processSongPositionInQuarterNotes",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("dsp::MidiInput::processSongPositionInQuarterNotes",1,"dsp::MidiInput *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_dsp__MidiInput,0))){
    SWIG_fail_ptr("MidiInput_processSongPositionInQuarterNotes",1,SWIGTYPE_p_dsp__MidiInput);
  }
  
  result = (arg1)->processSongPositionInQuarterNotes();
  {
    std::function< void () > * resultptr = new std::function< void () >((const std::function< void () > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__functionT_void_fF_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MidiInput_processClock(lua_State* L) {
  int SWIG_arg = 0;
  dsp::MidiInput *arg1 = (dsp::MidiInput *) 0 ;
  std::function< void () > result;
  
  SWIG_check_num_args("dsp::MidiInput::processClock",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("dsp::MidiInput::processClock",1,"dsp::MidiInput *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_dsp__MidiInput,0))){
    SWIG_fail_ptr("MidiInput_processClock",1,SWIGTYPE_p_dsp__MidiInput);
  }
  
  result = (arg1)->processClock();
  {
    std::function< void () > * resultptr = new std::function< void () >((const std::function< void () > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__functionT_void_fF_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MidiInput_processStart(lua_State* L) {
  int SWIG_arg = 0;
  dsp::MidiInput *arg1 = (dsp::MidiInput *) 0 ;
  std::function< void () > result;
  
  SWIG_check_num_args("dsp::MidiInput::processStart",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("dsp::MidiInput::processStart",1,"dsp::MidiInput *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_dsp__MidiInput,0))){
    SWIG_fail_ptr("MidiInput_processStart",1,SWIGTYPE_p_dsp__MidiInput);
  }
  
  result = (arg1)->processStart();
  {
    std::function< void () > * resultptr = new std::function< void () >((const std::function< void () > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__functionT_void_fF_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MidiInput_processContinue(lua_State* L) {
  int SWIG_arg = 0;
  dsp::MidiInput *arg1 = (dsp::MidiInput *) 0 ;
  std::function< void () > result;
  
  SWIG_check_num_args("dsp::MidiInput::processContinue",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("dsp::MidiInput::processContinue",1,"dsp::MidiInput *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_dsp__MidiInput,0))){
    SWIG_fail_ptr("MidiInput_processContinue",1,SWIGTYPE_p_dsp__MidiInput);
  }
  
  result = (arg1)->processContinue();
  {
    std::function< void () > * resultptr = new std::function< void () >((const std::function< void () > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__functionT_void_fF_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MidiInput_processStop(lua_State* L) {
  int SWIG_arg = 0;
  dsp::MidiInput *arg1 = (dsp::MidiInput *) 0 ;
  std::function< void () > result;
  
  SWIG_check_num_args("dsp::MidiInput::processStop",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("dsp::MidiInput::processStop",1,"dsp::MidiInput *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_dsp__MidiInput,0))){
    SWIG_fail_ptr("MidiInput_processStop",1,SWIGTYPE_p_dsp__MidiInput);
  }
  
  result = (arg1)->processStop();
  {
    std::function< void () > * resultptr = new std::function< void () >((const std::function< void () > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__functionT_void_fF_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_MidiInput(void *obj) {
dsp::MidiInput *arg1 = (dsp::MidiInput *) obj;
delete arg1;
}
static int _proxy__wrap_new_MidiInput(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_MidiInput);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_MidiInput_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_MidiInput_methods[]= {
    { "getInputMessages", _wrap_MidiInput_getInputMessages},
    { "getProcessFunction", _wrap_MidiInput_getProcessFunction},
    { "setProcessFunction", _wrap_MidiInput_setProcessFunction},
    { "processNote", _wrap_MidiInput_processNote},
    { "processNoteOn", _wrap_MidiInput_processNoteOn},
    { "processNoteOff", _wrap_MidiInput_processNoteOff},
    { "processNotePressure", _wrap_MidiInput_processNotePressure},
    { "processControl", _wrap_MidiInput_processControl},
    { "processControlValue", _wrap_MidiInput_processControlValue},
    { "processProgram", _wrap_MidiInput_processProgram},
    { "processChannelPressure", _wrap_MidiInput_processChannelPressure},
    { "processPitchBend", _wrap_MidiInput_processPitchBend},
    { "processAllNotesOff", _wrap_MidiInput_processAllNotesOff},
    { "processSongPositionInQuarterNotes", _wrap_MidiInput_processSongPositionInQuarterNotes},
    { "processClock", _wrap_MidiInput_processClock},
    { "processStart", _wrap_MidiInput_processStart},
    { "processContinue", _wrap_MidiInput_processContinue},
    { "processStop", _wrap_MidiInput_processStop},
    {0,0}
};
static swig_lua_method swig_MidiInput_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_MidiInput_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_MidiInput_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_MidiInput_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_MidiInput_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_MidiInput_Sf_SwigStatic = {
    "MidiInput",
    swig_MidiInput_Sf_SwigStatic_methods,
    swig_MidiInput_Sf_SwigStatic_attributes,
    swig_MidiInput_Sf_SwigStatic_constants,
    swig_MidiInput_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_MidiInput_bases[] = {0,0};
static const char *swig_MidiInput_base_names[] = {"dsp::Producer *",0};
static swig_lua_class _wrap_class_MidiInput = { "MidiInput", "MidiInput", &SWIGTYPE_p_dsp__MidiInput,_proxy__wrap_new_MidiInput, swig_delete_MidiInput, swig_MidiInput_methods, swig_MidiInput_attributes, &swig_MidiInput_Sf_SwigStatic, swig_MidiInput_meta, swig_MidiInput_bases, swig_MidiInput_base_names };

static int _wrap_new_MidiOutput__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SwigValueWrapper< std::shared_ptr< dsp::MidiBuffer > > arg1 ;
  dsp::Type arg2 ;
  std::shared_ptr< dsp::MidiBuffer > *argp1 ;
  dsp::MidiOutput *result = 0 ;
  
  SWIG_check_num_args("dsp::MidiOutput::MidiOutput",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("dsp::MidiOutput::MidiOutput",1,"std::shared_ptr< dsp::MidiBuffer >");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("dsp::MidiOutput::MidiOutput",2,"dsp::Type");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_std__shared_ptrT_dsp__MidiBuffer_t,0))){
    SWIG_fail_ptr("new_MidiOutput",1,SWIGTYPE_p_std__shared_ptrT_dsp__MidiBuffer_t);
  }
  arg1 = *argp1;
  
  arg2 = (dsp::Type)(int)lua_tonumber(L, 2);
  result = (dsp::MidiOutput *)new dsp::MidiOutput(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_dsp__MidiOutput,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_MidiOutput__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SwigValueWrapper< std::shared_ptr< dsp::MidiBuffer > > arg1 ;
  std::shared_ptr< dsp::MidiBuffer > *argp1 ;
  dsp::MidiOutput *result = 0 ;
  
  SWIG_check_num_args("dsp::MidiOutput::MidiOutput",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("dsp::MidiOutput::MidiOutput",1,"std::shared_ptr< dsp::MidiBuffer >");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_std__shared_ptrT_dsp__MidiBuffer_t,0))){
    SWIG_fail_ptr("new_MidiOutput",1,SWIGTYPE_p_std__shared_ptrT_dsp__MidiBuffer_t);
  }
  arg1 = *argp1;
  
  result = (dsp::MidiOutput *)new dsp::MidiOutput(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_dsp__MidiOutput,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_MidiOutput(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__shared_ptrT_dsp__MidiBuffer_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_MidiOutput__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__shared_ptrT_dsp__MidiBuffer_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_MidiOutput__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_MidiOutput'\n"
    "  Possible C/C++ prototypes are:\n"
    "    dsp::MidiOutput::MidiOutput(std::shared_ptr< dsp::MidiBuffer >,dsp::Type)\n"
    "    dsp::MidiOutput::MidiOutput(std::shared_ptr< dsp::MidiBuffer >)\n");
  lua_error(L);return 0;
}


static int _wrap_MidiOutput_getOutputMessages(lua_State* L) {
  int SWIG_arg = 0;
  dsp::MidiOutput *arg1 = (dsp::MidiOutput *) 0 ;
  SwigValueWrapper< std::shared_ptr< dsp::MidiBuffer > > result;
  
  SWIG_check_num_args("dsp::MidiOutput::getOutputMessages",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("dsp::MidiOutput::getOutputMessages",1,"dsp::MidiOutput const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_dsp__MidiOutput,0))){
    SWIG_fail_ptr("MidiOutput_getOutputMessages",1,SWIGTYPE_p_dsp__MidiOutput);
  }
  
  result = ((dsp::MidiOutput const *)arg1)->getOutputMessages();
  {
    std::shared_ptr< dsp::MidiBuffer > * resultptr = new std::shared_ptr< dsp::MidiBuffer >((const std::shared_ptr< dsp::MidiBuffer > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__shared_ptrT_dsp__MidiBuffer_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MidiOutput_getProcessFunction(lua_State* L) {
  int SWIG_arg = 0;
  dsp::MidiOutput *arg1 = (dsp::MidiOutput *) 0 ;
  std::function< void () > result;
  
  SWIG_check_num_args("dsp::MidiOutput::getProcessFunction",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("dsp::MidiOutput::getProcessFunction",1,"dsp::MidiOutput const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_dsp__MidiOutput,0))){
    SWIG_fail_ptr("MidiOutput_getProcessFunction",1,SWIGTYPE_p_dsp__MidiOutput);
  }
  
  result = ((dsp::MidiOutput const *)arg1)->getProcessFunction();
  {
    std::function< void () > * resultptr = new std::function< void () >((const std::function< void () > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__functionT_void_fF_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MidiOutput_setProcessFunction(lua_State* L) {
  int SWIG_arg = 0;
  dsp::MidiOutput *arg1 = (dsp::MidiOutput *) 0 ;
  std::function< void () > arg2 ;
  std::function< void () > *argp2 ;
  
  SWIG_check_num_args("dsp::MidiOutput::setProcessFunction",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("dsp::MidiOutput::setProcessFunction",1,"dsp::MidiOutput *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("dsp::MidiOutput::setProcessFunction",2,"std::function< void () >");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_dsp__MidiOutput,0))){
    SWIG_fail_ptr("MidiOutput_setProcessFunction",1,SWIGTYPE_p_dsp__MidiOutput);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_std__functionT_void_fF_t,0))){
    SWIG_fail_ptr("MidiOutput_setProcessFunction",2,SWIGTYPE_p_std__functionT_void_fF_t);
  }
  arg2 = *argp2;
  
  (arg1)->setProcessFunction(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MidiOutput_processNote(lua_State* L) {
  int SWIG_arg = 0;
  dsp::MidiOutput *arg1 = (dsp::MidiOutput *) 0 ;
  dsp::uint8 arg2 ;
  dsp::uint8 *argp2 ;
  std::function< void () > result;
  
  SWIG_check_num_args("dsp::MidiOutput::processNote",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("dsp::MidiOutput::processNote",1,"dsp::MidiOutput *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("dsp::MidiOutput::processNote",2,"dsp::uint8");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_dsp__MidiOutput,0))){
    SWIG_fail_ptr("MidiOutput_processNote",1,SWIGTYPE_p_dsp__MidiOutput);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint8_t,0))){
    SWIG_fail_ptr("MidiOutput_processNote",2,SWIGTYPE_p_uint8_t);
  }
  arg2 = *argp2;
  
  result = (arg1)->processNote(arg2);
  {
    std::function< void () > * resultptr = new std::function< void () >((const std::function< void () > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__functionT_void_fF_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MidiOutput_processNoteOn(lua_State* L) {
  int SWIG_arg = 0;
  dsp::MidiOutput *arg1 = (dsp::MidiOutput *) 0 ;
  dsp::uint8 arg2 ;
  std::unordered_set< dsp::uint8 > arg3 ;
  dsp::uint8 *argp2 ;
  std::unordered_set< dsp::uint8 > *argp3 ;
  std::function< void () > result;
  
  SWIG_check_num_args("dsp::MidiOutput::processNoteOn",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("dsp::MidiOutput::processNoteOn",1,"dsp::MidiOutput *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("dsp::MidiOutput::processNoteOn",2,"dsp::uint8");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("dsp::MidiOutput::processNoteOn",3,"std::unordered_set< dsp::uint8 >");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_dsp__MidiOutput,0))){
    SWIG_fail_ptr("MidiOutput_processNoteOn",1,SWIGTYPE_p_dsp__MidiOutput);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint8_t,0))){
    SWIG_fail_ptr("MidiOutput_processNoteOn",2,SWIGTYPE_p_uint8_t);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_std__unordered_setT_uint8_t_t,0))){
    SWIG_fail_ptr("MidiOutput_processNoteOn",3,SWIGTYPE_p_std__unordered_setT_uint8_t_t);
  }
  arg3 = *argp3;
  
  result = (arg1)->processNoteOn(arg2,arg3);
  {
    std::function< void () > * resultptr = new std::function< void () >((const std::function< void () > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__functionT_void_fF_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MidiOutput_processNoteOff(lua_State* L) {
  int SWIG_arg = 0;
  dsp::MidiOutput *arg1 = (dsp::MidiOutput *) 0 ;
  dsp::uint8 arg2 ;
  std::unordered_set< dsp::uint8 > arg3 ;
  dsp::uint8 *argp2 ;
  std::unordered_set< dsp::uint8 > *argp3 ;
  std::function< void () > result;
  
  SWIG_check_num_args("dsp::MidiOutput::processNoteOff",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("dsp::MidiOutput::processNoteOff",1,"dsp::MidiOutput *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("dsp::MidiOutput::processNoteOff",2,"dsp::uint8");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("dsp::MidiOutput::processNoteOff",3,"std::unordered_set< dsp::uint8 >");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_dsp__MidiOutput,0))){
    SWIG_fail_ptr("MidiOutput_processNoteOff",1,SWIGTYPE_p_dsp__MidiOutput);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint8_t,0))){
    SWIG_fail_ptr("MidiOutput_processNoteOff",2,SWIGTYPE_p_uint8_t);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_std__unordered_setT_uint8_t_t,0))){
    SWIG_fail_ptr("MidiOutput_processNoteOff",3,SWIGTYPE_p_std__unordered_setT_uint8_t_t);
  }
  arg3 = *argp3;
  
  result = (arg1)->processNoteOff(arg2,arg3);
  {
    std::function< void () > * resultptr = new std::function< void () >((const std::function< void () > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__functionT_void_fF_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MidiOutput_processNotePressure(lua_State* L) {
  int SWIG_arg = 0;
  dsp::MidiOutput *arg1 = (dsp::MidiOutput *) 0 ;
  dsp::uint8 arg2 ;
  std::unordered_set< dsp::uint8 > arg3 ;
  dsp::uint8 *argp2 ;
  std::unordered_set< dsp::uint8 > *argp3 ;
  std::function< void () > result;
  
  SWIG_check_num_args("dsp::MidiOutput::processNotePressure",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("dsp::MidiOutput::processNotePressure",1,"dsp::MidiOutput *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("dsp::MidiOutput::processNotePressure",2,"dsp::uint8");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("dsp::MidiOutput::processNotePressure",3,"std::unordered_set< dsp::uint8 >");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_dsp__MidiOutput,0))){
    SWIG_fail_ptr("MidiOutput_processNotePressure",1,SWIGTYPE_p_dsp__MidiOutput);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint8_t,0))){
    SWIG_fail_ptr("MidiOutput_processNotePressure",2,SWIGTYPE_p_uint8_t);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_std__unordered_setT_uint8_t_t,0))){
    SWIG_fail_ptr("MidiOutput_processNotePressure",3,SWIGTYPE_p_std__unordered_setT_uint8_t_t);
  }
  arg3 = *argp3;
  
  result = (arg1)->processNotePressure(arg2,arg3);
  {
    std::function< void () > * resultptr = new std::function< void () >((const std::function< void () > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__functionT_void_fF_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MidiOutput_processControl(lua_State* L) {
  int SWIG_arg = 0;
  dsp::MidiOutput *arg1 = (dsp::MidiOutput *) 0 ;
  dsp::uint8 arg2 ;
  dsp::uint8 *argp2 ;
  std::function< void () > result;
  
  SWIG_check_num_args("dsp::MidiOutput::processControl",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("dsp::MidiOutput::processControl",1,"dsp::MidiOutput *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("dsp::MidiOutput::processControl",2,"dsp::uint8");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_dsp__MidiOutput,0))){
    SWIG_fail_ptr("MidiOutput_processControl",1,SWIGTYPE_p_dsp__MidiOutput);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint8_t,0))){
    SWIG_fail_ptr("MidiOutput_processControl",2,SWIGTYPE_p_uint8_t);
  }
  arg2 = *argp2;
  
  result = (arg1)->processControl(arg2);
  {
    std::function< void () > * resultptr = new std::function< void () >((const std::function< void () > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__functionT_void_fF_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MidiOutput_processControlValue(lua_State* L) {
  int SWIG_arg = 0;
  dsp::MidiOutput *arg1 = (dsp::MidiOutput *) 0 ;
  dsp::uint8 arg2 ;
  std::unordered_set< dsp::uint8 > arg3 ;
  dsp::uint8 *argp2 ;
  std::unordered_set< dsp::uint8 > *argp3 ;
  std::function< void () > result;
  
  SWIG_check_num_args("dsp::MidiOutput::processControlValue",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("dsp::MidiOutput::processControlValue",1,"dsp::MidiOutput *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("dsp::MidiOutput::processControlValue",2,"dsp::uint8");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("dsp::MidiOutput::processControlValue",3,"std::unordered_set< dsp::uint8 >");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_dsp__MidiOutput,0))){
    SWIG_fail_ptr("MidiOutput_processControlValue",1,SWIGTYPE_p_dsp__MidiOutput);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint8_t,0))){
    SWIG_fail_ptr("MidiOutput_processControlValue",2,SWIGTYPE_p_uint8_t);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_std__unordered_setT_uint8_t_t,0))){
    SWIG_fail_ptr("MidiOutput_processControlValue",3,SWIGTYPE_p_std__unordered_setT_uint8_t_t);
  }
  arg3 = *argp3;
  
  result = (arg1)->processControlValue(arg2,arg3);
  {
    std::function< void () > * resultptr = new std::function< void () >((const std::function< void () > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__functionT_void_fF_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MidiOutput_processProgram(lua_State* L) {
  int SWIG_arg = 0;
  dsp::MidiOutput *arg1 = (dsp::MidiOutput *) 0 ;
  dsp::uint8 arg2 ;
  dsp::uint8 *argp2 ;
  std::function< void () > result;
  
  SWIG_check_num_args("dsp::MidiOutput::processProgram",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("dsp::MidiOutput::processProgram",1,"dsp::MidiOutput *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("dsp::MidiOutput::processProgram",2,"dsp::uint8");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_dsp__MidiOutput,0))){
    SWIG_fail_ptr("MidiOutput_processProgram",1,SWIGTYPE_p_dsp__MidiOutput);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint8_t,0))){
    SWIG_fail_ptr("MidiOutput_processProgram",2,SWIGTYPE_p_uint8_t);
  }
  arg2 = *argp2;
  
  result = (arg1)->processProgram(arg2);
  {
    std::function< void () > * resultptr = new std::function< void () >((const std::function< void () > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__functionT_void_fF_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MidiOutput_processChannelPressure(lua_State* L) {
  int SWIG_arg = 0;
  dsp::MidiOutput *arg1 = (dsp::MidiOutput *) 0 ;
  dsp::uint8 arg2 ;
  dsp::uint8 *argp2 ;
  std::function< void () > result;
  
  SWIG_check_num_args("dsp::MidiOutput::processChannelPressure",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("dsp::MidiOutput::processChannelPressure",1,"dsp::MidiOutput *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("dsp::MidiOutput::processChannelPressure",2,"dsp::uint8");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_dsp__MidiOutput,0))){
    SWIG_fail_ptr("MidiOutput_processChannelPressure",1,SWIGTYPE_p_dsp__MidiOutput);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint8_t,0))){
    SWIG_fail_ptr("MidiOutput_processChannelPressure",2,SWIGTYPE_p_uint8_t);
  }
  arg2 = *argp2;
  
  result = (arg1)->processChannelPressure(arg2);
  {
    std::function< void () > * resultptr = new std::function< void () >((const std::function< void () > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__functionT_void_fF_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MidiOutput_processPitchBend(lua_State* L) {
  int SWIG_arg = 0;
  dsp::MidiOutput *arg1 = (dsp::MidiOutput *) 0 ;
  dsp::uint8 arg2 ;
  dsp::uint8 *argp2 ;
  std::function< void () > result;
  
  SWIG_check_num_args("dsp::MidiOutput::processPitchBend",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("dsp::MidiOutput::processPitchBend",1,"dsp::MidiOutput *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("dsp::MidiOutput::processPitchBend",2,"dsp::uint8");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_dsp__MidiOutput,0))){
    SWIG_fail_ptr("MidiOutput_processPitchBend",1,SWIGTYPE_p_dsp__MidiOutput);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint8_t,0))){
    SWIG_fail_ptr("MidiOutput_processPitchBend",2,SWIGTYPE_p_uint8_t);
  }
  arg2 = *argp2;
  
  result = (arg1)->processPitchBend(arg2);
  {
    std::function< void () > * resultptr = new std::function< void () >((const std::function< void () > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__functionT_void_fF_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MidiOutput_processAllNotesOff(lua_State* L) {
  int SWIG_arg = 0;
  dsp::MidiOutput *arg1 = (dsp::MidiOutput *) 0 ;
  dsp::uint8 arg2 ;
  dsp::uint8 *argp2 ;
  std::function< void () > result;
  
  SWIG_check_num_args("dsp::MidiOutput::processAllNotesOff",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("dsp::MidiOutput::processAllNotesOff",1,"dsp::MidiOutput *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("dsp::MidiOutput::processAllNotesOff",2,"dsp::uint8");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_dsp__MidiOutput,0))){
    SWIG_fail_ptr("MidiOutput_processAllNotesOff",1,SWIGTYPE_p_dsp__MidiOutput);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_uint8_t,0))){
    SWIG_fail_ptr("MidiOutput_processAllNotesOff",2,SWIGTYPE_p_uint8_t);
  }
  arg2 = *argp2;
  
  result = (arg1)->processAllNotesOff(arg2);
  {
    std::function< void () > * resultptr = new std::function< void () >((const std::function< void () > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__functionT_void_fF_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MidiOutput_processSongPositionInQuarterNotes(lua_State* L) {
  int SWIG_arg = 0;
  dsp::MidiOutput *arg1 = (dsp::MidiOutput *) 0 ;
  std::function< void () > result;
  
  SWIG_check_num_args("dsp::MidiOutput::processSongPositionInQuarterNotes",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("dsp::MidiOutput::processSongPositionInQuarterNotes",1,"dsp::MidiOutput *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_dsp__MidiOutput,0))){
    SWIG_fail_ptr("MidiOutput_processSongPositionInQuarterNotes",1,SWIGTYPE_p_dsp__MidiOutput);
  }
  
  result = (arg1)->processSongPositionInQuarterNotes();
  {
    std::function< void () > * resultptr = new std::function< void () >((const std::function< void () > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__functionT_void_fF_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MidiOutput_processClock(lua_State* L) {
  int SWIG_arg = 0;
  dsp::MidiOutput *arg1 = (dsp::MidiOutput *) 0 ;
  std::function< void () > result;
  
  SWIG_check_num_args("dsp::MidiOutput::processClock",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("dsp::MidiOutput::processClock",1,"dsp::MidiOutput *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_dsp__MidiOutput,0))){
    SWIG_fail_ptr("MidiOutput_processClock",1,SWIGTYPE_p_dsp__MidiOutput);
  }
  
  result = (arg1)->processClock();
  {
    std::function< void () > * resultptr = new std::function< void () >((const std::function< void () > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__functionT_void_fF_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MidiOutput_processStart(lua_State* L) {
  int SWIG_arg = 0;
  dsp::MidiOutput *arg1 = (dsp::MidiOutput *) 0 ;
  std::function< void () > result;
  
  SWIG_check_num_args("dsp::MidiOutput::processStart",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("dsp::MidiOutput::processStart",1,"dsp::MidiOutput *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_dsp__MidiOutput,0))){
    SWIG_fail_ptr("MidiOutput_processStart",1,SWIGTYPE_p_dsp__MidiOutput);
  }
  
  result = (arg1)->processStart();
  {
    std::function< void () > * resultptr = new std::function< void () >((const std::function< void () > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__functionT_void_fF_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MidiOutput_processContinue(lua_State* L) {
  int SWIG_arg = 0;
  dsp::MidiOutput *arg1 = (dsp::MidiOutput *) 0 ;
  std::function< void () > result;
  
  SWIG_check_num_args("dsp::MidiOutput::processContinue",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("dsp::MidiOutput::processContinue",1,"dsp::MidiOutput *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_dsp__MidiOutput,0))){
    SWIG_fail_ptr("MidiOutput_processContinue",1,SWIGTYPE_p_dsp__MidiOutput);
  }
  
  result = (arg1)->processContinue();
  {
    std::function< void () > * resultptr = new std::function< void () >((const std::function< void () > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__functionT_void_fF_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MidiOutput_processStop(lua_State* L) {
  int SWIG_arg = 0;
  dsp::MidiOutput *arg1 = (dsp::MidiOutput *) 0 ;
  std::function< void () > result;
  
  SWIG_check_num_args("dsp::MidiOutput::processStop",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("dsp::MidiOutput::processStop",1,"dsp::MidiOutput *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_dsp__MidiOutput,0))){
    SWIG_fail_ptr("MidiOutput_processStop",1,SWIGTYPE_p_dsp__MidiOutput);
  }
  
  result = (arg1)->processStop();
  {
    std::function< void () > * resultptr = new std::function< void () >((const std::function< void () > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__functionT_void_fF_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_MidiOutput(void *obj) {
dsp::MidiOutput *arg1 = (dsp::MidiOutput *) obj;
delete arg1;
}
static int _proxy__wrap_new_MidiOutput(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_MidiOutput);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_MidiOutput_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_MidiOutput_methods[]= {
    { "getOutputMessages", _wrap_MidiOutput_getOutputMessages},
    { "getProcessFunction", _wrap_MidiOutput_getProcessFunction},
    { "setProcessFunction", _wrap_MidiOutput_setProcessFunction},
    { "processNote", _wrap_MidiOutput_processNote},
    { "processNoteOn", _wrap_MidiOutput_processNoteOn},
    { "processNoteOff", _wrap_MidiOutput_processNoteOff},
    { "processNotePressure", _wrap_MidiOutput_processNotePressure},
    { "processControl", _wrap_MidiOutput_processControl},
    { "processControlValue", _wrap_MidiOutput_processControlValue},
    { "processProgram", _wrap_MidiOutput_processProgram},
    { "processChannelPressure", _wrap_MidiOutput_processChannelPressure},
    { "processPitchBend", _wrap_MidiOutput_processPitchBend},
    { "processAllNotesOff", _wrap_MidiOutput_processAllNotesOff},
    { "processSongPositionInQuarterNotes", _wrap_MidiOutput_processSongPositionInQuarterNotes},
    { "processClock", _wrap_MidiOutput_processClock},
    { "processStart", _wrap_MidiOutput_processStart},
    { "processContinue", _wrap_MidiOutput_processContinue},
    { "processStop", _wrap_MidiOutput_processStop},
    {0,0}
};
static swig_lua_method swig_MidiOutput_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_MidiOutput_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_MidiOutput_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_MidiOutput_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_MidiOutput_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_MidiOutput_Sf_SwigStatic = {
    "MidiOutput",
    swig_MidiOutput_Sf_SwigStatic_methods,
    swig_MidiOutput_Sf_SwigStatic_attributes,
    swig_MidiOutput_Sf_SwigStatic_constants,
    swig_MidiOutput_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_MidiOutput_bases[] = {0,0};
static const char *swig_MidiOutput_base_names[] = {"dsp::Consumer *",0};
static swig_lua_class _wrap_class_MidiOutput = { "MidiOutput", "MidiOutput", &SWIGTYPE_p_dsp__MidiOutput,_proxy__wrap_new_MidiOutput, swig_delete_MidiOutput, swig_MidiOutput_methods, swig_MidiOutput_attributes, &swig_MidiOutput_Sf_SwigStatic, swig_MidiOutput_meta, swig_MidiOutput_bases, swig_MidiOutput_base_names };

static int _wrap_new_Biquad(lua_State* L) {
  int SWIG_arg = 0;
  dsp::Biquad *result = 0 ;
  
  SWIG_check_num_args("dsp::Biquad::Biquad",0,0)
  result = (dsp::Biquad *)new dsp::Biquad();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_dsp__Biquad,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Biquad_getFrequency(lua_State* L) {
  int SWIG_arg = 0;
  dsp::Biquad *arg1 = (dsp::Biquad *) 0 ;
  std::shared_ptr< Input > result;
  
  SWIG_check_num_args("dsp::Biquad::getFrequency",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("dsp::Biquad::getFrequency",1,"dsp::Biquad const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_dsp__Biquad,0))){
    SWIG_fail_ptr("Biquad_getFrequency",1,SWIGTYPE_p_dsp__Biquad);
  }
  
  result = ((dsp::Biquad const *)arg1)->getFrequency();
  {
    std::shared_ptr< Input > * resultptr = new std::shared_ptr< Input >((const std::shared_ptr< Input > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__shared_ptrT_Input_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Biquad_getResonance(lua_State* L) {
  int SWIG_arg = 0;
  dsp::Biquad *arg1 = (dsp::Biquad *) 0 ;
  std::shared_ptr< Input > result;
  
  SWIG_check_num_args("dsp::Biquad::getResonance",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("dsp::Biquad::getResonance",1,"dsp::Biquad const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_dsp__Biquad,0))){
    SWIG_fail_ptr("Biquad_getResonance",1,SWIGTYPE_p_dsp__Biquad);
  }
  
  result = ((dsp::Biquad const *)arg1)->getResonance();
  {
    std::shared_ptr< Input > * resultptr = new std::shared_ptr< Input >((const std::shared_ptr< Input > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__shared_ptrT_Input_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Biquad_getAmplitude(lua_State* L) {
  int SWIG_arg = 0;
  dsp::Biquad *arg1 = (dsp::Biquad *) 0 ;
  std::shared_ptr< Input > result;
  
  SWIG_check_num_args("dsp::Biquad::getAmplitude",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("dsp::Biquad::getAmplitude",1,"dsp::Biquad const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_dsp__Biquad,0))){
    SWIG_fail_ptr("Biquad_getAmplitude",1,SWIGTYPE_p_dsp__Biquad);
  }
  
  result = ((dsp::Biquad const *)arg1)->getAmplitude();
  {
    std::shared_ptr< Input > * resultptr = new std::shared_ptr< Input >((const std::shared_ptr< Input > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__shared_ptrT_Input_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Biquad_getMode(lua_State* L) {
  int SWIG_arg = 0;
  dsp::Biquad *arg1 = (dsp::Biquad *) 0 ;
  std::shared_ptr< Input > result;
  
  SWIG_check_num_args("dsp::Biquad::getMode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("dsp::Biquad::getMode",1,"dsp::Biquad const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_dsp__Biquad,0))){
    SWIG_fail_ptr("Biquad_getMode",1,SWIGTYPE_p_dsp__Biquad);
  }
  
  result = ((dsp::Biquad const *)arg1)->getMode();
  {
    std::shared_ptr< Input > * resultptr = new std::shared_ptr< Input >((const std::shared_ptr< Input > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__shared_ptrT_Input_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Biquad_getMagnitudeAndPhaseResponse(lua_State* L) {
  int SWIG_arg = 0;
  dsp::Biquad *arg1 = (dsp::Biquad *) 0 ;
  size_t arg2 ;
  dsp::Sample arg3 ;
  dsp::Sample *arg4 = 0 ;
  dsp::Sample *arg5 = 0 ;
  
  SWIG_check_num_args("dsp::Biquad::getMagnitudeAndPhaseResponse",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("dsp::Biquad::getMagnitudeAndPhaseResponse",1,"dsp::Biquad *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("dsp::Biquad::getMagnitudeAndPhaseResponse",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("dsp::Biquad::getMagnitudeAndPhaseResponse",3,"dsp::Sample");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("dsp::Biquad::getMagnitudeAndPhaseResponse",4,"dsp::Sample &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("dsp::Biquad::getMagnitudeAndPhaseResponse",5,"dsp::Sample &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_dsp__Biquad,0))){
    SWIG_fail_ptr("Biquad_getMagnitudeAndPhaseResponse",1,SWIGTYPE_p_dsp__Biquad);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  arg3 = (dsp::Sample)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("Biquad_getMagnitudeAndPhaseResponse",4,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("Biquad_getMagnitudeAndPhaseResponse",5,SWIGTYPE_p_double);
  }
  
  (arg1)->getMagnitudeAndPhaseResponse(arg2,arg3,*arg4,*arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Biquad(void *obj) {
dsp::Biquad *arg1 = (dsp::Biquad *) obj;
delete arg1;
}
static int _proxy__wrap_new_Biquad(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Biquad);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Biquad_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Biquad_methods[]= {
    { "getFrequency", _wrap_Biquad_getFrequency},
    { "getResonance", _wrap_Biquad_getResonance},
    { "getAmplitude", _wrap_Biquad_getAmplitude},
    { "getMode", _wrap_Biquad_getMode},
    { "getMagnitudeAndPhaseResponse", _wrap_Biquad_getMagnitudeAndPhaseResponse},
    {0,0}
};
static swig_lua_method swig_Biquad_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Biquad_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Biquad_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Biquad_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Biquad_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Biquad_Sf_SwigStatic = {
    "Biquad",
    swig_Biquad_Sf_SwigStatic_methods,
    swig_Biquad_Sf_SwigStatic_attributes,
    swig_Biquad_Sf_SwigStatic_constants,
    swig_Biquad_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Biquad_bases[] = {0,0};
static const char *swig_Biquad_base_names[] = {"dsp::Transformer *",0};
static swig_lua_class _wrap_class_Biquad = { "Biquad", "Biquad", &SWIGTYPE_p_dsp__Biquad,_proxy__wrap_new_Biquad, swig_delete_Biquad, swig_Biquad_methods, swig_Biquad_attributes, &swig_Biquad_Sf_SwigStatic, swig_Biquad_meta, swig_Biquad_bases, swig_Biquad_base_names };

static int _wrap_new_Crossover(lua_State* L) {
  int SWIG_arg = 0;
  dsp::Crossover *result = 0 ;
  
  SWIG_check_num_args("dsp::Crossover::Crossover",0,0)
  result = (dsp::Crossover *)new dsp::Crossover();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_dsp__Crossover,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Crossover_getInput(lua_State* L) {
  int SWIG_arg = 0;
  dsp::Crossover *arg1 = (dsp::Crossover *) 0 ;
  std::shared_ptr< Input > result;
  
  SWIG_check_num_args("dsp::Crossover::getInput",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("dsp::Crossover::getInput",1,"dsp::Crossover const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_dsp__Crossover,0))){
    SWIG_fail_ptr("Crossover_getInput",1,SWIGTYPE_p_dsp__Crossover);
  }
  
  result = ((dsp::Crossover const *)arg1)->getInput();
  {
    std::shared_ptr< Input > * resultptr = new std::shared_ptr< Input >((const std::shared_ptr< Input > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__shared_ptrT_Input_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Crossover_getFrequency(lua_State* L) {
  int SWIG_arg = 0;
  dsp::Crossover *arg1 = (dsp::Crossover *) 0 ;
  std::shared_ptr< Input > result;
  
  SWIG_check_num_args("dsp::Crossover::getFrequency",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("dsp::Crossover::getFrequency",1,"dsp::Crossover const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_dsp__Crossover,0))){
    SWIG_fail_ptr("Crossover_getFrequency",1,SWIGTYPE_p_dsp__Crossover);
  }
  
  result = ((dsp::Crossover const *)arg1)->getFrequency();
  {
    std::shared_ptr< Input > * resultptr = new std::shared_ptr< Input >((const std::shared_ptr< Input > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__shared_ptrT_Input_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Crossover_getLow(lua_State* L) {
  int SWIG_arg = 0;
  dsp::Crossover *arg1 = (dsp::Crossover *) 0 ;
  std::shared_ptr< Output > result;
  
  SWIG_check_num_args("dsp::Crossover::getLow",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("dsp::Crossover::getLow",1,"dsp::Crossover const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_dsp__Crossover,0))){
    SWIG_fail_ptr("Crossover_getLow",1,SWIGTYPE_p_dsp__Crossover);
  }
  
  result = ((dsp::Crossover const *)arg1)->getLow();
  {
    std::shared_ptr< Output > * resultptr = new std::shared_ptr< Output >((const std::shared_ptr< Output > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__shared_ptrT_Output_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Crossover_getHigh(lua_State* L) {
  int SWIG_arg = 0;
  dsp::Crossover *arg1 = (dsp::Crossover *) 0 ;
  std::shared_ptr< Output > result;
  
  SWIG_check_num_args("dsp::Crossover::getHigh",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("dsp::Crossover::getHigh",1,"dsp::Crossover const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_dsp__Crossover,0))){
    SWIG_fail_ptr("Crossover_getHigh",1,SWIGTYPE_p_dsp__Crossover);
  }
  
  result = ((dsp::Crossover const *)arg1)->getHigh();
  {
    std::shared_ptr< Output > * resultptr = new std::shared_ptr< Output >((const std::shared_ptr< Output > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__shared_ptrT_Output_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Crossover(void *obj) {
dsp::Crossover *arg1 = (dsp::Crossover *) obj;
delete arg1;
}
static int _proxy__wrap_new_Crossover(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Crossover);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Crossover_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Crossover_methods[]= {
    { "getInput", _wrap_Crossover_getInput},
    { "getFrequency", _wrap_Crossover_getFrequency},
    { "getLow", _wrap_Crossover_getLow},
    { "getHigh", _wrap_Crossover_getHigh},
    {0,0}
};
static swig_lua_method swig_Crossover_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Crossover_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Crossover_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Crossover_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Crossover_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Crossover_Sf_SwigStatic = {
    "Crossover",
    swig_Crossover_Sf_SwigStatic_methods,
    swig_Crossover_Sf_SwigStatic_attributes,
    swig_Crossover_Sf_SwigStatic_constants,
    swig_Crossover_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Crossover_bases[] = {0};
static const char *swig_Crossover_base_names[] = {0};
static swig_lua_class _wrap_class_Crossover = { "Crossover", "Crossover", &SWIGTYPE_p_dsp__Crossover,_proxy__wrap_new_Crossover, swig_delete_Crossover, swig_Crossover_methods, swig_Crossover_attributes, &swig_Crossover_Sf_SwigStatic, swig_Crossover_meta, swig_Crossover_bases, swig_Crossover_base_names };

static int _wrap_new_OnePole__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  dsp::Type arg1 ;
  dsp::OnePole *result = 0 ;
  
  SWIG_check_num_args("dsp::OnePole::OnePole",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("dsp::OnePole::OnePole",1,"dsp::Type");
  arg1 = (dsp::Type)(int)lua_tonumber(L, 1);
  result = (dsp::OnePole *)new dsp::OnePole(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_dsp__OnePole,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_OnePole__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  dsp::OnePole *result = 0 ;
  
  SWIG_check_num_args("dsp::OnePole::OnePole",0,0)
  result = (dsp::OnePole *)new dsp::OnePole();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_dsp__OnePole,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_OnePole(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_OnePole__SWIG_1(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_OnePole__SWIG_0(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_OnePole'\n"
    "  Possible C/C++ prototypes are:\n"
    "    dsp::OnePole::OnePole(dsp::Type)\n"
    "    dsp::OnePole::OnePole()\n");
  lua_error(L);return 0;
}


static int _wrap_OnePole_getFrequency(lua_State* L) {
  int SWIG_arg = 0;
  dsp::OnePole *arg1 = (dsp::OnePole *) 0 ;
  std::shared_ptr< Input > result;
  
  SWIG_check_num_args("dsp::OnePole::getFrequency",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("dsp::OnePole::getFrequency",1,"dsp::OnePole const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_dsp__OnePole,0))){
    SWIG_fail_ptr("OnePole_getFrequency",1,SWIGTYPE_p_dsp__OnePole);
  }
  
  result = ((dsp::OnePole const *)arg1)->getFrequency();
  {
    std::shared_ptr< Input > * resultptr = new std::shared_ptr< Input >((const std::shared_ptr< Input > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__shared_ptrT_Input_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OnePole_getMode(lua_State* L) {
  int SWIG_arg = 0;
  dsp::OnePole *arg1 = (dsp::OnePole *) 0 ;
  std::shared_ptr< Input > result;
  
  SWIG_check_num_args("dsp::OnePole::getMode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("dsp::OnePole::getMode",1,"dsp::OnePole const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_dsp__OnePole,0))){
    SWIG_fail_ptr("OnePole_getMode",1,SWIGTYPE_p_dsp__OnePole);
  }
  
  result = ((dsp::OnePole const *)arg1)->getMode();
  {
    std::shared_ptr< Input > * resultptr = new std::shared_ptr< Input >((const std::shared_ptr< Input > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__shared_ptrT_Input_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_OnePole(void *obj) {
dsp::OnePole *arg1 = (dsp::OnePole *) obj;
delete arg1;
}
static int _proxy__wrap_new_OnePole(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_OnePole);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_OnePole_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_OnePole_methods[]= {
    { "getFrequency", _wrap_OnePole_getFrequency},
    { "getMode", _wrap_OnePole_getMode},
    {0,0}
};
static swig_lua_method swig_OnePole_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_OnePole_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_OnePole_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_OnePole_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_OnePole_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_OnePole_Sf_SwigStatic = {
    "OnePole",
    swig_OnePole_Sf_SwigStatic_methods,
    swig_OnePole_Sf_SwigStatic_attributes,
    swig_OnePole_Sf_SwigStatic_constants,
    swig_OnePole_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_OnePole_bases[] = {0,0};
static const char *swig_OnePole_base_names[] = {"dsp::Transformer *",0};
static swig_lua_class _wrap_class_OnePole = { "OnePole", "OnePole", &SWIGTYPE_p_dsp__OnePole,_proxy__wrap_new_OnePole, swig_delete_OnePole, swig_OnePole_methods, swig_OnePole_attributes, &swig_OnePole_Sf_SwigStatic, swig_OnePole_meta, swig_OnePole_bases, swig_OnePole_base_names };

static int _wrap_new_FunctionOscillator__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  dsp::Type arg1 ;
  dsp::FunctionOscillator *result = 0 ;
  
  SWIG_check_num_args("dsp::FunctionOscillator::FunctionOscillator",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("dsp::FunctionOscillator::FunctionOscillator",1,"dsp::Type");
  arg1 = (dsp::Type)(int)lua_tonumber(L, 1);
  result = (dsp::FunctionOscillator *)new dsp::FunctionOscillator(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_dsp__FunctionOscillator,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FunctionOscillator__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  dsp::FunctionOscillator *result = 0 ;
  
  SWIG_check_num_args("dsp::FunctionOscillator::FunctionOscillator",0,0)
  result = (dsp::FunctionOscillator *)new dsp::FunctionOscillator();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_dsp__FunctionOscillator,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FunctionOscillator(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_FunctionOscillator__SWIG_1(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_FunctionOscillator__SWIG_0(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_FunctionOscillator'\n"
    "  Possible C/C++ prototypes are:\n"
    "    dsp::FunctionOscillator::FunctionOscillator(dsp::Type)\n"
    "    dsp::FunctionOscillator::FunctionOscillator()\n");
  lua_error(L);return 0;
}


static int _wrap_FunctionOscillator_getFunction(lua_State* L) {
  int SWIG_arg = 0;
  dsp::FunctionOscillator *arg1 = (dsp::FunctionOscillator *) 0 ;
  std::shared_ptr< std::function< dsp::Sample (dsp::Sample) > > result;
  
  SWIG_check_num_args("dsp::FunctionOscillator::getFunction",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("dsp::FunctionOscillator::getFunction",1,"dsp::FunctionOscillator const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_dsp__FunctionOscillator,0))){
    SWIG_fail_ptr("FunctionOscillator_getFunction",1,SWIGTYPE_p_dsp__FunctionOscillator);
  }
  
  result = ((dsp::FunctionOscillator const *)arg1)->getFunction();
  {
    std::shared_ptr< std::function< dsp::Sample (dsp::Sample) > > * resultptr = new std::shared_ptr< std::function< dsp::Sample (dsp::Sample) > >((const std::shared_ptr< std::function< dsp::Sample (dsp::Sample) > > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__shared_ptrT_std__functionT_double_fdoubleF_t_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FunctionOscillator_setFunction(lua_State* L) {
  int SWIG_arg = 0;
  dsp::FunctionOscillator *arg1 = (dsp::FunctionOscillator *) 0 ;
  std::shared_ptr< std::function< dsp::Sample (dsp::Sample) > > arg2 ;
  std::shared_ptr< std::function< dsp::Sample (dsp::Sample) > > *argp2 ;
  
  SWIG_check_num_args("dsp::FunctionOscillator::setFunction",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("dsp::FunctionOscillator::setFunction",1,"dsp::FunctionOscillator *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("dsp::FunctionOscillator::setFunction",2,"std::shared_ptr< std::function< dsp::Sample (dsp::Sample) > >");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_dsp__FunctionOscillator,0))){
    SWIG_fail_ptr("FunctionOscillator_setFunction",1,SWIGTYPE_p_dsp__FunctionOscillator);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_std__shared_ptrT_std__functionT_double_fdoubleF_t_t,0))){
    SWIG_fail_ptr("FunctionOscillator_setFunction",2,SWIGTYPE_p_std__shared_ptrT_std__functionT_double_fdoubleF_t_t);
  }
  arg2 = *argp2;
  
  (arg1)->setFunction(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FunctionOscillator_getPhase(lua_State* L) {
  int SWIG_arg = 0;
  dsp::FunctionOscillator *arg1 = (dsp::FunctionOscillator *) 0 ;
  std::shared_ptr< Input > result;
  
  SWIG_check_num_args("dsp::FunctionOscillator::getPhase",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("dsp::FunctionOscillator::getPhase",1,"dsp::FunctionOscillator const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_dsp__FunctionOscillator,0))){
    SWIG_fail_ptr("FunctionOscillator_getPhase",1,SWIGTYPE_p_dsp__FunctionOscillator);
  }
  
  result = ((dsp::FunctionOscillator const *)arg1)->getPhase();
  {
    std::shared_ptr< Input > * resultptr = new std::shared_ptr< Input >((const std::shared_ptr< Input > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__shared_ptrT_Input_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_FunctionOscillator(void *obj) {
dsp::FunctionOscillator *arg1 = (dsp::FunctionOscillator *) obj;
delete arg1;
}
static int _proxy__wrap_new_FunctionOscillator(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_FunctionOscillator);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_FunctionOscillator_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_FunctionOscillator_methods[]= {
    { "getFunction", _wrap_FunctionOscillator_getFunction},
    { "setFunction", _wrap_FunctionOscillator_setFunction},
    { "getPhase", _wrap_FunctionOscillator_getPhase},
    {0,0}
};
static swig_lua_method swig_FunctionOscillator_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_FunctionOscillator_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_FunctionOscillator_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_FunctionOscillator_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_FunctionOscillator_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_FunctionOscillator_Sf_SwigStatic = {
    "FunctionOscillator",
    swig_FunctionOscillator_Sf_SwigStatic_methods,
    swig_FunctionOscillator_Sf_SwigStatic_attributes,
    swig_FunctionOscillator_Sf_SwigStatic_constants,
    swig_FunctionOscillator_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_FunctionOscillator_bases[] = {0,0};
static const char *swig_FunctionOscillator_base_names[] = {"dsp::Producer *",0};
static swig_lua_class _wrap_class_FunctionOscillator = { "FunctionOscillator", "FunctionOscillator", &SWIGTYPE_p_dsp__FunctionOscillator,_proxy__wrap_new_FunctionOscillator, swig_delete_FunctionOscillator, swig_FunctionOscillator_methods, swig_FunctionOscillator_attributes, &swig_FunctionOscillator_Sf_SwigStatic, swig_FunctionOscillator_meta, swig_FunctionOscillator_bases, swig_FunctionOscillator_base_names };

static int _wrap_new_MoorerOscillator(lua_State* L) {
  int SWIG_arg = 0;
  dsp::MoorerOscillator *result = 0 ;
  
  SWIG_check_num_args("dsp::MoorerOscillator::MoorerOscillator",0,0)
  result = (dsp::MoorerOscillator *)new dsp::MoorerOscillator();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_dsp__MoorerOscillator,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MoorerOscillator_getPhase(lua_State* L) {
  int SWIG_arg = 0;
  dsp::MoorerOscillator *arg1 = (dsp::MoorerOscillator *) 0 ;
  std::shared_ptr< Input > result;
  
  SWIG_check_num_args("dsp::MoorerOscillator::getPhase",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("dsp::MoorerOscillator::getPhase",1,"dsp::MoorerOscillator const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_dsp__MoorerOscillator,0))){
    SWIG_fail_ptr("MoorerOscillator_getPhase",1,SWIGTYPE_p_dsp__MoorerOscillator);
  }
  
  result = ((dsp::MoorerOscillator const *)arg1)->getPhase();
  {
    std::shared_ptr< Input > * resultptr = new std::shared_ptr< Input >((const std::shared_ptr< Input > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__shared_ptrT_Input_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MoorerOscillator_getIntensity(lua_State* L) {
  int SWIG_arg = 0;
  dsp::MoorerOscillator *arg1 = (dsp::MoorerOscillator *) 0 ;
  std::shared_ptr< Input > result;
  
  SWIG_check_num_args("dsp::MoorerOscillator::getIntensity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("dsp::MoorerOscillator::getIntensity",1,"dsp::MoorerOscillator const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_dsp__MoorerOscillator,0))){
    SWIG_fail_ptr("MoorerOscillator_getIntensity",1,SWIGTYPE_p_dsp__MoorerOscillator);
  }
  
  result = ((dsp::MoorerOscillator const *)arg1)->getIntensity();
  {
    std::shared_ptr< Input > * resultptr = new std::shared_ptr< Input >((const std::shared_ptr< Input > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__shared_ptrT_Input_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MoorerOscillator_getModulationIndex(lua_State* L) {
  int SWIG_arg = 0;
  dsp::MoorerOscillator *arg1 = (dsp::MoorerOscillator *) 0 ;
  std::shared_ptr< Input > result;
  
  SWIG_check_num_args("dsp::MoorerOscillator::getModulationIndex",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("dsp::MoorerOscillator::getModulationIndex",1,"dsp::MoorerOscillator const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_dsp__MoorerOscillator,0))){
    SWIG_fail_ptr("MoorerOscillator_getModulationIndex",1,SWIGTYPE_p_dsp__MoorerOscillator);
  }
  
  result = ((dsp::MoorerOscillator const *)arg1)->getModulationIndex();
  {
    std::shared_ptr< Input > * resultptr = new std::shared_ptr< Input >((const std::shared_ptr< Input > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__shared_ptrT_Input_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MoorerOscillator_getHarmonics(lua_State* L) {
  int SWIG_arg = 0;
  dsp::MoorerOscillator *arg1 = (dsp::MoorerOscillator *) 0 ;
  std::shared_ptr< Input > result;
  
  SWIG_check_num_args("dsp::MoorerOscillator::getHarmonics",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("dsp::MoorerOscillator::getHarmonics",1,"dsp::MoorerOscillator const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_dsp__MoorerOscillator,0))){
    SWIG_fail_ptr("MoorerOscillator_getHarmonics",1,SWIGTYPE_p_dsp__MoorerOscillator);
  }
  
  result = ((dsp::MoorerOscillator const *)arg1)->getHarmonics();
  {
    std::shared_ptr< Input > * resultptr = new std::shared_ptr< Input >((const std::shared_ptr< Input > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__shared_ptrT_Input_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MoorerOscillator_getMode(lua_State* L) {
  int SWIG_arg = 0;
  dsp::MoorerOscillator *arg1 = (dsp::MoorerOscillator *) 0 ;
  std::shared_ptr< Input > result;
  
  SWIG_check_num_args("dsp::MoorerOscillator::getMode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("dsp::MoorerOscillator::getMode",1,"dsp::MoorerOscillator const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_dsp__MoorerOscillator,0))){
    SWIG_fail_ptr("MoorerOscillator_getMode",1,SWIGTYPE_p_dsp__MoorerOscillator);
  }
  
  result = ((dsp::MoorerOscillator const *)arg1)->getMode();
  {
    std::shared_ptr< Input > * resultptr = new std::shared_ptr< Input >((const std::shared_ptr< Input > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__shared_ptrT_Input_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_MoorerOscillator(void *obj) {
dsp::MoorerOscillator *arg1 = (dsp::MoorerOscillator *) obj;
delete arg1;
}
static int _proxy__wrap_new_MoorerOscillator(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_MoorerOscillator);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_MoorerOscillator_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_MoorerOscillator_methods[]= {
    { "getPhase", _wrap_MoorerOscillator_getPhase},
    { "getIntensity", _wrap_MoorerOscillator_getIntensity},
    { "getModulationIndex", _wrap_MoorerOscillator_getModulationIndex},
    { "getHarmonics", _wrap_MoorerOscillator_getHarmonics},
    { "getMode", _wrap_MoorerOscillator_getMode},
    {0,0}
};
static swig_lua_method swig_MoorerOscillator_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_MoorerOscillator_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_MoorerOscillator_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_MoorerOscillator_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_MoorerOscillator_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_MoorerOscillator_Sf_SwigStatic = {
    "MoorerOscillator",
    swig_MoorerOscillator_Sf_SwigStatic_methods,
    swig_MoorerOscillator_Sf_SwigStatic_attributes,
    swig_MoorerOscillator_Sf_SwigStatic_constants,
    swig_MoorerOscillator_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_MoorerOscillator_bases[] = {0,0};
static const char *swig_MoorerOscillator_base_names[] = {"dsp::Producer *",0};
static swig_lua_class _wrap_class_MoorerOscillator = { "MoorerOscillator", "MoorerOscillator", &SWIGTYPE_p_dsp__MoorerOscillator,_proxy__wrap_new_MoorerOscillator, swig_delete_MoorerOscillator, swig_MoorerOscillator_methods, swig_MoorerOscillator_attributes, &swig_MoorerOscillator_Sf_SwigStatic, swig_MoorerOscillator_meta, swig_MoorerOscillator_bases, swig_MoorerOscillator_base_names };

static int _wrap_new_Noise(lua_State* L) {
  int SWIG_arg = 0;
  dsp::Noise *result = 0 ;
  
  SWIG_check_num_args("dsp::Noise::Noise",0,0)
  result = (dsp::Noise *)new dsp::Noise();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_dsp__Noise,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Noise_getMode(lua_State* L) {
  int SWIG_arg = 0;
  dsp::Noise *arg1 = (dsp::Noise *) 0 ;
  std::shared_ptr< Input > result;
  
  SWIG_check_num_args("dsp::Noise::getMode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("dsp::Noise::getMode",1,"dsp::Noise const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_dsp__Noise,0))){
    SWIG_fail_ptr("Noise_getMode",1,SWIGTYPE_p_dsp__Noise);
  }
  
  result = ((dsp::Noise const *)arg1)->getMode();
  {
    std::shared_ptr< Input > * resultptr = new std::shared_ptr< Input >((const std::shared_ptr< Input > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__shared_ptrT_Input_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Noise(void *obj) {
dsp::Noise *arg1 = (dsp::Noise *) obj;
delete arg1;
}
static int _proxy__wrap_new_Noise(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Noise);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Noise_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Noise_methods[]= {
    { "getMode", _wrap_Noise_getMode},
    {0,0}
};
static swig_lua_method swig_Noise_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Noise_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Noise_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Noise_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Noise_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Noise_Sf_SwigStatic = {
    "Noise",
    swig_Noise_Sf_SwigStatic_methods,
    swig_Noise_Sf_SwigStatic_attributes,
    swig_Noise_Sf_SwigStatic_constants,
    swig_Noise_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Noise_bases[] = {0,0};
static const char *swig_Noise_base_names[] = {"dsp::Producer *",0};
static swig_lua_class _wrap_class_Noise = { "Noise", "Noise", &SWIGTYPE_p_dsp__Noise,_proxy__wrap_new_Noise, swig_delete_Noise, swig_Noise_methods, swig_Noise_attributes, &swig_Noise_Sf_SwigStatic, swig_Noise_meta, swig_Noise_bases, swig_Noise_base_names };

static int _wrap_new_Phasor(lua_State* L) {
  int SWIG_arg = 0;
  dsp::Phasor *result = 0 ;
  
  SWIG_check_num_args("dsp::Phasor::Phasor",0,0)
  result = (dsp::Phasor *)new dsp::Phasor();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_dsp__Phasor,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Phasor_getFrequency(lua_State* L) {
  int SWIG_arg = 0;
  dsp::Phasor *arg1 = (dsp::Phasor *) 0 ;
  std::shared_ptr< Input > result;
  
  SWIG_check_num_args("dsp::Phasor::getFrequency",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("dsp::Phasor::getFrequency",1,"dsp::Phasor const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_dsp__Phasor,0))){
    SWIG_fail_ptr("Phasor_getFrequency",1,SWIGTYPE_p_dsp__Phasor);
  }
  
  result = ((dsp::Phasor const *)arg1)->getFrequency();
  {
    std::shared_ptr< Input > * resultptr = new std::shared_ptr< Input >((const std::shared_ptr< Input > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__shared_ptrT_Input_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Phasor_getMode(lua_State* L) {
  int SWIG_arg = 0;
  dsp::Phasor *arg1 = (dsp::Phasor *) 0 ;
  std::shared_ptr< Input > result;
  
  SWIG_check_num_args("dsp::Phasor::getMode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("dsp::Phasor::getMode",1,"dsp::Phasor const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_dsp__Phasor,0))){
    SWIG_fail_ptr("Phasor_getMode",1,SWIGTYPE_p_dsp__Phasor);
  }
  
  result = ((dsp::Phasor const *)arg1)->getMode();
  {
    std::shared_ptr< Input > * resultptr = new std::shared_ptr< Input >((const std::shared_ptr< Input > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__shared_ptrT_Input_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Phasor_getReset(lua_State* L) {
  int SWIG_arg = 0;
  dsp::Phasor *arg1 = (dsp::Phasor *) 0 ;
  std::shared_ptr< Input > result;
  
  SWIG_check_num_args("dsp::Phasor::getReset",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("dsp::Phasor::getReset",1,"dsp::Phasor const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_dsp__Phasor,0))){
    SWIG_fail_ptr("Phasor_getReset",1,SWIGTYPE_p_dsp__Phasor);
  }
  
  result = ((dsp::Phasor const *)arg1)->getReset();
  {
    std::shared_ptr< Input > * resultptr = new std::shared_ptr< Input >((const std::shared_ptr< Input > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__shared_ptrT_Input_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Phasor(void *obj) {
dsp::Phasor *arg1 = (dsp::Phasor *) obj;
delete arg1;
}
static int _proxy__wrap_new_Phasor(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Phasor);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Phasor_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Phasor_methods[]= {
    { "getFrequency", _wrap_Phasor_getFrequency},
    { "getMode", _wrap_Phasor_getMode},
    { "getReset", _wrap_Phasor_getReset},
    {0,0}
};
static swig_lua_method swig_Phasor_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Phasor_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Phasor_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Phasor_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Phasor_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Phasor_Sf_SwigStatic = {
    "Phasor",
    swig_Phasor_Sf_SwigStatic_methods,
    swig_Phasor_Sf_SwigStatic_attributes,
    swig_Phasor_Sf_SwigStatic_constants,
    swig_Phasor_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Phasor_bases[] = {0,0};
static const char *swig_Phasor_base_names[] = {"dsp::Producer *",0};
static swig_lua_class _wrap_class_Phasor = { "Phasor", "Phasor", &SWIGTYPE_p_dsp__Phasor,_proxy__wrap_new_Phasor, swig_delete_Phasor, swig_Phasor_methods, swig_Phasor_attributes, &swig_Phasor_Sf_SwigStatic, swig_Phasor_meta, swig_Phasor_bases, swig_Phasor_base_names };

static int _wrap_new_SamplePlayer__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  dsp::Type arg1 ;
  dsp::SamplePlayer *result = 0 ;
  
  SWIG_check_num_args("dsp::SamplePlayer::SamplePlayer",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("dsp::SamplePlayer::SamplePlayer",1,"dsp::Type");
  arg1 = (dsp::Type)(int)lua_tonumber(L, 1);
  result = (dsp::SamplePlayer *)new dsp::SamplePlayer(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_dsp__SamplePlayer,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_SamplePlayer__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  dsp::SamplePlayer *result = 0 ;
  
  SWIG_check_num_args("dsp::SamplePlayer::SamplePlayer",0,0)
  result = (dsp::SamplePlayer *)new dsp::SamplePlayer();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_dsp__SamplePlayer,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_SamplePlayer(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_SamplePlayer__SWIG_1(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_SamplePlayer__SWIG_0(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_SamplePlayer'\n"
    "  Possible C/C++ prototypes are:\n"
    "    dsp::SamplePlayer::SamplePlayer(dsp::Type)\n"
    "    dsp::SamplePlayer::SamplePlayer()\n");
  lua_error(L);return 0;
}


static int _wrap_SamplePlayer_getSamples(lua_State* L) {
  int SWIG_arg = 0;
  dsp::SamplePlayer *arg1 = (dsp::SamplePlayer *) 0 ;
  std::vector< std::shared_ptr< Buffer > > *result = 0 ;
  
  SWIG_check_num_args("dsp::SamplePlayer::getSamples",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("dsp::SamplePlayer::getSamples",1,"dsp::SamplePlayer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_dsp__SamplePlayer,0))){
    SWIG_fail_ptr("SamplePlayer_getSamples",1,SWIGTYPE_p_dsp__SamplePlayer);
  }
  
  result = (std::vector< std::shared_ptr< Buffer > > *) &(arg1)->getSamples();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_std__shared_ptrT_Buffer_t_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SamplePlayer_getSpeed(lua_State* L) {
  int SWIG_arg = 0;
  dsp::SamplePlayer *arg1 = (dsp::SamplePlayer *) 0 ;
  std::shared_ptr< Input > result;
  
  SWIG_check_num_args("dsp::SamplePlayer::getSpeed",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("dsp::SamplePlayer::getSpeed",1,"dsp::SamplePlayer const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_dsp__SamplePlayer,0))){
    SWIG_fail_ptr("SamplePlayer_getSpeed",1,SWIGTYPE_p_dsp__SamplePlayer);
  }
  
  result = ((dsp::SamplePlayer const *)arg1)->getSpeed();
  {
    std::shared_ptr< Input > * resultptr = new std::shared_ptr< Input >((const std::shared_ptr< Input > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__shared_ptrT_Input_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SamplePlayer_getStartTime(lua_State* L) {
  int SWIG_arg = 0;
  dsp::SamplePlayer *arg1 = (dsp::SamplePlayer *) 0 ;
  std::shared_ptr< Input > result;
  
  SWIG_check_num_args("dsp::SamplePlayer::getStartTime",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("dsp::SamplePlayer::getStartTime",1,"dsp::SamplePlayer const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_dsp__SamplePlayer,0))){
    SWIG_fail_ptr("SamplePlayer_getStartTime",1,SWIGTYPE_p_dsp__SamplePlayer);
  }
  
  result = ((dsp::SamplePlayer const *)arg1)->getStartTime();
  {
    std::shared_ptr< Input > * resultptr = new std::shared_ptr< Input >((const std::shared_ptr< Input > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__shared_ptrT_Input_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SamplePlayer_getSampleIndex(lua_State* L) {
  int SWIG_arg = 0;
  dsp::SamplePlayer *arg1 = (dsp::SamplePlayer *) 0 ;
  std::shared_ptr< Input > result;
  
  SWIG_check_num_args("dsp::SamplePlayer::getSampleIndex",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("dsp::SamplePlayer::getSampleIndex",1,"dsp::SamplePlayer const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_dsp__SamplePlayer,0))){
    SWIG_fail_ptr("SamplePlayer_getSampleIndex",1,SWIGTYPE_p_dsp__SamplePlayer);
  }
  
  result = ((dsp::SamplePlayer const *)arg1)->getSampleIndex();
  {
    std::shared_ptr< Input > * resultptr = new std::shared_ptr< Input >((const std::shared_ptr< Input > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__shared_ptrT_Input_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SamplePlayer_getInterpolation(lua_State* L) {
  int SWIG_arg = 0;
  dsp::SamplePlayer *arg1 = (dsp::SamplePlayer *) 0 ;
  std::shared_ptr< Input > result;
  
  SWIG_check_num_args("dsp::SamplePlayer::getInterpolation",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("dsp::SamplePlayer::getInterpolation",1,"dsp::SamplePlayer const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_dsp__SamplePlayer,0))){
    SWIG_fail_ptr("SamplePlayer_getInterpolation",1,SWIGTYPE_p_dsp__SamplePlayer);
  }
  
  result = ((dsp::SamplePlayer const *)arg1)->getInterpolation();
  {
    std::shared_ptr< Input > * resultptr = new std::shared_ptr< Input >((const std::shared_ptr< Input > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__shared_ptrT_Input_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SamplePlayer_getGate(lua_State* L) {
  int SWIG_arg = 0;
  dsp::SamplePlayer *arg1 = (dsp::SamplePlayer *) 0 ;
  std::shared_ptr< Input > result;
  
  SWIG_check_num_args("dsp::SamplePlayer::getGate",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("dsp::SamplePlayer::getGate",1,"dsp::SamplePlayer const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_dsp__SamplePlayer,0))){
    SWIG_fail_ptr("SamplePlayer_getGate",1,SWIGTYPE_p_dsp__SamplePlayer);
  }
  
  result = ((dsp::SamplePlayer const *)arg1)->getGate();
  {
    std::shared_ptr< Input > * resultptr = new std::shared_ptr< Input >((const std::shared_ptr< Input > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__shared_ptrT_Input_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SamplePlayer_getReset(lua_State* L) {
  int SWIG_arg = 0;
  dsp::SamplePlayer *arg1 = (dsp::SamplePlayer *) 0 ;
  std::shared_ptr< Input > result;
  
  SWIG_check_num_args("dsp::SamplePlayer::getReset",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("dsp::SamplePlayer::getReset",1,"dsp::SamplePlayer const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_dsp__SamplePlayer,0))){
    SWIG_fail_ptr("SamplePlayer_getReset",1,SWIGTYPE_p_dsp__SamplePlayer);
  }
  
  result = ((dsp::SamplePlayer const *)arg1)->getReset();
  {
    std::shared_ptr< Input > * resultptr = new std::shared_ptr< Input >((const std::shared_ptr< Input > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__shared_ptrT_Input_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SamplePlayer_getCurrentTime(lua_State* L) {
  int SWIG_arg = 0;
  dsp::SamplePlayer *arg1 = (dsp::SamplePlayer *) 0 ;
  std::shared_ptr< Output > result;
  
  SWIG_check_num_args("dsp::SamplePlayer::getCurrentTime",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("dsp::SamplePlayer::getCurrentTime",1,"dsp::SamplePlayer const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_dsp__SamplePlayer,0))){
    SWIG_fail_ptr("SamplePlayer_getCurrentTime",1,SWIGTYPE_p_dsp__SamplePlayer);
  }
  
  result = ((dsp::SamplePlayer const *)arg1)->getCurrentTime();
  {
    std::shared_ptr< Output > * resultptr = new std::shared_ptr< Output >((const std::shared_ptr< Output > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__shared_ptrT_Output_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_SamplePlayer(void *obj) {
dsp::SamplePlayer *arg1 = (dsp::SamplePlayer *) obj;
delete arg1;
}
static int _proxy__wrap_new_SamplePlayer(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_SamplePlayer);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_SamplePlayer_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_SamplePlayer_methods[]= {
    { "getSamples", _wrap_SamplePlayer_getSamples},
    { "getSpeed", _wrap_SamplePlayer_getSpeed},
    { "getStartTime", _wrap_SamplePlayer_getStartTime},
    { "getSampleIndex", _wrap_SamplePlayer_getSampleIndex},
    { "getInterpolation", _wrap_SamplePlayer_getInterpolation},
    { "getGate", _wrap_SamplePlayer_getGate},
    { "getReset", _wrap_SamplePlayer_getReset},
    { "getCurrentTime", _wrap_SamplePlayer_getCurrentTime},
    {0,0}
};
static swig_lua_method swig_SamplePlayer_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_SamplePlayer_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_SamplePlayer_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_SamplePlayer_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_SamplePlayer_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_SamplePlayer_Sf_SwigStatic = {
    "SamplePlayer",
    swig_SamplePlayer_Sf_SwigStatic_methods,
    swig_SamplePlayer_Sf_SwigStatic_attributes,
    swig_SamplePlayer_Sf_SwigStatic_constants,
    swig_SamplePlayer_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_SamplePlayer_bases[] = {0,0};
static const char *swig_SamplePlayer_base_names[] = {"dsp::Producer *",0};
static swig_lua_class _wrap_class_SamplePlayer = { "SamplePlayer", "SamplePlayer", &SWIGTYPE_p_dsp__SamplePlayer,_proxy__wrap_new_SamplePlayer, swig_delete_SamplePlayer, swig_SamplePlayer_methods, swig_SamplePlayer_attributes, &swig_SamplePlayer_Sf_SwigStatic, swig_SamplePlayer_meta, swig_SamplePlayer_bases, swig_SamplePlayer_base_names };

static int _wrap_new_TableOscillator__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  dsp::Type arg1 ;
  dsp::TableOscillator *result = 0 ;
  
  SWIG_check_num_args("dsp::TableOscillator::TableOscillator",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("dsp::TableOscillator::TableOscillator",1,"dsp::Type");
  arg1 = (dsp::Type)(int)lua_tonumber(L, 1);
  result = (dsp::TableOscillator *)new dsp::TableOscillator(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_dsp__TableOscillator,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_TableOscillator__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  dsp::TableOscillator *result = 0 ;
  
  SWIG_check_num_args("dsp::TableOscillator::TableOscillator",0,0)
  result = (dsp::TableOscillator *)new dsp::TableOscillator();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_dsp__TableOscillator,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_TableOscillator(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_TableOscillator__SWIG_1(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_TableOscillator__SWIG_0(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_TableOscillator'\n"
    "  Possible C/C++ prototypes are:\n"
    "    dsp::TableOscillator::TableOscillator(dsp::Type)\n"
    "    dsp::TableOscillator::TableOscillator()\n");
  lua_error(L);return 0;
}


static int _wrap_TableOscillator_getTables(lua_State* L) {
  int SWIG_arg = 0;
  dsp::TableOscillator *arg1 = (dsp::TableOscillator *) 0 ;
  std::vector< std::shared_ptr< Buffer > > *result = 0 ;
  
  SWIG_check_num_args("dsp::TableOscillator::getTables",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("dsp::TableOscillator::getTables",1,"dsp::TableOscillator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_dsp__TableOscillator,0))){
    SWIG_fail_ptr("TableOscillator_getTables",1,SWIGTYPE_p_dsp__TableOscillator);
  }
  
  result = (std::vector< std::shared_ptr< Buffer > > *) &(arg1)->getTables();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_std__shared_ptrT_Buffer_t_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TableOscillator_getPhase(lua_State* L) {
  int SWIG_arg = 0;
  dsp::TableOscillator *arg1 = (dsp::TableOscillator *) 0 ;
  std::shared_ptr< Input > result;
  
  SWIG_check_num_args("dsp::TableOscillator::getPhase",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("dsp::TableOscillator::getPhase",1,"dsp::TableOscillator const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_dsp__TableOscillator,0))){
    SWIG_fail_ptr("TableOscillator_getPhase",1,SWIGTYPE_p_dsp__TableOscillator);
  }
  
  result = ((dsp::TableOscillator const *)arg1)->getPhase();
  {
    std::shared_ptr< Input > * resultptr = new std::shared_ptr< Input >((const std::shared_ptr< Input > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__shared_ptrT_Input_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TableOscillator_getPosition(lua_State* L) {
  int SWIG_arg = 0;
  dsp::TableOscillator *arg1 = (dsp::TableOscillator *) 0 ;
  std::shared_ptr< Input > result;
  
  SWIG_check_num_args("dsp::TableOscillator::getPosition",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("dsp::TableOscillator::getPosition",1,"dsp::TableOscillator const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_dsp__TableOscillator,0))){
    SWIG_fail_ptr("TableOscillator_getPosition",1,SWIGTYPE_p_dsp__TableOscillator);
  }
  
  result = ((dsp::TableOscillator const *)arg1)->getPosition();
  {
    std::shared_ptr< Input > * resultptr = new std::shared_ptr< Input >((const std::shared_ptr< Input > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__shared_ptrT_Input_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TableOscillator_getPhaseInterpolation(lua_State* L) {
  int SWIG_arg = 0;
  dsp::TableOscillator *arg1 = (dsp::TableOscillator *) 0 ;
  std::shared_ptr< Input > result;
  
  SWIG_check_num_args("dsp::TableOscillator::getPhaseInterpolation",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("dsp::TableOscillator::getPhaseInterpolation",1,"dsp::TableOscillator const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_dsp__TableOscillator,0))){
    SWIG_fail_ptr("TableOscillator_getPhaseInterpolation",1,SWIGTYPE_p_dsp__TableOscillator);
  }
  
  result = ((dsp::TableOscillator const *)arg1)->getPhaseInterpolation();
  {
    std::shared_ptr< Input > * resultptr = new std::shared_ptr< Input >((const std::shared_ptr< Input > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__shared_ptrT_Input_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TableOscillator_getPositionInterpolation(lua_State* L) {
  int SWIG_arg = 0;
  dsp::TableOscillator *arg1 = (dsp::TableOscillator *) 0 ;
  std::shared_ptr< Input > result;
  
  SWIG_check_num_args("dsp::TableOscillator::getPositionInterpolation",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("dsp::TableOscillator::getPositionInterpolation",1,"dsp::TableOscillator const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_dsp__TableOscillator,0))){
    SWIG_fail_ptr("TableOscillator_getPositionInterpolation",1,SWIGTYPE_p_dsp__TableOscillator);
  }
  
  result = ((dsp::TableOscillator const *)arg1)->getPositionInterpolation();
  {
    std::shared_ptr< Input > * resultptr = new std::shared_ptr< Input >((const std::shared_ptr< Input > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__shared_ptrT_Input_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_TableOscillator(void *obj) {
dsp::TableOscillator *arg1 = (dsp::TableOscillator *) obj;
delete arg1;
}
static int _proxy__wrap_new_TableOscillator(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_TableOscillator);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_TableOscillator_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_TableOscillator_methods[]= {
    { "getTables", _wrap_TableOscillator_getTables},
    { "getPhase", _wrap_TableOscillator_getPhase},
    { "getPosition", _wrap_TableOscillator_getPosition},
    { "getPhaseInterpolation", _wrap_TableOscillator_getPhaseInterpolation},
    { "getPositionInterpolation", _wrap_TableOscillator_getPositionInterpolation},
    {0,0}
};
static swig_lua_method swig_TableOscillator_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_TableOscillator_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_TableOscillator_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_TableOscillator_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_TableOscillator_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_TableOscillator_Sf_SwigStatic = {
    "TableOscillator",
    swig_TableOscillator_Sf_SwigStatic_methods,
    swig_TableOscillator_Sf_SwigStatic_attributes,
    swig_TableOscillator_Sf_SwigStatic_constants,
    swig_TableOscillator_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_TableOscillator_bases[] = {0,0};
static const char *swig_TableOscillator_base_names[] = {"dsp::Producer *",0};
static swig_lua_class _wrap_class_TableOscillator = { "TableOscillator", "TableOscillator", &SWIGTYPE_p_dsp__TableOscillator,_proxy__wrap_new_TableOscillator, swig_delete_TableOscillator, swig_TableOscillator_methods, swig_TableOscillator_attributes, &swig_TableOscillator_Sf_SwigStatic, swig_TableOscillator_meta, swig_TableOscillator_bases, swig_TableOscillator_base_names };

static int _wrap_new_AbsoluteValue__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  dsp::Type arg1 ;
  dsp::Space arg2 ;
  dsp::AbsoluteValue *result = 0 ;
  
  SWIG_check_num_args("dsp::AbsoluteValue::AbsoluteValue",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("dsp::AbsoluteValue::AbsoluteValue",1,"dsp::Type");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("dsp::AbsoluteValue::AbsoluteValue",2,"dsp::Space");
  arg1 = (dsp::Type)(int)lua_tonumber(L, 1);
  arg2 = (dsp::Space)(int)lua_tonumber(L, 2);
  result = (dsp::AbsoluteValue *)new dsp::AbsoluteValue(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_dsp__AbsoluteValue,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_AbsoluteValue__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  dsp::Type arg1 ;
  dsp::AbsoluteValue *result = 0 ;
  
  SWIG_check_num_args("dsp::AbsoluteValue::AbsoluteValue",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("dsp::AbsoluteValue::AbsoluteValue",1,"dsp::Type");
  arg1 = (dsp::Type)(int)lua_tonumber(L, 1);
  result = (dsp::AbsoluteValue *)new dsp::AbsoluteValue(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_dsp__AbsoluteValue,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_AbsoluteValue__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  dsp::AbsoluteValue *result = 0 ;
  
  SWIG_check_num_args("dsp::AbsoluteValue::AbsoluteValue",0,0)
  result = (dsp::AbsoluteValue *)new dsp::AbsoluteValue();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_dsp__AbsoluteValue,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_AbsoluteValue(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_AbsoluteValue__SWIG_2(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_AbsoluteValue__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_AbsoluteValue__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_AbsoluteValue'\n"
    "  Possible C/C++ prototypes are:\n"
    "    dsp::AbsoluteValue::AbsoluteValue(dsp::Type,dsp::Space)\n"
    "    dsp::AbsoluteValue::AbsoluteValue(dsp::Type)\n"
    "    dsp::AbsoluteValue::AbsoluteValue()\n");
  lua_error(L);return 0;
}


static void swig_delete_AbsoluteValue(void *obj) {
dsp::AbsoluteValue *arg1 = (dsp::AbsoluteValue *) obj;
delete arg1;
}
static int _proxy__wrap_new_AbsoluteValue(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_AbsoluteValue);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_AbsoluteValue_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_AbsoluteValue_methods[]= {
    {0,0}
};
static swig_lua_method swig_AbsoluteValue_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_AbsoluteValue_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_AbsoluteValue_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_AbsoluteValue_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_AbsoluteValue_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_AbsoluteValue_Sf_SwigStatic = {
    "AbsoluteValue",
    swig_AbsoluteValue_Sf_SwigStatic_methods,
    swig_AbsoluteValue_Sf_SwigStatic_attributes,
    swig_AbsoluteValue_Sf_SwigStatic_constants,
    swig_AbsoluteValue_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_AbsoluteValue_bases[] = {0,0};
static const char *swig_AbsoluteValue_base_names[] = {"dsp::Transformer *",0};
static swig_lua_class _wrap_class_AbsoluteValue = { "AbsoluteValue", "AbsoluteValue", &SWIGTYPE_p_dsp__AbsoluteValue,_proxy__wrap_new_AbsoluteValue, swig_delete_AbsoluteValue, swig_AbsoluteValue_methods, swig_AbsoluteValue_attributes, &swig_AbsoluteValue_Sf_SwigStatic, swig_AbsoluteValue_meta, swig_AbsoluteValue_bases, swig_AbsoluteValue_base_names };

static int _wrap_new_BooleanMask__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  dsp::Type arg1 ;
  dsp::Space arg2 ;
  dsp::BooleanMask *result = 0 ;
  
  SWIG_check_num_args("dsp::BooleanMask::BooleanMask",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("dsp::BooleanMask::BooleanMask",1,"dsp::Type");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("dsp::BooleanMask::BooleanMask",2,"dsp::Space");
  arg1 = (dsp::Type)(int)lua_tonumber(L, 1);
  arg2 = (dsp::Space)(int)lua_tonumber(L, 2);
  result = (dsp::BooleanMask *)new dsp::BooleanMask(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_dsp__BooleanMask,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_BooleanMask__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  dsp::Type arg1 ;
  dsp::BooleanMask *result = 0 ;
  
  SWIG_check_num_args("dsp::BooleanMask::BooleanMask",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("dsp::BooleanMask::BooleanMask",1,"dsp::Type");
  arg1 = (dsp::Type)(int)lua_tonumber(L, 1);
  result = (dsp::BooleanMask *)new dsp::BooleanMask(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_dsp__BooleanMask,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_BooleanMask__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  dsp::BooleanMask *result = 0 ;
  
  SWIG_check_num_args("dsp::BooleanMask::BooleanMask",0,0)
  result = (dsp::BooleanMask *)new dsp::BooleanMask();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_dsp__BooleanMask,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_BooleanMask(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_BooleanMask__SWIG_2(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_BooleanMask__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_BooleanMask__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_BooleanMask'\n"
    "  Possible C/C++ prototypes are:\n"
    "    dsp::BooleanMask::BooleanMask(dsp::Type,dsp::Space)\n"
    "    dsp::BooleanMask::BooleanMask(dsp::Type)\n"
    "    dsp::BooleanMask::BooleanMask()\n");
  lua_error(L);return 0;
}


static int _wrap_BooleanMask_getMask(lua_State* L) {
  int SWIG_arg = 0;
  dsp::BooleanMask *arg1 = (dsp::BooleanMask *) 0 ;
  std::shared_ptr< Input > result;
  
  SWIG_check_num_args("dsp::BooleanMask::getMask",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("dsp::BooleanMask::getMask",1,"dsp::BooleanMask const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_dsp__BooleanMask,0))){
    SWIG_fail_ptr("BooleanMask_getMask",1,SWIGTYPE_p_dsp__BooleanMask);
  }
  
  result = ((dsp::BooleanMask const *)arg1)->getMask();
  {
    std::shared_ptr< Input > * resultptr = new std::shared_ptr< Input >((const std::shared_ptr< Input > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__shared_ptrT_Input_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_BooleanMask(void *obj) {
dsp::BooleanMask *arg1 = (dsp::BooleanMask *) obj;
delete arg1;
}
static int _proxy__wrap_new_BooleanMask(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_BooleanMask);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_BooleanMask_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_BooleanMask_methods[]= {
    { "getMask", _wrap_BooleanMask_getMask},
    {0,0}
};
static swig_lua_method swig_BooleanMask_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_BooleanMask_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_BooleanMask_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_BooleanMask_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_BooleanMask_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_BooleanMask_Sf_SwigStatic = {
    "BooleanMask",
    swig_BooleanMask_Sf_SwigStatic_methods,
    swig_BooleanMask_Sf_SwigStatic_attributes,
    swig_BooleanMask_Sf_SwigStatic_constants,
    swig_BooleanMask_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_BooleanMask_bases[] = {0,0};
static const char *swig_BooleanMask_base_names[] = {"dsp::Transformer *",0};
static swig_lua_class _wrap_class_BooleanMask = { "BooleanMask", "BooleanMask", &SWIGTYPE_p_dsp__BooleanMask,_proxy__wrap_new_BooleanMask, swig_delete_BooleanMask, swig_BooleanMask_methods, swig_BooleanMask_attributes, &swig_BooleanMask_Sf_SwigStatic, swig_BooleanMask_meta, swig_BooleanMask_bases, swig_BooleanMask_base_names };

static int _wrap_new_Comparison__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  dsp::Type arg1 ;
  dsp::Space arg2 ;
  dsp::Comparison *result = 0 ;
  
  SWIG_check_num_args("dsp::Comparison::Comparison",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("dsp::Comparison::Comparison",1,"dsp::Type");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("dsp::Comparison::Comparison",2,"dsp::Space");
  arg1 = (dsp::Type)(int)lua_tonumber(L, 1);
  arg2 = (dsp::Space)(int)lua_tonumber(L, 2);
  result = (dsp::Comparison *)new dsp::Comparison(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_dsp__Comparison,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Comparison__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  dsp::Type arg1 ;
  dsp::Comparison *result = 0 ;
  
  SWIG_check_num_args("dsp::Comparison::Comparison",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("dsp::Comparison::Comparison",1,"dsp::Type");
  arg1 = (dsp::Type)(int)lua_tonumber(L, 1);
  result = (dsp::Comparison *)new dsp::Comparison(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_dsp__Comparison,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Comparison__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  dsp::Comparison *result = 0 ;
  
  SWIG_check_num_args("dsp::Comparison::Comparison",0,0)
  result = (dsp::Comparison *)new dsp::Comparison();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_dsp__Comparison,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Comparison(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_Comparison__SWIG_2(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_Comparison__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_Comparison__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_Comparison'\n"
    "  Possible C/C++ prototypes are:\n"
    "    dsp::Comparison::Comparison(dsp::Type,dsp::Space)\n"
    "    dsp::Comparison::Comparison(dsp::Type)\n"
    "    dsp::Comparison::Comparison()\n");
  lua_error(L);return 0;
}


static int _wrap_Comparison_getThreshold(lua_State* L) {
  int SWIG_arg = 0;
  dsp::Comparison *arg1 = (dsp::Comparison *) 0 ;
  std::shared_ptr< Input > result;
  
  SWIG_check_num_args("dsp::Comparison::getThreshold",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("dsp::Comparison::getThreshold",1,"dsp::Comparison const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_dsp__Comparison,0))){
    SWIG_fail_ptr("Comparison_getThreshold",1,SWIGTYPE_p_dsp__Comparison);
  }
  
  result = ((dsp::Comparison const *)arg1)->getThreshold();
  {
    std::shared_ptr< Input > * resultptr = new std::shared_ptr< Input >((const std::shared_ptr< Input > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__shared_ptrT_Input_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Comparison(void *obj) {
dsp::Comparison *arg1 = (dsp::Comparison *) obj;
delete arg1;
}
static int _proxy__wrap_new_Comparison(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Comparison);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Comparison_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Comparison_methods[]= {
    { "getThreshold", _wrap_Comparison_getThreshold},
    {0,0}
};
static swig_lua_method swig_Comparison_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Comparison_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Comparison_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Comparison_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Comparison_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Comparison_Sf_SwigStatic = {
    "Comparison",
    swig_Comparison_Sf_SwigStatic_methods,
    swig_Comparison_Sf_SwigStatic_attributes,
    swig_Comparison_Sf_SwigStatic_constants,
    swig_Comparison_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Comparison_bases[] = {0,0};
static const char *swig_Comparison_base_names[] = {"dsp::Transformer *",0};
static swig_lua_class _wrap_class_Comparison = { "Comparison", "Comparison", &SWIGTYPE_p_dsp__Comparison,_proxy__wrap_new_Comparison, swig_delete_Comparison, swig_Comparison_methods, swig_Comparison_attributes, &swig_Comparison_Sf_SwigStatic, swig_Comparison_meta, swig_Comparison_bases, swig_Comparison_base_names };

static int _wrap_new_Division__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  dsp::Type arg1 ;
  dsp::Space arg2 ;
  dsp::Division *result = 0 ;
  
  SWIG_check_num_args("dsp::Division::Division",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("dsp::Division::Division",1,"dsp::Type");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("dsp::Division::Division",2,"dsp::Space");
  arg1 = (dsp::Type)(int)lua_tonumber(L, 1);
  arg2 = (dsp::Space)(int)lua_tonumber(L, 2);
  result = (dsp::Division *)new dsp::Division(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_dsp__Division,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Division__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  dsp::Type arg1 ;
  dsp::Division *result = 0 ;
  
  SWIG_check_num_args("dsp::Division::Division",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("dsp::Division::Division",1,"dsp::Type");
  arg1 = (dsp::Type)(int)lua_tonumber(L, 1);
  result = (dsp::Division *)new dsp::Division(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_dsp__Division,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Division__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  dsp::Division *result = 0 ;
  
  SWIG_check_num_args("dsp::Division::Division",0,0)
  result = (dsp::Division *)new dsp::Division();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_dsp__Division,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Division(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_Division__SWIG_2(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_Division__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_Division__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_Division'\n"
    "  Possible C/C++ prototypes are:\n"
    "    dsp::Division::Division(dsp::Type,dsp::Space)\n"
    "    dsp::Division::Division(dsp::Type)\n"
    "    dsp::Division::Division()\n");
  lua_error(L);return 0;
}


static int _wrap_Division_getDivisor(lua_State* L) {
  int SWIG_arg = 0;
  dsp::Division *arg1 = (dsp::Division *) 0 ;
  std::shared_ptr< Input > result;
  
  SWIG_check_num_args("dsp::Division::getDivisor",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("dsp::Division::getDivisor",1,"dsp::Division const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_dsp__Division,0))){
    SWIG_fail_ptr("Division_getDivisor",1,SWIGTYPE_p_dsp__Division);
  }
  
  result = ((dsp::Division const *)arg1)->getDivisor();
  {
    std::shared_ptr< Input > * resultptr = new std::shared_ptr< Input >((const std::shared_ptr< Input > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__shared_ptrT_Input_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Division(void *obj) {
dsp::Division *arg1 = (dsp::Division *) obj;
delete arg1;
}
static int _proxy__wrap_new_Division(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Division);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Division_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Division_methods[]= {
    { "getDivisor", _wrap_Division_getDivisor},
    {0,0}
};
static swig_lua_method swig_Division_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Division_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Division_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Division_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Division_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Division_Sf_SwigStatic = {
    "Division",
    swig_Division_Sf_SwigStatic_methods,
    swig_Division_Sf_SwigStatic_attributes,
    swig_Division_Sf_SwigStatic_constants,
    swig_Division_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Division_bases[] = {0,0};
static const char *swig_Division_base_names[] = {"dsp::Transformer *",0};
static swig_lua_class _wrap_class_Division = { "Division", "Division", &SWIGTYPE_p_dsp__Division,_proxy__wrap_new_Division, swig_delete_Division, swig_Division_methods, swig_Division_attributes, &swig_Division_Sf_SwigStatic, swig_Division_meta, swig_Division_bases, swig_Division_base_names };

static int _wrap_new_Floor__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  dsp::Type arg1 ;
  dsp::Space arg2 ;
  dsp::Floor *result = 0 ;
  
  SWIG_check_num_args("dsp::Floor::Floor",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("dsp::Floor::Floor",1,"dsp::Type");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("dsp::Floor::Floor",2,"dsp::Space");
  arg1 = (dsp::Type)(int)lua_tonumber(L, 1);
  arg2 = (dsp::Space)(int)lua_tonumber(L, 2);
  result = (dsp::Floor *)new dsp::Floor(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_dsp__Floor,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Floor__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  dsp::Type arg1 ;
  dsp::Floor *result = 0 ;
  
  SWIG_check_num_args("dsp::Floor::Floor",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("dsp::Floor::Floor",1,"dsp::Type");
  arg1 = (dsp::Type)(int)lua_tonumber(L, 1);
  result = (dsp::Floor *)new dsp::Floor(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_dsp__Floor,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Floor__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  dsp::Floor *result = 0 ;
  
  SWIG_check_num_args("dsp::Floor::Floor",0,0)
  result = (dsp::Floor *)new dsp::Floor();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_dsp__Floor,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Floor(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_Floor__SWIG_2(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_Floor__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_Floor__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_Floor'\n"
    "  Possible C/C++ prototypes are:\n"
    "    dsp::Floor::Floor(dsp::Type,dsp::Space)\n"
    "    dsp::Floor::Floor(dsp::Type)\n"
    "    dsp::Floor::Floor()\n");
  lua_error(L);return 0;
}


static int _wrap_Floor_getDivisor(lua_State* L) {
  int SWIG_arg = 0;
  dsp::Floor *arg1 = (dsp::Floor *) 0 ;
  std::shared_ptr< Input > result;
  
  SWIG_check_num_args("dsp::Floor::getDivisor",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("dsp::Floor::getDivisor",1,"dsp::Floor const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_dsp__Floor,0))){
    SWIG_fail_ptr("Floor_getDivisor",1,SWIGTYPE_p_dsp__Floor);
  }
  
  result = ((dsp::Floor const *)arg1)->getDivisor();
  {
    std::shared_ptr< Input > * resultptr = new std::shared_ptr< Input >((const std::shared_ptr< Input > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__shared_ptrT_Input_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Floor(void *obj) {
dsp::Floor *arg1 = (dsp::Floor *) obj;
delete arg1;
}
static int _proxy__wrap_new_Floor(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Floor);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Floor_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Floor_methods[]= {
    { "getDivisor", _wrap_Floor_getDivisor},
    {0,0}
};
static swig_lua_method swig_Floor_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Floor_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Floor_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Floor_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Floor_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Floor_Sf_SwigStatic = {
    "Floor",
    swig_Floor_Sf_SwigStatic_methods,
    swig_Floor_Sf_SwigStatic_attributes,
    swig_Floor_Sf_SwigStatic_constants,
    swig_Floor_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Floor_bases[] = {0,0};
static const char *swig_Floor_base_names[] = {"dsp::Transformer *",0};
static swig_lua_class _wrap_class_Floor = { "Floor", "Floor", &SWIGTYPE_p_dsp__Floor,_proxy__wrap_new_Floor, swig_delete_Floor, swig_Floor_methods, swig_Floor_attributes, &swig_Floor_Sf_SwigStatic, swig_Floor_meta, swig_Floor_bases, swig_Floor_base_names };

static int _wrap_new_ForwardFFT(lua_State* L) {
  int SWIG_arg = 0;
  dsp::ForwardFFT *result = 0 ;
  
  SWIG_check_num_args("dsp::ForwardFFT::ForwardFFT",0,0)
  result = (dsp::ForwardFFT *)new dsp::ForwardFFT();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_dsp__ForwardFFT,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ForwardFFT_getMagnitude(lua_State* L) {
  int SWIG_arg = 0;
  dsp::ForwardFFT *arg1 = (dsp::ForwardFFT *) 0 ;
  std::shared_ptr< Output > result;
  
  SWIG_check_num_args("dsp::ForwardFFT::getMagnitude",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("dsp::ForwardFFT::getMagnitude",1,"dsp::ForwardFFT const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_dsp__ForwardFFT,0))){
    SWIG_fail_ptr("ForwardFFT_getMagnitude",1,SWIGTYPE_p_dsp__ForwardFFT);
  }
  
  result = ((dsp::ForwardFFT const *)arg1)->getMagnitude();
  {
    std::shared_ptr< Output > * resultptr = new std::shared_ptr< Output >((const std::shared_ptr< Output > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__shared_ptrT_Output_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ForwardFFT_getPhase(lua_State* L) {
  int SWIG_arg = 0;
  dsp::ForwardFFT *arg1 = (dsp::ForwardFFT *) 0 ;
  std::shared_ptr< Output > result;
  
  SWIG_check_num_args("dsp::ForwardFFT::getPhase",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("dsp::ForwardFFT::getPhase",1,"dsp::ForwardFFT const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_dsp__ForwardFFT,0))){
    SWIG_fail_ptr("ForwardFFT_getPhase",1,SWIGTYPE_p_dsp__ForwardFFT);
  }
  
  result = ((dsp::ForwardFFT const *)arg1)->getPhase();
  {
    std::shared_ptr< Output > * resultptr = new std::shared_ptr< Output >((const std::shared_ptr< Output > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__shared_ptrT_Output_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ForwardFFT(void *obj) {
dsp::ForwardFFT *arg1 = (dsp::ForwardFFT *) obj;
delete arg1;
}
static int _proxy__wrap_new_ForwardFFT(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ForwardFFT);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ForwardFFT_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ForwardFFT_methods[]= {
    { "getMagnitude", _wrap_ForwardFFT_getMagnitude},
    { "getPhase", _wrap_ForwardFFT_getPhase},
    {0,0}
};
static swig_lua_method swig_ForwardFFT_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ForwardFFT_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ForwardFFT_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ForwardFFT_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ForwardFFT_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ForwardFFT_Sf_SwigStatic = {
    "ForwardFFT",
    swig_ForwardFFT_Sf_SwigStatic_methods,
    swig_ForwardFFT_Sf_SwigStatic_attributes,
    swig_ForwardFFT_Sf_SwigStatic_constants,
    swig_ForwardFFT_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ForwardFFT_bases[] = {0,0};
static const char *swig_ForwardFFT_base_names[] = {"dsp::Consumer *",0};
static swig_lua_class _wrap_class_ForwardFFT = { "ForwardFFT", "ForwardFFT", &SWIGTYPE_p_dsp__ForwardFFT,_proxy__wrap_new_ForwardFFT, swig_delete_ForwardFFT, swig_ForwardFFT_methods, swig_ForwardFFT_attributes, &swig_ForwardFFT_Sf_SwigStatic, swig_ForwardFFT_meta, swig_ForwardFFT_bases, swig_ForwardFFT_base_names };

static int _wrap_new_FrequencyToNote__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  dsp::Space arg1 ;
  dsp::FrequencyToNote *result = 0 ;
  
  SWIG_check_num_args("dsp::FrequencyToNote::FrequencyToNote",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("dsp::FrequencyToNote::FrequencyToNote",1,"dsp::Space");
  arg1 = (dsp::Space)(int)lua_tonumber(L, 1);
  result = (dsp::FrequencyToNote *)new dsp::FrequencyToNote(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_dsp__FrequencyToNote,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FrequencyToNote__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  dsp::FrequencyToNote *result = 0 ;
  
  SWIG_check_num_args("dsp::FrequencyToNote::FrequencyToNote",0,0)
  result = (dsp::FrequencyToNote *)new dsp::FrequencyToNote();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_dsp__FrequencyToNote,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FrequencyToNote(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_FrequencyToNote__SWIG_1(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_FrequencyToNote__SWIG_0(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_FrequencyToNote'\n"
    "  Possible C/C++ prototypes are:\n"
    "    dsp::FrequencyToNote::FrequencyToNote(dsp::Space)\n"
    "    dsp::FrequencyToNote::FrequencyToNote()\n");
  lua_error(L);return 0;
}


static int _wrap_FrequencyToNote_getTuningFrequency(lua_State* L) {
  int SWIG_arg = 0;
  dsp::FrequencyToNote *arg1 = (dsp::FrequencyToNote *) 0 ;
  std::shared_ptr< Input > result;
  
  SWIG_check_num_args("dsp::FrequencyToNote::getTuningFrequency",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("dsp::FrequencyToNote::getTuningFrequency",1,"dsp::FrequencyToNote const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_dsp__FrequencyToNote,0))){
    SWIG_fail_ptr("FrequencyToNote_getTuningFrequency",1,SWIGTYPE_p_dsp__FrequencyToNote);
  }
  
  result = ((dsp::FrequencyToNote const *)arg1)->getTuningFrequency();
  {
    std::shared_ptr< Input > * resultptr = new std::shared_ptr< Input >((const std::shared_ptr< Input > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__shared_ptrT_Input_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_FrequencyToNote(void *obj) {
dsp::FrequencyToNote *arg1 = (dsp::FrequencyToNote *) obj;
delete arg1;
}
static int _proxy__wrap_new_FrequencyToNote(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_FrequencyToNote);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_FrequencyToNote_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_FrequencyToNote_methods[]= {
    { "getTuningFrequency", _wrap_FrequencyToNote_getTuningFrequency},
    {0,0}
};
static swig_lua_method swig_FrequencyToNote_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_FrequencyToNote_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_FrequencyToNote_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_FrequencyToNote_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_FrequencyToNote_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_FrequencyToNote_Sf_SwigStatic = {
    "FrequencyToNote",
    swig_FrequencyToNote_Sf_SwigStatic_methods,
    swig_FrequencyToNote_Sf_SwigStatic_attributes,
    swig_FrequencyToNote_Sf_SwigStatic_constants,
    swig_FrequencyToNote_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_FrequencyToNote_bases[] = {0,0};
static const char *swig_FrequencyToNote_base_names[] = {"dsp::Transformer *",0};
static swig_lua_class _wrap_class_FrequencyToNote = { "FrequencyToNote", "FrequencyToNote", &SWIGTYPE_p_dsp__FrequencyToNote,_proxy__wrap_new_FrequencyToNote, swig_delete_FrequencyToNote, swig_FrequencyToNote_methods, swig_FrequencyToNote_attributes, &swig_FrequencyToNote_Sf_SwigStatic, swig_FrequencyToNote_meta, swig_FrequencyToNote_bases, swig_FrequencyToNote_base_names };

static int _wrap_new_Hyperbolic__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  dsp::Space arg1 ;
  dsp::Hyperbolic *result = 0 ;
  
  SWIG_check_num_args("dsp::Hyperbolic::Hyperbolic",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("dsp::Hyperbolic::Hyperbolic",1,"dsp::Space");
  arg1 = (dsp::Space)(int)lua_tonumber(L, 1);
  result = (dsp::Hyperbolic *)new dsp::Hyperbolic(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_dsp__Hyperbolic,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Hyperbolic__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  dsp::Hyperbolic *result = 0 ;
  
  SWIG_check_num_args("dsp::Hyperbolic::Hyperbolic",0,0)
  result = (dsp::Hyperbolic *)new dsp::Hyperbolic();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_dsp__Hyperbolic,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Hyperbolic(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_Hyperbolic__SWIG_1(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_Hyperbolic__SWIG_0(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_Hyperbolic'\n"
    "  Possible C/C++ prototypes are:\n"
    "    dsp::Hyperbolic::Hyperbolic(dsp::Space)\n"
    "    dsp::Hyperbolic::Hyperbolic()\n");
  lua_error(L);return 0;
}


static int _wrap_Hyperbolic_getMode(lua_State* L) {
  int SWIG_arg = 0;
  dsp::Hyperbolic *arg1 = (dsp::Hyperbolic *) 0 ;
  std::shared_ptr< Input > result;
  
  SWIG_check_num_args("dsp::Hyperbolic::getMode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("dsp::Hyperbolic::getMode",1,"dsp::Hyperbolic const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_dsp__Hyperbolic,0))){
    SWIG_fail_ptr("Hyperbolic_getMode",1,SWIGTYPE_p_dsp__Hyperbolic);
  }
  
  result = ((dsp::Hyperbolic const *)arg1)->getMode();
  {
    std::shared_ptr< Input > * resultptr = new std::shared_ptr< Input >((const std::shared_ptr< Input > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__shared_ptrT_Input_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Hyperbolic(void *obj) {
dsp::Hyperbolic *arg1 = (dsp::Hyperbolic *) obj;
delete arg1;
}
static int _proxy__wrap_new_Hyperbolic(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Hyperbolic);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Hyperbolic_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Hyperbolic_methods[]= {
    { "getMode", _wrap_Hyperbolic_getMode},
    {0,0}
};
static swig_lua_method swig_Hyperbolic_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Hyperbolic_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Hyperbolic_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Hyperbolic_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Hyperbolic_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Hyperbolic_Sf_SwigStatic = {
    "Hyperbolic",
    swig_Hyperbolic_Sf_SwigStatic_methods,
    swig_Hyperbolic_Sf_SwigStatic_attributes,
    swig_Hyperbolic_Sf_SwigStatic_constants,
    swig_Hyperbolic_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Hyperbolic_bases[] = {0,0};
static const char *swig_Hyperbolic_base_names[] = {"dsp::Transformer *",0};
static swig_lua_class _wrap_class_Hyperbolic = { "Hyperbolic", "Hyperbolic", &SWIGTYPE_p_dsp__Hyperbolic,_proxy__wrap_new_Hyperbolic, swig_delete_Hyperbolic, swig_Hyperbolic_methods, swig_Hyperbolic_attributes, &swig_Hyperbolic_Sf_SwigStatic, swig_Hyperbolic_meta, swig_Hyperbolic_bases, swig_Hyperbolic_base_names };

static int _wrap_new_Identity__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  dsp::Type arg1 ;
  dsp::Space arg2 ;
  dsp::Identity *result = 0 ;
  
  SWIG_check_num_args("dsp::Identity::Identity",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("dsp::Identity::Identity",1,"dsp::Type");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("dsp::Identity::Identity",2,"dsp::Space");
  arg1 = (dsp::Type)(int)lua_tonumber(L, 1);
  arg2 = (dsp::Space)(int)lua_tonumber(L, 2);
  result = (dsp::Identity *)new dsp::Identity(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_dsp__Identity,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Identity__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  dsp::Type arg1 ;
  dsp::Identity *result = 0 ;
  
  SWIG_check_num_args("dsp::Identity::Identity",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("dsp::Identity::Identity",1,"dsp::Type");
  arg1 = (dsp::Type)(int)lua_tonumber(L, 1);
  result = (dsp::Identity *)new dsp::Identity(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_dsp__Identity,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Identity__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  dsp::Identity *result = 0 ;
  
  SWIG_check_num_args("dsp::Identity::Identity",0,0)
  result = (dsp::Identity *)new dsp::Identity();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_dsp__Identity,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Identity__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  dsp::Type arg1 ;
  dsp::Type arg2 ;
  dsp::Space arg3 ;
  dsp::Identity *result = 0 ;
  
  SWIG_check_num_args("dsp::Identity::Identity",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("dsp::Identity::Identity",1,"dsp::Type");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("dsp::Identity::Identity",2,"dsp::Type");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("dsp::Identity::Identity",3,"dsp::Space");
  arg1 = (dsp::Type)(int)lua_tonumber(L, 1);
  arg2 = (dsp::Type)(int)lua_tonumber(L, 2);
  arg3 = (dsp::Space)(int)lua_tonumber(L, 3);
  result = (dsp::Identity *)new dsp::Identity(arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_dsp__Identity,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Identity__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  dsp::Type arg1 ;
  dsp::Type arg2 ;
  dsp::Identity *result = 0 ;
  
  SWIG_check_num_args("dsp::Identity::Identity",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("dsp::Identity::Identity",1,"dsp::Type");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("dsp::Identity::Identity",2,"dsp::Type");
  arg1 = (dsp::Type)(int)lua_tonumber(L, 1);
  arg2 = (dsp::Type)(int)lua_tonumber(L, 2);
  result = (dsp::Identity *)new dsp::Identity(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_dsp__Identity,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Identity__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  dsp::Type arg1 ;
  dsp::Type arg2 ;
  dsp::Space arg3 ;
  dsp::Space arg4 ;
  dsp::Identity *result = 0 ;
  
  SWIG_check_num_args("dsp::Identity::Identity",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("dsp::Identity::Identity",1,"dsp::Type");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("dsp::Identity::Identity",2,"dsp::Type");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("dsp::Identity::Identity",3,"dsp::Space");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("dsp::Identity::Identity",4,"dsp::Space");
  arg1 = (dsp::Type)(int)lua_tonumber(L, 1);
  arg2 = (dsp::Type)(int)lua_tonumber(L, 2);
  arg3 = (dsp::Space)(int)lua_tonumber(L, 3);
  arg4 = (dsp::Space)(int)lua_tonumber(L, 4);
  result = (dsp::Identity *)new dsp::Identity(arg1,arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_dsp__Identity,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Identity(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_Identity__SWIG_2(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_Identity__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_Identity__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_Identity__SWIG_4(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_new_Identity__SWIG_3(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_Identity__SWIG_5(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_Identity'\n"
    "  Possible C/C++ prototypes are:\n"
    "    dsp::Identity::Identity(dsp::Type,dsp::Space)\n"
    "    dsp::Identity::Identity(dsp::Type)\n"
    "    dsp::Identity::Identity()\n"
    "    dsp::Identity::Identity(dsp::Type,dsp::Type,dsp::Space)\n"
    "    dsp::Identity::Identity(dsp::Type,dsp::Type)\n"
    "    dsp::Identity::Identity(dsp::Type,dsp::Type,dsp::Space,dsp::Space)\n");
  lua_error(L);return 0;
}


static void swig_delete_Identity(void *obj) {
dsp::Identity *arg1 = (dsp::Identity *) obj;
delete arg1;
}
static int _proxy__wrap_new_Identity(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Identity);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Identity_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Identity_methods[]= {
    {0,0}
};
static swig_lua_method swig_Identity_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Identity_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Identity_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Identity_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Identity_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Identity_Sf_SwigStatic = {
    "Identity",
    swig_Identity_Sf_SwigStatic_methods,
    swig_Identity_Sf_SwigStatic_attributes,
    swig_Identity_Sf_SwigStatic_constants,
    swig_Identity_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Identity_bases[] = {0,0};
static const char *swig_Identity_base_names[] = {"dsp::Transformer *",0};
static swig_lua_class _wrap_class_Identity = { "Identity", "Identity", &SWIGTYPE_p_dsp__Identity,_proxy__wrap_new_Identity, swig_delete_Identity, swig_Identity_methods, swig_Identity_attributes, &swig_Identity_Sf_SwigStatic, swig_Identity_meta, swig_Identity_bases, swig_Identity_base_names };

static int _wrap_new_InverseFFT(lua_State* L) {
  int SWIG_arg = 0;
  dsp::InverseFFT *result = 0 ;
  
  SWIG_check_num_args("dsp::InverseFFT::InverseFFT",0,0)
  result = (dsp::InverseFFT *)new dsp::InverseFFT();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_dsp__InverseFFT,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_InverseFFT_getMagnitude(lua_State* L) {
  int SWIG_arg = 0;
  dsp::InverseFFT *arg1 = (dsp::InverseFFT *) 0 ;
  std::shared_ptr< Input > result;
  
  SWIG_check_num_args("dsp::InverseFFT::getMagnitude",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("dsp::InverseFFT::getMagnitude",1,"dsp::InverseFFT const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_dsp__InverseFFT,0))){
    SWIG_fail_ptr("InverseFFT_getMagnitude",1,SWIGTYPE_p_dsp__InverseFFT);
  }
  
  result = ((dsp::InverseFFT const *)arg1)->getMagnitude();
  {
    std::shared_ptr< Input > * resultptr = new std::shared_ptr< Input >((const std::shared_ptr< Input > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__shared_ptrT_Input_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_InverseFFT_getPhase(lua_State* L) {
  int SWIG_arg = 0;
  dsp::InverseFFT *arg1 = (dsp::InverseFFT *) 0 ;
  std::shared_ptr< Input > result;
  
  SWIG_check_num_args("dsp::InverseFFT::getPhase",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("dsp::InverseFFT::getPhase",1,"dsp::InverseFFT const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_dsp__InverseFFT,0))){
    SWIG_fail_ptr("InverseFFT_getPhase",1,SWIGTYPE_p_dsp__InverseFFT);
  }
  
  result = ((dsp::InverseFFT const *)arg1)->getPhase();
  {
    std::shared_ptr< Input > * resultptr = new std::shared_ptr< Input >((const std::shared_ptr< Input > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__shared_ptrT_Input_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_InverseFFT(void *obj) {
dsp::InverseFFT *arg1 = (dsp::InverseFFT *) obj;
delete arg1;
}
static int _proxy__wrap_new_InverseFFT(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_InverseFFT);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_InverseFFT_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_InverseFFT_methods[]= {
    { "getMagnitude", _wrap_InverseFFT_getMagnitude},
    { "getPhase", _wrap_InverseFFT_getPhase},
    {0,0}
};
static swig_lua_method swig_InverseFFT_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_InverseFFT_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_InverseFFT_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_InverseFFT_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_InverseFFT_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_InverseFFT_Sf_SwigStatic = {
    "InverseFFT",
    swig_InverseFFT_Sf_SwigStatic_methods,
    swig_InverseFFT_Sf_SwigStatic_attributes,
    swig_InverseFFT_Sf_SwigStatic_constants,
    swig_InverseFFT_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_InverseFFT_bases[] = {0,0};
static const char *swig_InverseFFT_base_names[] = {"dsp::Producer *",0};
static swig_lua_class _wrap_class_InverseFFT = { "InverseFFT", "InverseFFT", &SWIGTYPE_p_dsp__InverseFFT,_proxy__wrap_new_InverseFFT, swig_delete_InverseFFT, swig_InverseFFT_methods, swig_InverseFFT_attributes, &swig_InverseFFT_Sf_SwigStatic, swig_InverseFFT_meta, swig_InverseFFT_bases, swig_InverseFFT_base_names };

static int _wrap_new_Logarithm__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  dsp::Space arg1 ;
  dsp::Logarithm *result = 0 ;
  
  SWIG_check_num_args("dsp::Logarithm::Logarithm",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("dsp::Logarithm::Logarithm",1,"dsp::Space");
  arg1 = (dsp::Space)(int)lua_tonumber(L, 1);
  result = (dsp::Logarithm *)new dsp::Logarithm(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_dsp__Logarithm,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Logarithm__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  dsp::Logarithm *result = 0 ;
  
  SWIG_check_num_args("dsp::Logarithm::Logarithm",0,0)
  result = (dsp::Logarithm *)new dsp::Logarithm();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_dsp__Logarithm,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Logarithm(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_Logarithm__SWIG_1(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_Logarithm__SWIG_0(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_Logarithm'\n"
    "  Possible C/C++ prototypes are:\n"
    "    dsp::Logarithm::Logarithm(dsp::Space)\n"
    "    dsp::Logarithm::Logarithm()\n");
  lua_error(L);return 0;
}


static int _wrap_Logarithm_getBase(lua_State* L) {
  int SWIG_arg = 0;
  dsp::Logarithm *arg1 = (dsp::Logarithm *) 0 ;
  std::shared_ptr< Input > result;
  
  SWIG_check_num_args("dsp::Logarithm::getBase",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("dsp::Logarithm::getBase",1,"dsp::Logarithm const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_dsp__Logarithm,0))){
    SWIG_fail_ptr("Logarithm_getBase",1,SWIGTYPE_p_dsp__Logarithm);
  }
  
  result = ((dsp::Logarithm const *)arg1)->getBase();
  {
    std::shared_ptr< Input > * resultptr = new std::shared_ptr< Input >((const std::shared_ptr< Input > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__shared_ptrT_Input_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Logarithm(void *obj) {
dsp::Logarithm *arg1 = (dsp::Logarithm *) obj;
delete arg1;
}
static int _proxy__wrap_new_Logarithm(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Logarithm);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Logarithm_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Logarithm_methods[]= {
    { "getBase", _wrap_Logarithm_getBase},
    {0,0}
};
static swig_lua_method swig_Logarithm_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Logarithm_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Logarithm_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Logarithm_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Logarithm_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Logarithm_Sf_SwigStatic = {
    "Logarithm",
    swig_Logarithm_Sf_SwigStatic_methods,
    swig_Logarithm_Sf_SwigStatic_attributes,
    swig_Logarithm_Sf_SwigStatic_constants,
    swig_Logarithm_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Logarithm_bases[] = {0,0};
static const char *swig_Logarithm_base_names[] = {"dsp::Transformer *",0};
static swig_lua_class _wrap_class_Logarithm = { "Logarithm", "Logarithm", &SWIGTYPE_p_dsp__Logarithm,_proxy__wrap_new_Logarithm, swig_delete_Logarithm, swig_Logarithm_methods, swig_Logarithm_attributes, &swig_Logarithm_Sf_SwigStatic, swig_Logarithm_meta, swig_Logarithm_bases, swig_Logarithm_base_names };

static int _wrap_new_Modulo__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  dsp::Type arg1 ;
  dsp::Space arg2 ;
  dsp::Modulo *result = 0 ;
  
  SWIG_check_num_args("dsp::Modulo::Modulo",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("dsp::Modulo::Modulo",1,"dsp::Type");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("dsp::Modulo::Modulo",2,"dsp::Space");
  arg1 = (dsp::Type)(int)lua_tonumber(L, 1);
  arg2 = (dsp::Space)(int)lua_tonumber(L, 2);
  result = (dsp::Modulo *)new dsp::Modulo(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_dsp__Modulo,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Modulo__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  dsp::Type arg1 ;
  dsp::Modulo *result = 0 ;
  
  SWIG_check_num_args("dsp::Modulo::Modulo",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("dsp::Modulo::Modulo",1,"dsp::Type");
  arg1 = (dsp::Type)(int)lua_tonumber(L, 1);
  result = (dsp::Modulo *)new dsp::Modulo(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_dsp__Modulo,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Modulo__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  dsp::Modulo *result = 0 ;
  
  SWIG_check_num_args("dsp::Modulo::Modulo",0,0)
  result = (dsp::Modulo *)new dsp::Modulo();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_dsp__Modulo,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Modulo(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_Modulo__SWIG_2(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_Modulo__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_Modulo__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_Modulo'\n"
    "  Possible C/C++ prototypes are:\n"
    "    dsp::Modulo::Modulo(dsp::Type,dsp::Space)\n"
    "    dsp::Modulo::Modulo(dsp::Type)\n"
    "    dsp::Modulo::Modulo()\n");
  lua_error(L);return 0;
}


static int _wrap_Modulo_getDivisor(lua_State* L) {
  int SWIG_arg = 0;
  dsp::Modulo *arg1 = (dsp::Modulo *) 0 ;
  std::shared_ptr< Input > result;
  
  SWIG_check_num_args("dsp::Modulo::getDivisor",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("dsp::Modulo::getDivisor",1,"dsp::Modulo const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_dsp__Modulo,0))){
    SWIG_fail_ptr("Modulo_getDivisor",1,SWIGTYPE_p_dsp__Modulo);
  }
  
  result = ((dsp::Modulo const *)arg1)->getDivisor();
  {
    std::shared_ptr< Input > * resultptr = new std::shared_ptr< Input >((const std::shared_ptr< Input > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__shared_ptrT_Input_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Modulo(void *obj) {
dsp::Modulo *arg1 = (dsp::Modulo *) obj;
delete arg1;
}
static int _proxy__wrap_new_Modulo(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Modulo);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Modulo_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Modulo_methods[]= {
    { "getDivisor", _wrap_Modulo_getDivisor},
    {0,0}
};
static swig_lua_method swig_Modulo_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Modulo_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Modulo_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Modulo_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Modulo_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Modulo_Sf_SwigStatic = {
    "Modulo",
    swig_Modulo_Sf_SwigStatic_methods,
    swig_Modulo_Sf_SwigStatic_attributes,
    swig_Modulo_Sf_SwigStatic_constants,
    swig_Modulo_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Modulo_bases[] = {0,0};
static const char *swig_Modulo_base_names[] = {"dsp::Transformer *",0};
static swig_lua_class _wrap_class_Modulo = { "Modulo", "Modulo", &SWIGTYPE_p_dsp__Modulo,_proxy__wrap_new_Modulo, swig_delete_Modulo, swig_Modulo_methods, swig_Modulo_attributes, &swig_Modulo_Sf_SwigStatic, swig_Modulo_meta, swig_Modulo_bases, swig_Modulo_base_names };

static int _wrap_new_Multiplication__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  dsp::Type arg1 ;
  dsp::Space arg2 ;
  dsp::Multiplication *result = 0 ;
  
  SWIG_check_num_args("dsp::Multiplication::Multiplication",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("dsp::Multiplication::Multiplication",1,"dsp::Type");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("dsp::Multiplication::Multiplication",2,"dsp::Space");
  arg1 = (dsp::Type)(int)lua_tonumber(L, 1);
  arg2 = (dsp::Space)(int)lua_tonumber(L, 2);
  result = (dsp::Multiplication *)new dsp::Multiplication(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_dsp__Multiplication,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Multiplication__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  dsp::Type arg1 ;
  dsp::Multiplication *result = 0 ;
  
  SWIG_check_num_args("dsp::Multiplication::Multiplication",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("dsp::Multiplication::Multiplication",1,"dsp::Type");
  arg1 = (dsp::Type)(int)lua_tonumber(L, 1);
  result = (dsp::Multiplication *)new dsp::Multiplication(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_dsp__Multiplication,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Multiplication__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  dsp::Multiplication *result = 0 ;
  
  SWIG_check_num_args("dsp::Multiplication::Multiplication",0,0)
  result = (dsp::Multiplication *)new dsp::Multiplication();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_dsp__Multiplication,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Multiplication(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_Multiplication__SWIG_2(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_Multiplication__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_Multiplication__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_Multiplication'\n"
    "  Possible C/C++ prototypes are:\n"
    "    dsp::Multiplication::Multiplication(dsp::Type,dsp::Space)\n"
    "    dsp::Multiplication::Multiplication(dsp::Type)\n"
    "    dsp::Multiplication::Multiplication()\n");
  lua_error(L);return 0;
}


static int _wrap_Multiplication_getFactor(lua_State* L) {
  int SWIG_arg = 0;
  dsp::Multiplication *arg1 = (dsp::Multiplication *) 0 ;
  std::shared_ptr< Input > result;
  
  SWIG_check_num_args("dsp::Multiplication::getFactor",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("dsp::Multiplication::getFactor",1,"dsp::Multiplication const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_dsp__Multiplication,0))){
    SWIG_fail_ptr("Multiplication_getFactor",1,SWIGTYPE_p_dsp__Multiplication);
  }
  
  result = ((dsp::Multiplication const *)arg1)->getFactor();
  {
    std::shared_ptr< Input > * resultptr = new std::shared_ptr< Input >((const std::shared_ptr< Input > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__shared_ptrT_Input_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Multiplication(void *obj) {
dsp::Multiplication *arg1 = (dsp::Multiplication *) obj;
delete arg1;
}
static int _proxy__wrap_new_Multiplication(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Multiplication);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Multiplication_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Multiplication_methods[]= {
    { "getFactor", _wrap_Multiplication_getFactor},
    {0,0}
};
static swig_lua_method swig_Multiplication_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Multiplication_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Multiplication_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Multiplication_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Multiplication_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Multiplication_Sf_SwigStatic = {
    "Multiplication",
    swig_Multiplication_Sf_SwigStatic_methods,
    swig_Multiplication_Sf_SwigStatic_attributes,
    swig_Multiplication_Sf_SwigStatic_constants,
    swig_Multiplication_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Multiplication_bases[] = {0,0};
static const char *swig_Multiplication_base_names[] = {"dsp::Transformer *",0};
static swig_lua_class _wrap_class_Multiplication = { "Multiplication", "Multiplication", &SWIGTYPE_p_dsp__Multiplication,_proxy__wrap_new_Multiplication, swig_delete_Multiplication, swig_Multiplication_methods, swig_Multiplication_attributes, &swig_Multiplication_Sf_SwigStatic, swig_Multiplication_meta, swig_Multiplication_bases, swig_Multiplication_base_names };

static int _wrap_new_Negative__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  dsp::Type arg1 ;
  dsp::Space arg2 ;
  dsp::Negative *result = 0 ;
  
  SWIG_check_num_args("dsp::Negative::Negative",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("dsp::Negative::Negative",1,"dsp::Type");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("dsp::Negative::Negative",2,"dsp::Space");
  arg1 = (dsp::Type)(int)lua_tonumber(L, 1);
  arg2 = (dsp::Space)(int)lua_tonumber(L, 2);
  result = (dsp::Negative *)new dsp::Negative(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_dsp__Negative,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Negative__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  dsp::Type arg1 ;
  dsp::Negative *result = 0 ;
  
  SWIG_check_num_args("dsp::Negative::Negative",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("dsp::Negative::Negative",1,"dsp::Type");
  arg1 = (dsp::Type)(int)lua_tonumber(L, 1);
  result = (dsp::Negative *)new dsp::Negative(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_dsp__Negative,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Negative__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  dsp::Negative *result = 0 ;
  
  SWIG_check_num_args("dsp::Negative::Negative",0,0)
  result = (dsp::Negative *)new dsp::Negative();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_dsp__Negative,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Negative(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_Negative__SWIG_2(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_Negative__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_Negative__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_Negative'\n"
    "  Possible C/C++ prototypes are:\n"
    "    dsp::Negative::Negative(dsp::Type,dsp::Space)\n"
    "    dsp::Negative::Negative(dsp::Type)\n"
    "    dsp::Negative::Negative()\n");
  lua_error(L);return 0;
}


static void swig_delete_Negative(void *obj) {
dsp::Negative *arg1 = (dsp::Negative *) obj;
delete arg1;
}
static int _proxy__wrap_new_Negative(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Negative);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Negative_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Negative_methods[]= {
    {0,0}
};
static swig_lua_method swig_Negative_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Negative_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Negative_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Negative_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Negative_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Negative_Sf_SwigStatic = {
    "Negative",
    swig_Negative_Sf_SwigStatic_methods,
    swig_Negative_Sf_SwigStatic_attributes,
    swig_Negative_Sf_SwigStatic_constants,
    swig_Negative_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Negative_bases[] = {0,0};
static const char *swig_Negative_base_names[] = {"dsp::Transformer *",0};
static swig_lua_class _wrap_class_Negative = { "Negative", "Negative", &SWIGTYPE_p_dsp__Negative,_proxy__wrap_new_Negative, swig_delete_Negative, swig_Negative_methods, swig_Negative_attributes, &swig_Negative_Sf_SwigStatic, swig_Negative_meta, swig_Negative_bases, swig_Negative_base_names };

static int _wrap_new_NotGate__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  dsp::Space arg1 ;
  dsp::NotGate *result = 0 ;
  
  SWIG_check_num_args("dsp::NotGate::NotGate",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("dsp::NotGate::NotGate",1,"dsp::Space");
  arg1 = (dsp::Space)(int)lua_tonumber(L, 1);
  result = (dsp::NotGate *)new dsp::NotGate(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_dsp__NotGate,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_NotGate__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  dsp::NotGate *result = 0 ;
  
  SWIG_check_num_args("dsp::NotGate::NotGate",0,0)
  result = (dsp::NotGate *)new dsp::NotGate();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_dsp__NotGate,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_NotGate(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_NotGate__SWIG_1(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_NotGate__SWIG_0(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_NotGate'\n"
    "  Possible C/C++ prototypes are:\n"
    "    dsp::NotGate::NotGate(dsp::Space)\n"
    "    dsp::NotGate::NotGate()\n");
  lua_error(L);return 0;
}


static void swig_delete_NotGate(void *obj) {
dsp::NotGate *arg1 = (dsp::NotGate *) obj;
delete arg1;
}
static int _proxy__wrap_new_NotGate(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_NotGate);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_NotGate_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_NotGate_methods[]= {
    {0,0}
};
static swig_lua_method swig_NotGate_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_NotGate_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_NotGate_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_NotGate_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_NotGate_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_NotGate_Sf_SwigStatic = {
    "NotGate",
    swig_NotGate_Sf_SwigStatic_methods,
    swig_NotGate_Sf_SwigStatic_attributes,
    swig_NotGate_Sf_SwigStatic_constants,
    swig_NotGate_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_NotGate_bases[] = {0,0};
static const char *swig_NotGate_base_names[] = {"dsp::Transformer *",0};
static swig_lua_class _wrap_class_NotGate = { "NotGate", "NotGate", &SWIGTYPE_p_dsp__NotGate,_proxy__wrap_new_NotGate, swig_delete_NotGate, swig_NotGate_methods, swig_NotGate_attributes, &swig_NotGate_Sf_SwigStatic, swig_NotGate_meta, swig_NotGate_bases, swig_NotGate_base_names };

static int _wrap_new_NoteToFrequency__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  dsp::Space arg1 ;
  dsp::NoteToFrequency *result = 0 ;
  
  SWIG_check_num_args("dsp::NoteToFrequency::NoteToFrequency",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("dsp::NoteToFrequency::NoteToFrequency",1,"dsp::Space");
  arg1 = (dsp::Space)(int)lua_tonumber(L, 1);
  result = (dsp::NoteToFrequency *)new dsp::NoteToFrequency(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_dsp__NoteToFrequency,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_NoteToFrequency__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  dsp::NoteToFrequency *result = 0 ;
  
  SWIG_check_num_args("dsp::NoteToFrequency::NoteToFrequency",0,0)
  result = (dsp::NoteToFrequency *)new dsp::NoteToFrequency();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_dsp__NoteToFrequency,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_NoteToFrequency(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_NoteToFrequency__SWIG_1(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_NoteToFrequency__SWIG_0(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_NoteToFrequency'\n"
    "  Possible C/C++ prototypes are:\n"
    "    dsp::NoteToFrequency::NoteToFrequency(dsp::Space)\n"
    "    dsp::NoteToFrequency::NoteToFrequency()\n");
  lua_error(L);return 0;
}


static int _wrap_NoteToFrequency_getTuningFrequency(lua_State* L) {
  int SWIG_arg = 0;
  dsp::NoteToFrequency *arg1 = (dsp::NoteToFrequency *) 0 ;
  std::shared_ptr< Input > result;
  
  SWIG_check_num_args("dsp::NoteToFrequency::getTuningFrequency",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("dsp::NoteToFrequency::getTuningFrequency",1,"dsp::NoteToFrequency const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_dsp__NoteToFrequency,0))){
    SWIG_fail_ptr("NoteToFrequency_getTuningFrequency",1,SWIGTYPE_p_dsp__NoteToFrequency);
  }
  
  result = ((dsp::NoteToFrequency const *)arg1)->getTuningFrequency();
  {
    std::shared_ptr< Input > * resultptr = new std::shared_ptr< Input >((const std::shared_ptr< Input > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__shared_ptrT_Input_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_NoteToFrequency(void *obj) {
dsp::NoteToFrequency *arg1 = (dsp::NoteToFrequency *) obj;
delete arg1;
}
static int _proxy__wrap_new_NoteToFrequency(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_NoteToFrequency);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_NoteToFrequency_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_NoteToFrequency_methods[]= {
    { "getTuningFrequency", _wrap_NoteToFrequency_getTuningFrequency},
    {0,0}
};
static swig_lua_method swig_NoteToFrequency_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_NoteToFrequency_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_NoteToFrequency_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_NoteToFrequency_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_NoteToFrequency_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_NoteToFrequency_Sf_SwigStatic = {
    "NoteToFrequency",
    swig_NoteToFrequency_Sf_SwigStatic_methods,
    swig_NoteToFrequency_Sf_SwigStatic_attributes,
    swig_NoteToFrequency_Sf_SwigStatic_constants,
    swig_NoteToFrequency_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_NoteToFrequency_bases[] = {0,0};
static const char *swig_NoteToFrequency_base_names[] = {"dsp::Transformer *",0};
static swig_lua_class _wrap_class_NoteToFrequency = { "NoteToFrequency", "NoteToFrequency", &SWIGTYPE_p_dsp__NoteToFrequency,_proxy__wrap_new_NoteToFrequency, swig_delete_NoteToFrequency, swig_NoteToFrequency_methods, swig_NoteToFrequency_attributes, &swig_NoteToFrequency_Sf_SwigStatic, swig_NoteToFrequency_meta, swig_NoteToFrequency_bases, swig_NoteToFrequency_base_names };

static int _wrap_new_Power__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  dsp::Space arg1 ;
  dsp::Power *result = 0 ;
  
  SWIG_check_num_args("dsp::Power::Power",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("dsp::Power::Power",1,"dsp::Space");
  arg1 = (dsp::Space)(int)lua_tonumber(L, 1);
  result = (dsp::Power *)new dsp::Power(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_dsp__Power,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Power__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  dsp::Power *result = 0 ;
  
  SWIG_check_num_args("dsp::Power::Power",0,0)
  result = (dsp::Power *)new dsp::Power();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_dsp__Power,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Power(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_Power__SWIG_1(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_Power__SWIG_0(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_Power'\n"
    "  Possible C/C++ prototypes are:\n"
    "    dsp::Power::Power(dsp::Space)\n"
    "    dsp::Power::Power()\n");
  lua_error(L);return 0;
}


static int _wrap_Power_getExponent(lua_State* L) {
  int SWIG_arg = 0;
  dsp::Power *arg1 = (dsp::Power *) 0 ;
  std::shared_ptr< Input > result;
  
  SWIG_check_num_args("dsp::Power::getExponent",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("dsp::Power::getExponent",1,"dsp::Power const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_dsp__Power,0))){
    SWIG_fail_ptr("Power_getExponent",1,SWIGTYPE_p_dsp__Power);
  }
  
  result = ((dsp::Power const *)arg1)->getExponent();
  {
    std::shared_ptr< Input > * resultptr = new std::shared_ptr< Input >((const std::shared_ptr< Input > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__shared_ptrT_Input_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Power(void *obj) {
dsp::Power *arg1 = (dsp::Power *) obj;
delete arg1;
}
static int _proxy__wrap_new_Power(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Power);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Power_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Power_methods[]= {
    { "getExponent", _wrap_Power_getExponent},
    {0,0}
};
static swig_lua_method swig_Power_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Power_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Power_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Power_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Power_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Power_Sf_SwigStatic = {
    "Power",
    swig_Power_Sf_SwigStatic_methods,
    swig_Power_Sf_SwigStatic_attributes,
    swig_Power_Sf_SwigStatic_constants,
    swig_Power_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Power_bases[] = {0,0};
static const char *swig_Power_base_names[] = {"dsp::Transformer *",0};
static swig_lua_class _wrap_class_Power = { "Power", "Power", &SWIGTYPE_p_dsp__Power,_proxy__wrap_new_Power, swig_delete_Power, swig_Power_methods, swig_Power_attributes, &swig_Power_Sf_SwigStatic, swig_Power_meta, swig_Power_bases, swig_Power_base_names };

static int _wrap_new_Reciprocal__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  dsp::Type arg1 ;
  dsp::Space arg2 ;
  dsp::Reciprocal *result = 0 ;
  
  SWIG_check_num_args("dsp::Reciprocal::Reciprocal",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("dsp::Reciprocal::Reciprocal",1,"dsp::Type");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("dsp::Reciprocal::Reciprocal",2,"dsp::Space");
  arg1 = (dsp::Type)(int)lua_tonumber(L, 1);
  arg2 = (dsp::Space)(int)lua_tonumber(L, 2);
  result = (dsp::Reciprocal *)new dsp::Reciprocal(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_dsp__Reciprocal,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Reciprocal__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  dsp::Type arg1 ;
  dsp::Reciprocal *result = 0 ;
  
  SWIG_check_num_args("dsp::Reciprocal::Reciprocal",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("dsp::Reciprocal::Reciprocal",1,"dsp::Type");
  arg1 = (dsp::Type)(int)lua_tonumber(L, 1);
  result = (dsp::Reciprocal *)new dsp::Reciprocal(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_dsp__Reciprocal,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Reciprocal__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  dsp::Reciprocal *result = 0 ;
  
  SWIG_check_num_args("dsp::Reciprocal::Reciprocal",0,0)
  result = (dsp::Reciprocal *)new dsp::Reciprocal();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_dsp__Reciprocal,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Reciprocal(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_Reciprocal__SWIG_2(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_Reciprocal__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_Reciprocal__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_Reciprocal'\n"
    "  Possible C/C++ prototypes are:\n"
    "    dsp::Reciprocal::Reciprocal(dsp::Type,dsp::Space)\n"
    "    dsp::Reciprocal::Reciprocal(dsp::Type)\n"
    "    dsp::Reciprocal::Reciprocal()\n");
  lua_error(L);return 0;
}


static void swig_delete_Reciprocal(void *obj) {
dsp::Reciprocal *arg1 = (dsp::Reciprocal *) obj;
delete arg1;
}
static int _proxy__wrap_new_Reciprocal(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Reciprocal);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Reciprocal_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Reciprocal_methods[]= {
    {0,0}
};
static swig_lua_method swig_Reciprocal_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Reciprocal_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Reciprocal_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Reciprocal_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Reciprocal_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Reciprocal_Sf_SwigStatic = {
    "Reciprocal",
    swig_Reciprocal_Sf_SwigStatic_methods,
    swig_Reciprocal_Sf_SwigStatic_attributes,
    swig_Reciprocal_Sf_SwigStatic_constants,
    swig_Reciprocal_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Reciprocal_bases[] = {0,0};
static const char *swig_Reciprocal_base_names[] = {"dsp::Transformer *",0};
static swig_lua_class _wrap_class_Reciprocal = { "Reciprocal", "Reciprocal", &SWIGTYPE_p_dsp__Reciprocal,_proxy__wrap_new_Reciprocal, swig_delete_Reciprocal, swig_Reciprocal_methods, swig_Reciprocal_attributes, &swig_Reciprocal_Sf_SwigStatic, swig_Reciprocal_meta, swig_Reciprocal_bases, swig_Reciprocal_base_names };

static int _wrap_new_Trigonometric__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  dsp::Space arg1 ;
  dsp::Trigonometric *result = 0 ;
  
  SWIG_check_num_args("dsp::Trigonometric::Trigonometric",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("dsp::Trigonometric::Trigonometric",1,"dsp::Space");
  arg1 = (dsp::Space)(int)lua_tonumber(L, 1);
  result = (dsp::Trigonometric *)new dsp::Trigonometric(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_dsp__Trigonometric,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Trigonometric__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  dsp::Trigonometric *result = 0 ;
  
  SWIG_check_num_args("dsp::Trigonometric::Trigonometric",0,0)
  result = (dsp::Trigonometric *)new dsp::Trigonometric();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_dsp__Trigonometric,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Trigonometric(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_Trigonometric__SWIG_1(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_Trigonometric__SWIG_0(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_Trigonometric'\n"
    "  Possible C/C++ prototypes are:\n"
    "    dsp::Trigonometric::Trigonometric(dsp::Space)\n"
    "    dsp::Trigonometric::Trigonometric()\n");
  lua_error(L);return 0;
}


static int _wrap_Trigonometric_getMode(lua_State* L) {
  int SWIG_arg = 0;
  dsp::Trigonometric *arg1 = (dsp::Trigonometric *) 0 ;
  std::shared_ptr< Input > result;
  
  SWIG_check_num_args("dsp::Trigonometric::getMode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("dsp::Trigonometric::getMode",1,"dsp::Trigonometric const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_dsp__Trigonometric,0))){
    SWIG_fail_ptr("Trigonometric_getMode",1,SWIGTYPE_p_dsp__Trigonometric);
  }
  
  result = ((dsp::Trigonometric const *)arg1)->getMode();
  {
    std::shared_ptr< Input > * resultptr = new std::shared_ptr< Input >((const std::shared_ptr< Input > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__shared_ptrT_Input_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Trigonometric(void *obj) {
dsp::Trigonometric *arg1 = (dsp::Trigonometric *) obj;
delete arg1;
}
static int _proxy__wrap_new_Trigonometric(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Trigonometric);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Trigonometric_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Trigonometric_methods[]= {
    { "getMode", _wrap_Trigonometric_getMode},
    {0,0}
};
static swig_lua_method swig_Trigonometric_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Trigonometric_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Trigonometric_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Trigonometric_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Trigonometric_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Trigonometric_Sf_SwigStatic = {
    "Trigonometric",
    swig_Trigonometric_Sf_SwigStatic_methods,
    swig_Trigonometric_Sf_SwigStatic_attributes,
    swig_Trigonometric_Sf_SwigStatic_constants,
    swig_Trigonometric_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Trigonometric_bases[] = {0,0};
static const char *swig_Trigonometric_base_names[] = {"dsp::Transformer *",0};
static swig_lua_class _wrap_class_Trigonometric = { "Trigonometric", "Trigonometric", &SWIGTYPE_p_dsp__Trigonometric,_proxy__wrap_new_Trigonometric, swig_delete_Trigonometric, swig_Trigonometric_methods, swig_Trigonometric_attributes, &swig_Trigonometric_Sf_SwigStatic, swig_Trigonometric_meta, swig_Trigonometric_bases, swig_Trigonometric_base_names };

static int _wrap_new_ClockTrigger(lua_State* L) {
  int SWIG_arg = 0;
  dsp::ClockTrigger *result = 0 ;
  
  SWIG_check_num_args("dsp::ClockTrigger::ClockTrigger",0,0)
  result = (dsp::ClockTrigger *)new dsp::ClockTrigger();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_dsp__ClockTrigger,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ClockTrigger_getInterval(lua_State* L) {
  int SWIG_arg = 0;
  dsp::ClockTrigger *arg1 = (dsp::ClockTrigger *) 0 ;
  std::shared_ptr< Input > result;
  
  SWIG_check_num_args("dsp::ClockTrigger::getInterval",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("dsp::ClockTrigger::getInterval",1,"dsp::ClockTrigger const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_dsp__ClockTrigger,0))){
    SWIG_fail_ptr("ClockTrigger_getInterval",1,SWIGTYPE_p_dsp__ClockTrigger);
  }
  
  result = ((dsp::ClockTrigger const *)arg1)->getInterval();
  {
    std::shared_ptr< Input > * resultptr = new std::shared_ptr< Input >((const std::shared_ptr< Input > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__shared_ptrT_Input_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ClockTrigger_getDelayTime(lua_State* L) {
  int SWIG_arg = 0;
  dsp::ClockTrigger *arg1 = (dsp::ClockTrigger *) 0 ;
  std::shared_ptr< Input > result;
  
  SWIG_check_num_args("dsp::ClockTrigger::getDelayTime",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("dsp::ClockTrigger::getDelayTime",1,"dsp::ClockTrigger const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_dsp__ClockTrigger,0))){
    SWIG_fail_ptr("ClockTrigger_getDelayTime",1,SWIGTYPE_p_dsp__ClockTrigger);
  }
  
  result = ((dsp::ClockTrigger const *)arg1)->getDelayTime();
  {
    std::shared_ptr< Input > * resultptr = new std::shared_ptr< Input >((const std::shared_ptr< Input > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__shared_ptrT_Input_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ClockTrigger_getReset(lua_State* L) {
  int SWIG_arg = 0;
  dsp::ClockTrigger *arg1 = (dsp::ClockTrigger *) 0 ;
  std::shared_ptr< Input > result;
  
  SWIG_check_num_args("dsp::ClockTrigger::getReset",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("dsp::ClockTrigger::getReset",1,"dsp::ClockTrigger const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_dsp__ClockTrigger,0))){
    SWIG_fail_ptr("ClockTrigger_getReset",1,SWIGTYPE_p_dsp__ClockTrigger);
  }
  
  result = ((dsp::ClockTrigger const *)arg1)->getReset();
  {
    std::shared_ptr< Input > * resultptr = new std::shared_ptr< Input >((const std::shared_ptr< Input > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__shared_ptrT_Input_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ClockTrigger_getCurrentTime(lua_State* L) {
  int SWIG_arg = 0;
  dsp::ClockTrigger *arg1 = (dsp::ClockTrigger *) 0 ;
  std::shared_ptr< Output > result;
  
  SWIG_check_num_args("dsp::ClockTrigger::getCurrentTime",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("dsp::ClockTrigger::getCurrentTime",1,"dsp::ClockTrigger const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_dsp__ClockTrigger,0))){
    SWIG_fail_ptr("ClockTrigger_getCurrentTime",1,SWIGTYPE_p_dsp__ClockTrigger);
  }
  
  result = ((dsp::ClockTrigger const *)arg1)->getCurrentTime();
  {
    std::shared_ptr< Output > * resultptr = new std::shared_ptr< Output >((const std::shared_ptr< Output > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__shared_ptrT_Output_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ClockTrigger(void *obj) {
dsp::ClockTrigger *arg1 = (dsp::ClockTrigger *) obj;
delete arg1;
}
static int _proxy__wrap_new_ClockTrigger(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ClockTrigger);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ClockTrigger_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ClockTrigger_methods[]= {
    { "getInterval", _wrap_ClockTrigger_getInterval},
    { "getDelayTime", _wrap_ClockTrigger_getDelayTime},
    { "getReset", _wrap_ClockTrigger_getReset},
    { "getCurrentTime", _wrap_ClockTrigger_getCurrentTime},
    {0,0}
};
static swig_lua_method swig_ClockTrigger_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ClockTrigger_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ClockTrigger_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ClockTrigger_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ClockTrigger_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ClockTrigger_Sf_SwigStatic = {
    "ClockTrigger",
    swig_ClockTrigger_Sf_SwigStatic_methods,
    swig_ClockTrigger_Sf_SwigStatic_attributes,
    swig_ClockTrigger_Sf_SwigStatic_constants,
    swig_ClockTrigger_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ClockTrigger_bases[] = {0,0};
static const char *swig_ClockTrigger_base_names[] = {"dsp::Producer *",0};
static swig_lua_class _wrap_class_ClockTrigger = { "ClockTrigger", "ClockTrigger", &SWIGTYPE_p_dsp__ClockTrigger,_proxy__wrap_new_ClockTrigger, swig_delete_ClockTrigger, swig_ClockTrigger_methods, swig_ClockTrigger_attributes, &swig_ClockTrigger_Sf_SwigStatic, swig_ClockTrigger_meta, swig_ClockTrigger_bases, swig_ClockTrigger_base_names };

static int _wrap_new_Differentiator__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  dsp::Type arg1 ;
  dsp::Differentiator *result = 0 ;
  
  SWIG_check_num_args("dsp::Differentiator::Differentiator",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("dsp::Differentiator::Differentiator",1,"dsp::Type");
  arg1 = (dsp::Type)(int)lua_tonumber(L, 1);
  result = (dsp::Differentiator *)new dsp::Differentiator(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_dsp__Differentiator,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Differentiator__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  dsp::Differentiator *result = 0 ;
  
  SWIG_check_num_args("dsp::Differentiator::Differentiator",0,0)
  result = (dsp::Differentiator *)new dsp::Differentiator();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_dsp__Differentiator,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Differentiator(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_Differentiator__SWIG_1(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_Differentiator__SWIG_0(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_Differentiator'\n"
    "  Possible C/C++ prototypes are:\n"
    "    dsp::Differentiator::Differentiator(dsp::Type)\n"
    "    dsp::Differentiator::Differentiator()\n");
  lua_error(L);return 0;
}


static int _wrap_Differentiator_getGate(lua_State* L) {
  int SWIG_arg = 0;
  dsp::Differentiator *arg1 = (dsp::Differentiator *) 0 ;
  std::shared_ptr< Input > result;
  
  SWIG_check_num_args("dsp::Differentiator::getGate",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("dsp::Differentiator::getGate",1,"dsp::Differentiator const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_dsp__Differentiator,0))){
    SWIG_fail_ptr("Differentiator_getGate",1,SWIGTYPE_p_dsp__Differentiator);
  }
  
  result = ((dsp::Differentiator const *)arg1)->getGate();
  {
    std::shared_ptr< Input > * resultptr = new std::shared_ptr< Input >((const std::shared_ptr< Input > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__shared_ptrT_Input_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Differentiator_getReset(lua_State* L) {
  int SWIG_arg = 0;
  dsp::Differentiator *arg1 = (dsp::Differentiator *) 0 ;
  std::shared_ptr< Input > result;
  
  SWIG_check_num_args("dsp::Differentiator::getReset",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("dsp::Differentiator::getReset",1,"dsp::Differentiator const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_dsp__Differentiator,0))){
    SWIG_fail_ptr("Differentiator_getReset",1,SWIGTYPE_p_dsp__Differentiator);
  }
  
  result = ((dsp::Differentiator const *)arg1)->getReset();
  {
    std::shared_ptr< Input > * resultptr = new std::shared_ptr< Input >((const std::shared_ptr< Input > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__shared_ptrT_Input_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Differentiator(void *obj) {
dsp::Differentiator *arg1 = (dsp::Differentiator *) obj;
delete arg1;
}
static int _proxy__wrap_new_Differentiator(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Differentiator);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Differentiator_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Differentiator_methods[]= {
    { "getGate", _wrap_Differentiator_getGate},
    { "getReset", _wrap_Differentiator_getReset},
    {0,0}
};
static swig_lua_method swig_Differentiator_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Differentiator_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Differentiator_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Differentiator_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Differentiator_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Differentiator_Sf_SwigStatic = {
    "Differentiator",
    swig_Differentiator_Sf_SwigStatic_methods,
    swig_Differentiator_Sf_SwigStatic_attributes,
    swig_Differentiator_Sf_SwigStatic_constants,
    swig_Differentiator_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Differentiator_bases[] = {0,0};
static const char *swig_Differentiator_base_names[] = {"dsp::Transformer *",0};
static swig_lua_class _wrap_class_Differentiator = { "Differentiator", "Differentiator", &SWIGTYPE_p_dsp__Differentiator,_proxy__wrap_new_Differentiator, swig_delete_Differentiator, swig_Differentiator_methods, swig_Differentiator_attributes, &swig_Differentiator_Sf_SwigStatic, swig_Differentiator_meta, swig_Differentiator_bases, swig_Differentiator_base_names };

static int _wrap_new_Integrator__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  dsp::Type arg1 ;
  dsp::Integrator *result = 0 ;
  
  SWIG_check_num_args("dsp::Integrator::Integrator",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("dsp::Integrator::Integrator",1,"dsp::Type");
  arg1 = (dsp::Type)(int)lua_tonumber(L, 1);
  result = (dsp::Integrator *)new dsp::Integrator(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_dsp__Integrator,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Integrator__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  dsp::Integrator *result = 0 ;
  
  SWIG_check_num_args("dsp::Integrator::Integrator",0,0)
  result = (dsp::Integrator *)new dsp::Integrator();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_dsp__Integrator,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Integrator(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_Integrator__SWIG_1(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_Integrator__SWIG_0(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_Integrator'\n"
    "  Possible C/C++ prototypes are:\n"
    "    dsp::Integrator::Integrator(dsp::Type)\n"
    "    dsp::Integrator::Integrator()\n");
  lua_error(L);return 0;
}


static int _wrap_Integrator_getGate(lua_State* L) {
  int SWIG_arg = 0;
  dsp::Integrator *arg1 = (dsp::Integrator *) 0 ;
  std::shared_ptr< Input > result;
  
  SWIG_check_num_args("dsp::Integrator::getGate",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("dsp::Integrator::getGate",1,"dsp::Integrator const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_dsp__Integrator,0))){
    SWIG_fail_ptr("Integrator_getGate",1,SWIGTYPE_p_dsp__Integrator);
  }
  
  result = ((dsp::Integrator const *)arg1)->getGate();
  {
    std::shared_ptr< Input > * resultptr = new std::shared_ptr< Input >((const std::shared_ptr< Input > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__shared_ptrT_Input_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Integrator_getReset(lua_State* L) {
  int SWIG_arg = 0;
  dsp::Integrator *arg1 = (dsp::Integrator *) 0 ;
  std::shared_ptr< Input > result;
  
  SWIG_check_num_args("dsp::Integrator::getReset",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("dsp::Integrator::getReset",1,"dsp::Integrator const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_dsp__Integrator,0))){
    SWIG_fail_ptr("Integrator_getReset",1,SWIGTYPE_p_dsp__Integrator);
  }
  
  result = ((dsp::Integrator const *)arg1)->getReset();
  {
    std::shared_ptr< Input > * resultptr = new std::shared_ptr< Input >((const std::shared_ptr< Input > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__shared_ptrT_Input_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Integrator(void *obj) {
dsp::Integrator *arg1 = (dsp::Integrator *) obj;
delete arg1;
}
static int _proxy__wrap_new_Integrator(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Integrator);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Integrator_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Integrator_methods[]= {
    { "getGate", _wrap_Integrator_getGate},
    { "getReset", _wrap_Integrator_getReset},
    {0,0}
};
static swig_lua_method swig_Integrator_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Integrator_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Integrator_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Integrator_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Integrator_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Integrator_Sf_SwigStatic = {
    "Integrator",
    swig_Integrator_Sf_SwigStatic_methods,
    swig_Integrator_Sf_SwigStatic_attributes,
    swig_Integrator_Sf_SwigStatic_constants,
    swig_Integrator_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Integrator_bases[] = {0,0};
static const char *swig_Integrator_base_names[] = {"dsp::Transformer *",0};
static swig_lua_class _wrap_class_Integrator = { "Integrator", "Integrator", &SWIGTYPE_p_dsp__Integrator,_proxy__wrap_new_Integrator, swig_delete_Integrator, swig_Integrator_methods, swig_Integrator_attributes, &swig_Integrator_Sf_SwigStatic, swig_Integrator_meta, swig_Integrator_bases, swig_Integrator_base_names };

static int _wrap_new_OnOff(lua_State* L) {
  int SWIG_arg = 0;
  dsp::OnOff *result = 0 ;
  
  SWIG_check_num_args("dsp::OnOff::OnOff",0,0)
  result = (dsp::OnOff *)new dsp::OnOff();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_dsp__OnOff,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OnOff_getOnTrigger(lua_State* L) {
  int SWIG_arg = 0;
  dsp::OnOff *arg1 = (dsp::OnOff *) 0 ;
  std::shared_ptr< Input > result;
  
  SWIG_check_num_args("dsp::OnOff::getOnTrigger",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("dsp::OnOff::getOnTrigger",1,"dsp::OnOff const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_dsp__OnOff,0))){
    SWIG_fail_ptr("OnOff_getOnTrigger",1,SWIGTYPE_p_dsp__OnOff);
  }
  
  result = ((dsp::OnOff const *)arg1)->getOnTrigger();
  {
    std::shared_ptr< Input > * resultptr = new std::shared_ptr< Input >((const std::shared_ptr< Input > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__shared_ptrT_Input_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OnOff_getOffTrigger(lua_State* L) {
  int SWIG_arg = 0;
  dsp::OnOff *arg1 = (dsp::OnOff *) 0 ;
  std::shared_ptr< Input > result;
  
  SWIG_check_num_args("dsp::OnOff::getOffTrigger",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("dsp::OnOff::getOffTrigger",1,"dsp::OnOff const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_dsp__OnOff,0))){
    SWIG_fail_ptr("OnOff_getOffTrigger",1,SWIGTYPE_p_dsp__OnOff);
  }
  
  result = ((dsp::OnOff const *)arg1)->getOffTrigger();
  {
    std::shared_ptr< Input > * resultptr = new std::shared_ptr< Input >((const std::shared_ptr< Input > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__shared_ptrT_Input_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_OnOff(void *obj) {
dsp::OnOff *arg1 = (dsp::OnOff *) obj;
delete arg1;
}
static int _proxy__wrap_new_OnOff(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_OnOff);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_OnOff_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_OnOff_methods[]= {
    { "getOnTrigger", _wrap_OnOff_getOnTrigger},
    { "getOffTrigger", _wrap_OnOff_getOffTrigger},
    {0,0}
};
static swig_lua_method swig_OnOff_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_OnOff_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_OnOff_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_OnOff_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_OnOff_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_OnOff_Sf_SwigStatic = {
    "OnOff",
    swig_OnOff_Sf_SwigStatic_methods,
    swig_OnOff_Sf_SwigStatic_attributes,
    swig_OnOff_Sf_SwigStatic_constants,
    swig_OnOff_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_OnOff_bases[] = {0,0};
static const char *swig_OnOff_base_names[] = {"dsp::Producer *",0};
static swig_lua_class _wrap_class_OnOff = { "OnOff", "OnOff", &SWIGTYPE_p_dsp__OnOff,_proxy__wrap_new_OnOff, swig_delete_OnOff, swig_OnOff_methods, swig_OnOff_attributes, &swig_OnOff_Sf_SwigStatic, swig_OnOff_meta, swig_OnOff_bases, swig_OnOff_base_names };

static int _wrap_new_ResetTrigger(lua_State* L) {
  int SWIG_arg = 0;
  dsp::ResetTrigger *result = 0 ;
  
  SWIG_check_num_args("dsp::ResetTrigger::ResetTrigger",0,0)
  result = (dsp::ResetTrigger *)new dsp::ResetTrigger();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_dsp__ResetTrigger,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ResetTrigger_reset__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  dsp::ResetTrigger *arg1 = (dsp::ResetTrigger *) 0 ;
  
  SWIG_check_num_args("dsp::ResetTrigger::reset",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("dsp::ResetTrigger::reset",1,"dsp::ResetTrigger *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_dsp__ResetTrigger,0))){
    SWIG_fail_ptr("ResetTrigger_reset",1,SWIGTYPE_p_dsp__ResetTrigger);
  }
  
  (arg1)->reset();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ResetTrigger_reset__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  dsp::ResetTrigger *arg1 = (dsp::ResetTrigger *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("dsp::ResetTrigger::reset",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("dsp::ResetTrigger::reset",1,"dsp::ResetTrigger *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("dsp::ResetTrigger::reset",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_dsp__ResetTrigger,0))){
    SWIG_fail_ptr("ResetTrigger_reset",1,SWIGTYPE_p_dsp__ResetTrigger);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->reset(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ResetTrigger_reset(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_dsp__ResetTrigger, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_ResetTrigger_reset__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_dsp__ResetTrigger, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_ResetTrigger_reset__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ResetTrigger_reset'\n"
    "  Possible C/C++ prototypes are:\n"
    "    dsp::ResetTrigger::reset()\n"
    "    dsp::ResetTrigger::reset(size_t)\n");
  lua_error(L);return 0;
}


static void swig_delete_ResetTrigger(void *obj) {
dsp::ResetTrigger *arg1 = (dsp::ResetTrigger *) obj;
delete arg1;
}
static int _proxy__wrap_new_ResetTrigger(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ResetTrigger);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ResetTrigger_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ResetTrigger_methods[]= {
    { "reset", _wrap_ResetTrigger_reset},
    {0,0}
};
static swig_lua_method swig_ResetTrigger_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ResetTrigger_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ResetTrigger_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ResetTrigger_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ResetTrigger_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ResetTrigger_Sf_SwigStatic = {
    "ResetTrigger",
    swig_ResetTrigger_Sf_SwigStatic_methods,
    swig_ResetTrigger_Sf_SwigStatic_attributes,
    swig_ResetTrigger_Sf_SwigStatic_constants,
    swig_ResetTrigger_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ResetTrigger_bases[] = {0,0};
static const char *swig_ResetTrigger_base_names[] = {"dsp::Producer *",0};
static swig_lua_class _wrap_class_ResetTrigger = { "ResetTrigger", "ResetTrigger", &SWIGTYPE_p_dsp__ResetTrigger,_proxy__wrap_new_ResetTrigger, swig_delete_ResetTrigger, swig_ResetTrigger_methods, swig_ResetTrigger_attributes, &swig_ResetTrigger_Sf_SwigStatic, swig_ResetTrigger_meta, swig_ResetTrigger_bases, swig_ResetTrigger_base_names };

static int _wrap_new_SampleAndHold__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  dsp::Type arg1 ;
  dsp::SampleAndHold *result = 0 ;
  
  SWIG_check_num_args("dsp::SampleAndHold::SampleAndHold",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("dsp::SampleAndHold::SampleAndHold",1,"dsp::Type");
  arg1 = (dsp::Type)(int)lua_tonumber(L, 1);
  result = (dsp::SampleAndHold *)new dsp::SampleAndHold(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_dsp__SampleAndHold,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_SampleAndHold__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  dsp::SampleAndHold *result = 0 ;
  
  SWIG_check_num_args("dsp::SampleAndHold::SampleAndHold",0,0)
  result = (dsp::SampleAndHold *)new dsp::SampleAndHold();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_dsp__SampleAndHold,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_SampleAndHold(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_SampleAndHold__SWIG_1(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_SampleAndHold__SWIG_0(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_SampleAndHold'\n"
    "  Possible C/C++ prototypes are:\n"
    "    dsp::SampleAndHold::SampleAndHold(dsp::Type)\n"
    "    dsp::SampleAndHold::SampleAndHold()\n");
  lua_error(L);return 0;
}


static int _wrap_SampleAndHold_getGate(lua_State* L) {
  int SWIG_arg = 0;
  dsp::SampleAndHold *arg1 = (dsp::SampleAndHold *) 0 ;
  std::shared_ptr< Input > result;
  
  SWIG_check_num_args("dsp::SampleAndHold::getGate",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("dsp::SampleAndHold::getGate",1,"dsp::SampleAndHold const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_dsp__SampleAndHold,0))){
    SWIG_fail_ptr("SampleAndHold_getGate",1,SWIGTYPE_p_dsp__SampleAndHold);
  }
  
  result = ((dsp::SampleAndHold const *)arg1)->getGate();
  {
    std::shared_ptr< Input > * resultptr = new std::shared_ptr< Input >((const std::shared_ptr< Input > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__shared_ptrT_Input_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SampleAndHold_getReset(lua_State* L) {
  int SWIG_arg = 0;
  dsp::SampleAndHold *arg1 = (dsp::SampleAndHold *) 0 ;
  std::shared_ptr< Input > result;
  
  SWIG_check_num_args("dsp::SampleAndHold::getReset",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("dsp::SampleAndHold::getReset",1,"dsp::SampleAndHold const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_dsp__SampleAndHold,0))){
    SWIG_fail_ptr("SampleAndHold_getReset",1,SWIGTYPE_p_dsp__SampleAndHold);
  }
  
  result = ((dsp::SampleAndHold const *)arg1)->getReset();
  {
    std::shared_ptr< Input > * resultptr = new std::shared_ptr< Input >((const std::shared_ptr< Input > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__shared_ptrT_Input_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_SampleAndHold(void *obj) {
dsp::SampleAndHold *arg1 = (dsp::SampleAndHold *) obj;
delete arg1;
}
static int _proxy__wrap_new_SampleAndHold(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_SampleAndHold);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_SampleAndHold_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_SampleAndHold_methods[]= {
    { "getGate", _wrap_SampleAndHold_getGate},
    { "getReset", _wrap_SampleAndHold_getReset},
    {0,0}
};
static swig_lua_method swig_SampleAndHold_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_SampleAndHold_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_SampleAndHold_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_SampleAndHold_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_SampleAndHold_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_SampleAndHold_Sf_SwigStatic = {
    "SampleAndHold",
    swig_SampleAndHold_Sf_SwigStatic_methods,
    swig_SampleAndHold_Sf_SwigStatic_attributes,
    swig_SampleAndHold_Sf_SwigStatic_constants,
    swig_SampleAndHold_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_SampleAndHold_bases[] = {0,0};
static const char *swig_SampleAndHold_base_names[] = {"dsp::Transformer *",0};
static swig_lua_class _wrap_class_SampleAndHold = { "SampleAndHold", "SampleAndHold", &SWIGTYPE_p_dsp__SampleAndHold,_proxy__wrap_new_SampleAndHold, swig_delete_SampleAndHold, swig_SampleAndHold_methods, swig_SampleAndHold_attributes, &swig_SampleAndHold_Sf_SwigStatic, swig_SampleAndHold_meta, swig_SampleAndHold_bases, swig_SampleAndHold_base_names };

static int _wrap_new_Sequencer__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  dsp::Type arg1 ;
  dsp::Space arg2 ;
  dsp::Sequencer *result = 0 ;
  
  SWIG_check_num_args("dsp::Sequencer::Sequencer",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("dsp::Sequencer::Sequencer",1,"dsp::Type");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("dsp::Sequencer::Sequencer",2,"dsp::Space");
  arg1 = (dsp::Type)(int)lua_tonumber(L, 1);
  arg2 = (dsp::Space)(int)lua_tonumber(L, 2);
  result = (dsp::Sequencer *)new dsp::Sequencer(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_dsp__Sequencer,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Sequencer__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  dsp::Type arg1 ;
  dsp::Sequencer *result = 0 ;
  
  SWIG_check_num_args("dsp::Sequencer::Sequencer",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("dsp::Sequencer::Sequencer",1,"dsp::Type");
  arg1 = (dsp::Type)(int)lua_tonumber(L, 1);
  result = (dsp::Sequencer *)new dsp::Sequencer(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_dsp__Sequencer,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Sequencer__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  dsp::Sequencer *result = 0 ;
  
  SWIG_check_num_args("dsp::Sequencer::Sequencer",0,0)
  result = (dsp::Sequencer *)new dsp::Sequencer();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_dsp__Sequencer,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Sequencer(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_Sequencer__SWIG_2(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_Sequencer__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_Sequencer__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_Sequencer'\n"
    "  Possible C/C++ prototypes are:\n"
    "    dsp::Sequencer::Sequencer(dsp::Type,dsp::Space)\n"
    "    dsp::Sequencer::Sequencer(dsp::Type)\n"
    "    dsp::Sequencer::Sequencer()\n");
  lua_error(L);return 0;
}


static int _wrap_Sequencer_getSequences(lua_State* L) {
  int SWIG_arg = 0;
  dsp::Sequencer *arg1 = (dsp::Sequencer *) 0 ;
  std::vector< std::shared_ptr< Buffer > > *result = 0 ;
  
  SWIG_check_num_args("dsp::Sequencer::getSequences",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("dsp::Sequencer::getSequences",1,"dsp::Sequencer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_dsp__Sequencer,0))){
    SWIG_fail_ptr("Sequencer_getSequences",1,SWIGTYPE_p_dsp__Sequencer);
  }
  
  result = (std::vector< std::shared_ptr< Buffer > > *) &(arg1)->getSequences();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_std__shared_ptrT_Buffer_t_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Sequencer_getSequenceIndex(lua_State* L) {
  int SWIG_arg = 0;
  dsp::Sequencer *arg1 = (dsp::Sequencer *) 0 ;
  std::shared_ptr< Input > result;
  
  SWIG_check_num_args("dsp::Sequencer::getSequenceIndex",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("dsp::Sequencer::getSequenceIndex",1,"dsp::Sequencer const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_dsp__Sequencer,0))){
    SWIG_fail_ptr("Sequencer_getSequenceIndex",1,SWIGTYPE_p_dsp__Sequencer);
  }
  
  result = ((dsp::Sequencer const *)arg1)->getSequenceIndex();
  {
    std::shared_ptr< Input > * resultptr = new std::shared_ptr< Input >((const std::shared_ptr< Input > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__shared_ptrT_Input_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Sequencer_getPositionIndex(lua_State* L) {
  int SWIG_arg = 0;
  dsp::Sequencer *arg1 = (dsp::Sequencer *) 0 ;
  std::shared_ptr< Input > result;
  
  SWIG_check_num_args("dsp::Sequencer::getPositionIndex",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("dsp::Sequencer::getPositionIndex",1,"dsp::Sequencer const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_dsp__Sequencer,0))){
    SWIG_fail_ptr("Sequencer_getPositionIndex",1,SWIGTYPE_p_dsp__Sequencer);
  }
  
  result = ((dsp::Sequencer const *)arg1)->getPositionIndex();
  {
    std::shared_ptr< Input > * resultptr = new std::shared_ptr< Input >((const std::shared_ptr< Input > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__shared_ptrT_Input_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Sequencer(void *obj) {
dsp::Sequencer *arg1 = (dsp::Sequencer *) obj;
delete arg1;
}
static int _proxy__wrap_new_Sequencer(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Sequencer);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Sequencer_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Sequencer_methods[]= {
    { "getSequences", _wrap_Sequencer_getSequences},
    { "getSequenceIndex", _wrap_Sequencer_getSequenceIndex},
    { "getPositionIndex", _wrap_Sequencer_getPositionIndex},
    {0,0}
};
static swig_lua_method swig_Sequencer_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Sequencer_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Sequencer_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Sequencer_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Sequencer_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Sequencer_Sf_SwigStatic = {
    "Sequencer",
    swig_Sequencer_Sf_SwigStatic_methods,
    swig_Sequencer_Sf_SwigStatic_attributes,
    swig_Sequencer_Sf_SwigStatic_constants,
    swig_Sequencer_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Sequencer_bases[] = {0,0};
static const char *swig_Sequencer_base_names[] = {"dsp::Producer *",0};
static swig_lua_class _wrap_class_Sequencer = { "Sequencer", "Sequencer", &SWIGTYPE_p_dsp__Sequencer,_proxy__wrap_new_Sequencer, swig_delete_Sequencer, swig_Sequencer_methods, swig_Sequencer_attributes, &swig_Sequencer_Sf_SwigStatic, swig_Sequencer_meta, swig_Sequencer_bases, swig_Sequencer_base_names };

static int _wrap_new_TriggerHold(lua_State* L) {
  int SWIG_arg = 0;
  dsp::TriggerHold *result = 0 ;
  
  SWIG_check_num_args("dsp::TriggerHold::TriggerHold",0,0)
  result = (dsp::TriggerHold *)new dsp::TriggerHold();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_dsp__TriggerHold,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TriggerHold_getHoldTime(lua_State* L) {
  int SWIG_arg = 0;
  dsp::TriggerHold *arg1 = (dsp::TriggerHold *) 0 ;
  std::shared_ptr< Input > result;
  
  SWIG_check_num_args("dsp::TriggerHold::getHoldTime",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("dsp::TriggerHold::getHoldTime",1,"dsp::TriggerHold const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_dsp__TriggerHold,0))){
    SWIG_fail_ptr("TriggerHold_getHoldTime",1,SWIGTYPE_p_dsp__TriggerHold);
  }
  
  result = ((dsp::TriggerHold const *)arg1)->getHoldTime();
  {
    std::shared_ptr< Input > * resultptr = new std::shared_ptr< Input >((const std::shared_ptr< Input > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__shared_ptrT_Input_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TriggerHold_getCurrentTime(lua_State* L) {
  int SWIG_arg = 0;
  dsp::TriggerHold *arg1 = (dsp::TriggerHold *) 0 ;
  std::shared_ptr< Output > result;
  
  SWIG_check_num_args("dsp::TriggerHold::getCurrentTime",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("dsp::TriggerHold::getCurrentTime",1,"dsp::TriggerHold const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_dsp__TriggerHold,0))){
    SWIG_fail_ptr("TriggerHold_getCurrentTime",1,SWIGTYPE_p_dsp__TriggerHold);
  }
  
  result = ((dsp::TriggerHold const *)arg1)->getCurrentTime();
  {
    std::shared_ptr< Output > * resultptr = new std::shared_ptr< Output >((const std::shared_ptr< Output > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__shared_ptrT_Output_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_TriggerHold(void *obj) {
dsp::TriggerHold *arg1 = (dsp::TriggerHold *) obj;
delete arg1;
}
static int _proxy__wrap_new_TriggerHold(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_TriggerHold);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_TriggerHold_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_TriggerHold_methods[]= {
    { "getHoldTime", _wrap_TriggerHold_getHoldTime},
    { "getCurrentTime", _wrap_TriggerHold_getCurrentTime},
    {0,0}
};
static swig_lua_method swig_TriggerHold_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_TriggerHold_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_TriggerHold_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_TriggerHold_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_TriggerHold_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_TriggerHold_Sf_SwigStatic = {
    "TriggerHold",
    swig_TriggerHold_Sf_SwigStatic_methods,
    swig_TriggerHold_Sf_SwigStatic_attributes,
    swig_TriggerHold_Sf_SwigStatic_constants,
    swig_TriggerHold_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_TriggerHold_bases[] = {0,0};
static const char *swig_TriggerHold_base_names[] = {"dsp::Transformer *",0};
static swig_lua_class _wrap_class_TriggerHold = { "TriggerHold", "TriggerHold", &SWIGTYPE_p_dsp__TriggerHold,_proxy__wrap_new_TriggerHold, swig_delete_TriggerHold, swig_TriggerHold_methods, swig_TriggerHold_attributes, &swig_TriggerHold_Sf_SwigStatic, swig_TriggerHold_meta, swig_TriggerHold_bases, swig_TriggerHold_base_names };

static int _wrap_new_BufferDuration(lua_State* L) {
  int SWIG_arg = 0;
  dsp::BufferDuration *result = 0 ;
  
  SWIG_check_num_args("dsp::BufferDuration::BufferDuration",0,0)
  result = (dsp::BufferDuration *)new dsp::BufferDuration();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_dsp__BufferDuration,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_BufferDuration(void *obj) {
dsp::BufferDuration *arg1 = (dsp::BufferDuration *) obj;
delete arg1;
}
static int _proxy__wrap_new_BufferDuration(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_BufferDuration);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_BufferDuration_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_BufferDuration_methods[]= {
    {0,0}
};
static swig_lua_method swig_BufferDuration_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_BufferDuration_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_BufferDuration_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_BufferDuration_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_BufferDuration_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_BufferDuration_Sf_SwigStatic = {
    "BufferDuration",
    swig_BufferDuration_Sf_SwigStatic_methods,
    swig_BufferDuration_Sf_SwigStatic_attributes,
    swig_BufferDuration_Sf_SwigStatic_constants,
    swig_BufferDuration_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_BufferDuration_bases[] = {0,0};
static const char *swig_BufferDuration_base_names[] = {"dsp::Producer *",0};
static swig_lua_class _wrap_class_BufferDuration = { "BufferDuration", "BufferDuration", &SWIGTYPE_p_dsp__BufferDuration,_proxy__wrap_new_BufferDuration, swig_delete_BufferDuration, swig_BufferDuration_methods, swig_BufferDuration_attributes, &swig_BufferDuration_Sf_SwigStatic, swig_BufferDuration_meta, swig_BufferDuration_bases, swig_BufferDuration_base_names };

static int _wrap_new_BufferRate(lua_State* L) {
  int SWIG_arg = 0;
  dsp::BufferRate *result = 0 ;
  
  SWIG_check_num_args("dsp::BufferRate::BufferRate",0,0)
  result = (dsp::BufferRate *)new dsp::BufferRate();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_dsp__BufferRate,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_BufferRate(void *obj) {
dsp::BufferRate *arg1 = (dsp::BufferRate *) obj;
delete arg1;
}
static int _proxy__wrap_new_BufferRate(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_BufferRate);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_BufferRate_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_BufferRate_methods[]= {
    {0,0}
};
static swig_lua_method swig_BufferRate_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_BufferRate_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_BufferRate_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_BufferRate_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_BufferRate_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_BufferRate_Sf_SwigStatic = {
    "BufferRate",
    swig_BufferRate_Sf_SwigStatic_methods,
    swig_BufferRate_Sf_SwigStatic_attributes,
    swig_BufferRate_Sf_SwigStatic_constants,
    swig_BufferRate_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_BufferRate_bases[] = {0,0};
static const char *swig_BufferRate_base_names[] = {"dsp::Producer *",0};
static swig_lua_class _wrap_class_BufferRate = { "BufferRate", "BufferRate", &SWIGTYPE_p_dsp__BufferRate,_proxy__wrap_new_BufferRate, swig_delete_BufferRate, swig_BufferRate_methods, swig_BufferRate_attributes, &swig_BufferRate_Sf_SwigStatic, swig_BufferRate_meta, swig_BufferRate_bases, swig_BufferRate_base_names };

static int _wrap_new_SampleDuration(lua_State* L) {
  int SWIG_arg = 0;
  dsp::SampleDuration *result = 0 ;
  
  SWIG_check_num_args("dsp::SampleDuration::SampleDuration",0,0)
  result = (dsp::SampleDuration *)new dsp::SampleDuration();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_dsp__SampleDuration,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_SampleDuration(void *obj) {
dsp::SampleDuration *arg1 = (dsp::SampleDuration *) obj;
delete arg1;
}
static int _proxy__wrap_new_SampleDuration(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_SampleDuration);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_SampleDuration_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_SampleDuration_methods[]= {
    {0,0}
};
static swig_lua_method swig_SampleDuration_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_SampleDuration_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_SampleDuration_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_SampleDuration_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_SampleDuration_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_SampleDuration_Sf_SwigStatic = {
    "SampleDuration",
    swig_SampleDuration_Sf_SwigStatic_methods,
    swig_SampleDuration_Sf_SwigStatic_attributes,
    swig_SampleDuration_Sf_SwigStatic_constants,
    swig_SampleDuration_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_SampleDuration_bases[] = {0,0};
static const char *swig_SampleDuration_base_names[] = {"dsp::Producer *",0};
static swig_lua_class _wrap_class_SampleDuration = { "SampleDuration", "SampleDuration", &SWIGTYPE_p_dsp__SampleDuration,_proxy__wrap_new_SampleDuration, swig_delete_SampleDuration, swig_SampleDuration_methods, swig_SampleDuration_attributes, &swig_SampleDuration_Sf_SwigStatic, swig_SampleDuration_meta, swig_SampleDuration_bases, swig_SampleDuration_base_names };

static int _wrap_new_SampleRate(lua_State* L) {
  int SWIG_arg = 0;
  dsp::SampleRate *result = 0 ;
  
  SWIG_check_num_args("dsp::SampleRate::SampleRate",0,0)
  result = (dsp::SampleRate *)new dsp::SampleRate();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_dsp__SampleRate,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_SampleRate(void *obj) {
dsp::SampleRate *arg1 = (dsp::SampleRate *) obj;
delete arg1;
}
static int _proxy__wrap_new_SampleRate(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_SampleRate);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_SampleRate_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_SampleRate_methods[]= {
    {0,0}
};
static swig_lua_method swig_SampleRate_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_SampleRate_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_SampleRate_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_SampleRate_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_SampleRate_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_SampleRate_Sf_SwigStatic = {
    "SampleRate",
    swig_SampleRate_Sf_SwigStatic_methods,
    swig_SampleRate_Sf_SwigStatic_attributes,
    swig_SampleRate_Sf_SwigStatic_constants,
    swig_SampleRate_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_SampleRate_bases[] = {0,0};
static const char *swig_SampleRate_base_names[] = {"dsp::Producer *",0};
static swig_lua_class _wrap_class_SampleRate = { "SampleRate", "SampleRate", &SWIGTYPE_p_dsp__SampleRate,_proxy__wrap_new_SampleRate, swig_delete_SampleRate, swig_SampleRate_methods, swig_SampleRate_attributes, &swig_SampleRate_Sf_SwigStatic, swig_SampleRate_meta, swig_SampleRate_bases, swig_SampleRate_base_names };

static swig_lua_attribute swig_SwigModule_attributes[] = {
    { "PI", _wrap_PI_get, SWIG_Lua_set_immutable },
    { "ONE_OVER_PI", _wrap_ONE_OVER_PI_get, SWIG_Lua_set_immutable },
    { "TAU", _wrap_TAU_get, SWIG_Lua_set_immutable },
    { "ONE_OVER_TAU", _wrap_ONE_OVER_TAU_get, SWIG_Lua_set_immutable },
    { "PI_OVER_TWO", _wrap_PI_OVER_TWO_get, SWIG_Lua_set_immutable },
    { "SQRT_OF_TWO", _wrap_SQRT_OF_TWO_get, SWIG_Lua_set_immutable },
    { "LOG_OF_TWO", _wrap_LOG_OF_TWO_get, SWIG_Lua_set_immutable },
    { "ONE_OVER_LOG_OF_TWO", _wrap_ONE_OVER_LOG_OF_TWO_get, SWIG_Lua_set_immutable },
    { "PHI", _wrap_PHI_get, SWIG_Lua_set_immutable },
    { "E", _wrap_E_get, SWIG_Lua_set_immutable },
    {0,0,0}
};
static swig_lua_const_info swig_SwigModule_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("Type_RATIO", dsp::Type::RATIO)},
    {SWIG_LUA_CONSTTAB_INT("Type_INTEGER", dsp::Type::INTEGER)},
    {SWIG_LUA_CONSTTAB_INT("Type_BOOLEAN", dsp::Type::BOOLEAN)},
    {SWIG_LUA_CONSTTAB_INT("Type_HERTZ", dsp::Type::HERTZ)},
    {SWIG_LUA_CONSTTAB_INT("Type_SECONDS", dsp::Type::SECONDS)},
    {SWIG_LUA_CONSTTAB_INT("Space_TIME", dsp::Space::TIME)},
    {SWIG_LUA_CONSTTAB_INT("Space_FREQUENCY", dsp::Space::FREQUENCY)},
    {SWIG_LUA_CONSTTAB_INT("Shape_MIN", dsp::Shape::MIN)},
    {SWIG_LUA_CONSTTAB_INT("Shape_MAX", dsp::Shape::MAX)},
    {SWIG_LUA_CONSTTAB_INT("Shape_LINEAR", dsp::Shape::LINEAR)},
    {SWIG_LUA_CONSTTAB_INT("Shape_EXPONENTIAL", dsp::Shape::EXPONENTIAL)},
    {SWIG_LUA_CONSTTAB_INT("Interpolation_MIN", dsp::Interpolation::MIN)},
    {SWIG_LUA_CONSTTAB_INT("Interpolation_MAX", dsp::Interpolation::MAX)},
    {SWIG_LUA_CONSTTAB_INT("Interpolation_NONE", dsp::Interpolation::NONE)},
    {SWIG_LUA_CONSTTAB_INT("Interpolation_LINEAR", dsp::Interpolation::LINEAR)},
    {SWIG_LUA_CONSTTAB_INT("Interpolation_HERMITE", dsp::Interpolation::HERMITE)},
    {SWIG_LUA_CONSTTAB_INT("Recorder_Mode_FIXED_SINGLE", dsp::Recorder::Mode::FIXED_SINGLE)},
    {SWIG_LUA_CONSTTAB_INT("Recorder_Mode_FIXED_DOUBLE", dsp::Recorder::Mode::FIXED_DOUBLE)},
    {SWIG_LUA_CONSTTAB_INT("Recorder_Mode_VARIABLE", dsp::Recorder::Mode::VARIABLE)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_SwigModule_methods[]= {
    { "byteToUnipolar", _wrap_byteToUnipolar},
    { "unipolarToByte", _wrap_unipolarToByte},
    { "shortToBipolar", _wrap_shortToBipolar},
    { "bipolarToShort", _wrap_bipolarToShort},
    { "clip", _wrap_clip},
    { "wrap", _wrap_wrap},
    { "linear", _wrap_linear},
    { "hermite", _wrap_hermite},
    { "MidiMessage_noteOff", _wrap_MidiMessage_noteOff},
    { "MidiMessage_noteOn", _wrap_MidiMessage_noteOn},
    { "MidiMessage_aftertouchChange", _wrap_MidiMessage_aftertouchChange},
    { "MidiMessage_controllerEvent", _wrap_MidiMessage_controllerEvent},
    { "MidiMessage_programChange", _wrap_MidiMessage_programChange},
    { "MidiMessage_channelPressureChange", _wrap_MidiMessage_channelPressureChange},
    { "MidiMessage_pitchWheel", _wrap_MidiMessage_pitchWheel},
    { "MidiMessage_allNotesOff", _wrap_MidiMessage_allNotesOff},
    { "MidiMessage_songPositionPointer", _wrap_MidiMessage_songPositionPointer},
    { "MidiMessage_midiClock", _wrap_MidiMessage_midiClock},
    { "MidiMessage_midiStart", _wrap_MidiMessage_midiStart},
    { "MidiMessage_midiContinue", _wrap_MidiMessage_midiContinue},
    { "MidiMessage_midiStop", _wrap_MidiMessage_midiStop},
    {0,0}
};
static swig_lua_class* swig_SwigModule_classes[]= {
&_wrap_class_Shape,
&_wrap_class_Interpolation,
&_wrap_class_ScaledFFT,
&_wrap_class_MidiBuffer,
&_wrap_class_MidiMessage,
&_wrap_class_TimedMidiMessage,
&_wrap_class_Producer,
&_wrap_class_Transformer,
&_wrap_class_Consumer,
&_wrap_class_Recorder,
&_wrap_class_ChannelMerger,
&_wrap_class_ChannelSplitter,
&_wrap_class_MidSide,
&_wrap_class_Spread,
&_wrap_class_StereoPanner,
&_wrap_class_Convolver,
&_wrap_class_VariableDelay,
&_wrap_class_Clipper,
&_wrap_class_CompressorGate,
&_wrap_class_DryWet,
&_wrap_class_Envelope,
&_wrap_class_Lag,
&_wrap_class_Shaper,
&_wrap_class_MidiInput,
&_wrap_class_MidiOutput,
&_wrap_class_Biquad,
&_wrap_class_Crossover,
&_wrap_class_OnePole,
&_wrap_class_FunctionOscillator,
&_wrap_class_MoorerOscillator,
&_wrap_class_Noise,
&_wrap_class_Phasor,
&_wrap_class_SamplePlayer,
&_wrap_class_TableOscillator,
&_wrap_class_AbsoluteValue,
&_wrap_class_BooleanMask,
&_wrap_class_Comparison,
&_wrap_class_Division,
&_wrap_class_Floor,
&_wrap_class_ForwardFFT,
&_wrap_class_FrequencyToNote,
&_wrap_class_Hyperbolic,
&_wrap_class_Identity,
&_wrap_class_InverseFFT,
&_wrap_class_Logarithm,
&_wrap_class_Modulo,
&_wrap_class_Multiplication,
&_wrap_class_Negative,
&_wrap_class_NotGate,
&_wrap_class_NoteToFrequency,
&_wrap_class_Power,
&_wrap_class_Reciprocal,
&_wrap_class_Trigonometric,
&_wrap_class_ClockTrigger,
&_wrap_class_Differentiator,
&_wrap_class_Integrator,
&_wrap_class_OnOff,
&_wrap_class_ResetTrigger,
&_wrap_class_SampleAndHold,
&_wrap_class_Sequencer,
&_wrap_class_TriggerHold,
&_wrap_class_BufferDuration,
&_wrap_class_BufferRate,
&_wrap_class_SampleDuration,
&_wrap_class_SampleRate,
    0
};
static swig_lua_namespace* swig_SwigModule_namespaces[] = {
    0
};

static swig_lua_namespace swig_SwigModule = {
    "nodes",
    swig_SwigModule_methods,
    swig_SwigModule_attributes,
    swig_SwigModule_constants,
    swig_SwigModule_classes,
    swig_SwigModule_namespaces
};
#ifdef __cplusplus
}
#endif

/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static void *_p_dsp__FloorTo_p_dsp__Producer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((dsp::Producer *) (dsp::Transformer *) ((dsp::Floor *) x));
}
static void *_p_dsp__EnvelopeTo_p_dsp__Producer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((dsp::Producer *)  ((dsp::Envelope *) x));
}
static void *_p_dsp__ChannelMergerTo_p_dsp__Producer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((dsp::Producer *)  ((dsp::ChannelMerger *) x));
}
static void *_p_dsp__ReciprocalTo_p_dsp__Producer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((dsp::Producer *) (dsp::Transformer *) ((dsp::Reciprocal *) x));
}
static void *_p_dsp__NoiseTo_p_dsp__Producer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((dsp::Producer *)  ((dsp::Noise *) x));
}
static void *_p_dsp__NegativeTo_p_dsp__Producer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((dsp::Producer *) (dsp::Transformer *) ((dsp::Negative *) x));
}
static void *_p_dsp__SequencerTo_p_dsp__Producer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((dsp::Producer *)  ((dsp::Sequencer *) x));
}
static void *_p_dsp__MultiplicationTo_p_dsp__Producer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((dsp::Producer *) (dsp::Transformer *) ((dsp::Multiplication *) x));
}
static void *_p_dsp__InverseFFTTo_p_dsp__Producer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((dsp::Producer *)  ((dsp::InverseFFT *) x));
}
static void *_p_dsp__TransformerTo_p_dsp__Producer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((dsp::Producer *)  ((dsp::Transformer *) x));
}
static void *_p_dsp__IntegratorTo_p_dsp__Producer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((dsp::Producer *) (dsp::Transformer *) ((dsp::Integrator *) x));
}
static void *_p_dsp__TriggerHoldTo_p_dsp__Producer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((dsp::Producer *) (dsp::Transformer *) ((dsp::TriggerHold *) x));
}
static void *_p_dsp__BufferRateTo_p_dsp__Producer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((dsp::Producer *)  ((dsp::BufferRate *) x));
}
static void *_p_dsp__BufferDurationTo_p_dsp__Producer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((dsp::Producer *)  ((dsp::BufferDuration *) x));
}
static void *_p_dsp__SampleDurationTo_p_dsp__Producer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((dsp::Producer *)  ((dsp::SampleDuration *) x));
}
static void *_p_dsp__DryWetTo_p_dsp__Producer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((dsp::Producer *)  ((dsp::DryWet *) x));
}
static void *_p_dsp__BooleanMaskTo_p_dsp__Producer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((dsp::Producer *) (dsp::Transformer *) ((dsp::BooleanMask *) x));
}
static void *_p_dsp__ShaperTo_p_dsp__Producer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((dsp::Producer *) (dsp::Transformer *) ((dsp::Shaper *) x));
}
static void *_p_dsp__SampleRateTo_p_dsp__Producer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((dsp::Producer *)  ((dsp::SampleRate *) x));
}
static void *_p_dsp__LagTo_p_dsp__Producer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((dsp::Producer *) (dsp::Transformer *) ((dsp::Lag *) x));
}
static void *_p_dsp__ComparisonTo_p_dsp__Producer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((dsp::Producer *) (dsp::Transformer *) ((dsp::Comparison *) x));
}
static void *_p_dsp__PhasorTo_p_dsp__Producer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((dsp::Producer *)  ((dsp::Phasor *) x));
}
static void *_p_dsp__ConvolverTo_p_dsp__Producer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((dsp::Producer *) (dsp::Transformer *) ((dsp::Convolver *) x));
}
static void *_p_dsp__CompressorGateTo_p_dsp__Producer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((dsp::Producer *) (dsp::Transformer *) ((dsp::CompressorGate *) x));
}
static void *_p_dsp__OnePoleTo_p_dsp__Producer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((dsp::Producer *) (dsp::Transformer *) ((dsp::OnePole *) x));
}
static void *_p_dsp__DifferentiatorTo_p_dsp__Producer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((dsp::Producer *) (dsp::Transformer *) ((dsp::Differentiator *) x));
}
static void *_p_dsp__NoteToFrequencyTo_p_dsp__Producer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((dsp::Producer *) (dsp::Transformer *) ((dsp::NoteToFrequency *) x));
}
static void *_p_dsp__PowerTo_p_dsp__Producer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((dsp::Producer *) (dsp::Transformer *) ((dsp::Power *) x));
}
static void *_p_dsp__OnOffTo_p_dsp__Producer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((dsp::Producer *)  ((dsp::OnOff *) x));
}
static void *_p_dsp__VariableDelayTo_p_dsp__Producer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((dsp::Producer *) (dsp::Transformer *) ((dsp::VariableDelay *) x));
}
static void *_p_dsp__TableOscillatorTo_p_dsp__Producer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((dsp::Producer *)  ((dsp::TableOscillator *) x));
}
static void *_p_dsp__MoorerOscillatorTo_p_dsp__Producer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((dsp::Producer *)  ((dsp::MoorerOscillator *) x));
}
static void *_p_dsp__FunctionOscillatorTo_p_dsp__Producer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((dsp::Producer *)  ((dsp::FunctionOscillator *) x));
}
static void *_p_dsp__NotGateTo_p_dsp__Producer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((dsp::Producer *) (dsp::Transformer *) ((dsp::NotGate *) x));
}
static void *_p_dsp__HyperbolicTo_p_dsp__Producer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((dsp::Producer *) (dsp::Transformer *) ((dsp::Hyperbolic *) x));
}
static void *_p_dsp__BiquadTo_p_dsp__Producer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((dsp::Producer *) (dsp::Transformer *) ((dsp::Biquad *) x));
}
static void *_p_dsp__SampleAndHoldTo_p_dsp__Producer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((dsp::Producer *) (dsp::Transformer *) ((dsp::SampleAndHold *) x));
}
static void *_p_dsp__ModuloTo_p_dsp__Producer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((dsp::Producer *) (dsp::Transformer *) ((dsp::Modulo *) x));
}
static void *_p_dsp__FrequencyToNoteTo_p_dsp__Producer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((dsp::Producer *) (dsp::Transformer *) ((dsp::FrequencyToNote *) x));
}
static void *_p_dsp__MidiInputTo_p_dsp__Producer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((dsp::Producer *)  ((dsp::MidiInput *) x));
}
static void *_p_dsp__TrigonometricTo_p_dsp__Producer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((dsp::Producer *) (dsp::Transformer *) ((dsp::Trigonometric *) x));
}
static void *_p_dsp__ClockTriggerTo_p_dsp__Producer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((dsp::Producer *)  ((dsp::ClockTrigger *) x));
}
static void *_p_dsp__ResetTriggerTo_p_dsp__Producer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((dsp::Producer *)  ((dsp::ResetTrigger *) x));
}
static void *_p_dsp__SamplePlayerTo_p_dsp__Producer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((dsp::Producer *)  ((dsp::SamplePlayer *) x));
}
static void *_p_dsp__LogarithmTo_p_dsp__Producer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((dsp::Producer *) (dsp::Transformer *) ((dsp::Logarithm *) x));
}
static void *_p_dsp__IdentityTo_p_dsp__Producer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((dsp::Producer *) (dsp::Transformer *) ((dsp::Identity *) x));
}
static void *_p_dsp__ClipperTo_p_dsp__Producer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((dsp::Producer *) (dsp::Transformer *) ((dsp::Clipper *) x));
}
static void *_p_dsp__SpreadTo_p_dsp__Producer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((dsp::Producer *) (dsp::Transformer *) ((dsp::Spread *) x));
}
static void *_p_dsp__AbsoluteValueTo_p_dsp__Producer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((dsp::Producer *) (dsp::Transformer *) ((dsp::AbsoluteValue *) x));
}
static void *_p_dsp__DivisionTo_p_dsp__Producer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((dsp::Producer *) (dsp::Transformer *) ((dsp::Division *) x));
}
static void *_p_dsp__RecorderTo_p_dsp__Consumer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((dsp::Consumer *)  ((dsp::Recorder *) x));
}
static void *_p_dsp__MidSideTo_p_dsp__Consumer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((dsp::Consumer *)  ((dsp::MidSide *) x));
}
static void *_p_dsp__ChannelSplitterTo_p_dsp__Consumer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((dsp::Consumer *)  ((dsp::ChannelSplitter *) x));
}
static void *_p_dsp__StereoPannerTo_p_dsp__Consumer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((dsp::Consumer *)  ((dsp::StereoPanner *) x));
}
static void *_p_dsp__MidiOutputTo_p_dsp__Consumer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((dsp::Consumer *)  ((dsp::MidiOutput *) x));
}
static void *_p_dsp__ForwardFFTTo_p_dsp__Consumer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((dsp::Consumer *)  ((dsp::ForwardFFT *) x));
}
static void *_p_dsp__BooleanMaskTo_p_dsp__Transformer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((dsp::Transformer *)  ((dsp::BooleanMask *) x));
}
static void *_p_dsp__HyperbolicTo_p_dsp__Transformer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((dsp::Transformer *)  ((dsp::Hyperbolic *) x));
}
static void *_p_dsp__MultiplicationTo_p_dsp__Transformer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((dsp::Transformer *)  ((dsp::Multiplication *) x));
}
static void *_p_dsp__ReciprocalTo_p_dsp__Transformer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((dsp::Transformer *)  ((dsp::Reciprocal *) x));
}
static void *_p_dsp__SampleAndHoldTo_p_dsp__Transformer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((dsp::Transformer *)  ((dsp::SampleAndHold *) x));
}
static void *_p_dsp__AbsoluteValueTo_p_dsp__Transformer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((dsp::Transformer *)  ((dsp::AbsoluteValue *) x));
}
static void *_p_dsp__ComparisonTo_p_dsp__Transformer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((dsp::Transformer *)  ((dsp::Comparison *) x));
}
static void *_p_dsp__SpreadTo_p_dsp__Transformer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((dsp::Transformer *)  ((dsp::Spread *) x));
}
static void *_p_dsp__DifferentiatorTo_p_dsp__Transformer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((dsp::Transformer *)  ((dsp::Differentiator *) x));
}
static void *_p_dsp__FrequencyToNoteTo_p_dsp__Transformer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((dsp::Transformer *)  ((dsp::FrequencyToNote *) x));
}
static void *_p_dsp__ModuloTo_p_dsp__Transformer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((dsp::Transformer *)  ((dsp::Modulo *) x));
}
static void *_p_dsp__NegativeTo_p_dsp__Transformer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((dsp::Transformer *)  ((dsp::Negative *) x));
}
static void *_p_dsp__TrigonometricTo_p_dsp__Transformer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((dsp::Transformer *)  ((dsp::Trigonometric *) x));
}
static void *_p_dsp__TriggerHoldTo_p_dsp__Transformer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((dsp::Transformer *)  ((dsp::TriggerHold *) x));
}
static void *_p_dsp__DivisionTo_p_dsp__Transformer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((dsp::Transformer *)  ((dsp::Division *) x));
}
static void *_p_dsp__OnePoleTo_p_dsp__Transformer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((dsp::Transformer *)  ((dsp::OnePole *) x));
}
static void *_p_dsp__NotGateTo_p_dsp__Transformer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((dsp::Transformer *)  ((dsp::NotGate *) x));
}
static void *_p_dsp__IntegratorTo_p_dsp__Transformer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((dsp::Transformer *)  ((dsp::Integrator *) x));
}
static void *_p_dsp__IdentityTo_p_dsp__Transformer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((dsp::Transformer *)  ((dsp::Identity *) x));
}
static void *_p_dsp__LogarithmTo_p_dsp__Transformer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((dsp::Transformer *)  ((dsp::Logarithm *) x));
}
static void *_p_dsp__ConvolverTo_p_dsp__Transformer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((dsp::Transformer *)  ((dsp::Convolver *) x));
}
static void *_p_dsp__ShaperTo_p_dsp__Transformer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((dsp::Transformer *)  ((dsp::Shaper *) x));
}
static void *_p_dsp__FloorTo_p_dsp__Transformer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((dsp::Transformer *)  ((dsp::Floor *) x));
}
static void *_p_dsp__LagTo_p_dsp__Transformer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((dsp::Transformer *)  ((dsp::Lag *) x));
}
static void *_p_dsp__ClipperTo_p_dsp__Transformer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((dsp::Transformer *)  ((dsp::Clipper *) x));
}
static void *_p_dsp__PowerTo_p_dsp__Transformer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((dsp::Transformer *)  ((dsp::Power *) x));
}
static void *_p_dsp__CompressorGateTo_p_dsp__Transformer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((dsp::Transformer *)  ((dsp::CompressorGate *) x));
}
static void *_p_dsp__BiquadTo_p_dsp__Transformer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((dsp::Transformer *)  ((dsp::Biquad *) x));
}
static void *_p_dsp__VariableDelayTo_p_dsp__Transformer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((dsp::Transformer *)  ((dsp::VariableDelay *) x));
}
static void *_p_dsp__NoteToFrequencyTo_p_dsp__Transformer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((dsp::Transformer *)  ((dsp::NoteToFrequency *) x));
}
static swig_type_info _swigt__p_MidiMessage = {"_p_MidiMessage", "MidiMessage *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_double = {"_p_double", "dsp::Sample *|double *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_dsp__AbsoluteValue = {"_p_dsp__AbsoluteValue", "dsp::AbsoluteValue *", 0, 0, (void*)&_wrap_class_AbsoluteValue, 0};
static swig_type_info _swigt__p_dsp__AudioBufferT_dsp__Sample_t = {"_p_dsp__AudioBufferT_dsp__Sample_t", "dsp::Data *|dsp::AudioBuffer< Sample > *|dsp::AudioBuffer< dsp::Sample > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_dsp__AudioWrapperT_dsp__Sample_t = {"_p_dsp__AudioWrapperT_dsp__Sample_t", "dsp::AudioWrapper< Sample > *|dsp::Wrapper *|dsp::AudioWrapper< dsp::Sample > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_dsp__Biquad = {"_p_dsp__Biquad", "dsp::Biquad *", 0, 0, (void*)&_wrap_class_Biquad, 0};
static swig_type_info _swigt__p_dsp__BooleanMask = {"_p_dsp__BooleanMask", "dsp::BooleanMask *", 0, 0, (void*)&_wrap_class_BooleanMask, 0};
static swig_type_info _swigt__p_dsp__BufferDuration = {"_p_dsp__BufferDuration", "dsp::BufferDuration *", 0, 0, (void*)&_wrap_class_BufferDuration, 0};
static swig_type_info _swigt__p_dsp__BufferRate = {"_p_dsp__BufferRate", "dsp::BufferRate *", 0, 0, (void*)&_wrap_class_BufferRate, 0};
static swig_type_info _swigt__p_dsp__ChannelMerger = {"_p_dsp__ChannelMerger", "dsp::ChannelMerger *", 0, 0, (void*)&_wrap_class_ChannelMerger, 0};
static swig_type_info _swigt__p_dsp__ChannelSplitter = {"_p_dsp__ChannelSplitter", "dsp::ChannelSplitter *", 0, 0, (void*)&_wrap_class_ChannelSplitter, 0};
static swig_type_info _swigt__p_dsp__Clipper = {"_p_dsp__Clipper", "dsp::Clipper *", 0, 0, (void*)&_wrap_class_Clipper, 0};
static swig_type_info _swigt__p_dsp__ClockTrigger = {"_p_dsp__ClockTrigger", "dsp::ClockTrigger *", 0, 0, (void*)&_wrap_class_ClockTrigger, 0};
static swig_type_info _swigt__p_dsp__Comparison = {"_p_dsp__Comparison", "dsp::Comparison *", 0, 0, (void*)&_wrap_class_Comparison, 0};
static swig_type_info _swigt__p_dsp__CompressorGate = {"_p_dsp__CompressorGate", "dsp::CompressorGate *", 0, 0, (void*)&_wrap_class_CompressorGate, 0};
static swig_type_info _swigt__p_dsp__Consumer = {"_p_dsp__Consumer", "dsp::Consumer *", 0, 0, (void*)&_wrap_class_Consumer, 0};
static swig_type_info _swigt__p_dsp__Convolver = {"_p_dsp__Convolver", "dsp::Convolver *", 0, 0, (void*)&_wrap_class_Convolver, 0};
static swig_type_info _swigt__p_dsp__Crossover = {"_p_dsp__Crossover", "dsp::Crossover *", 0, 0, (void*)&_wrap_class_Crossover, 0};
static swig_type_info _swigt__p_dsp__Differentiator = {"_p_dsp__Differentiator", "dsp::Differentiator *", 0, 0, (void*)&_wrap_class_Differentiator, 0};
static swig_type_info _swigt__p_dsp__Division = {"_p_dsp__Division", "dsp::Division *", 0, 0, (void*)&_wrap_class_Division, 0};
static swig_type_info _swigt__p_dsp__DryWet = {"_p_dsp__DryWet", "dsp::DryWet *", 0, 0, (void*)&_wrap_class_DryWet, 0};
static swig_type_info _swigt__p_dsp__Envelope = {"_p_dsp__Envelope", "dsp::Envelope *", 0, 0, (void*)&_wrap_class_Envelope, 0};
static swig_type_info _swigt__p_dsp__Floor = {"_p_dsp__Floor", "dsp::Floor *", 0, 0, (void*)&_wrap_class_Floor, 0};
static swig_type_info _swigt__p_dsp__ForwardFFT = {"_p_dsp__ForwardFFT", "dsp::ForwardFFT *", 0, 0, (void*)&_wrap_class_ForwardFFT, 0};
static swig_type_info _swigt__p_dsp__FrequencyToNote = {"_p_dsp__FrequencyToNote", "dsp::FrequencyToNote *", 0, 0, (void*)&_wrap_class_FrequencyToNote, 0};
static swig_type_info _swigt__p_dsp__FunctionOscillator = {"_p_dsp__FunctionOscillator", "dsp::FunctionOscillator *", 0, 0, (void*)&_wrap_class_FunctionOscillator, 0};
static swig_type_info _swigt__p_dsp__Hyperbolic = {"_p_dsp__Hyperbolic", "dsp::Hyperbolic *", 0, 0, (void*)&_wrap_class_Hyperbolic, 0};
static swig_type_info _swigt__p_dsp__Identity = {"_p_dsp__Identity", "dsp::Identity *", 0, 0, (void*)&_wrap_class_Identity, 0};
static swig_type_info _swigt__p_dsp__Integrator = {"_p_dsp__Integrator", "dsp::Integrator *", 0, 0, (void*)&_wrap_class_Integrator, 0};
static swig_type_info _swigt__p_dsp__Interpolation = {"_p_dsp__Interpolation", "dsp::Interpolation *", 0, 0, (void*)&_wrap_class_Interpolation, 0};
static swig_type_info _swigt__p_dsp__InverseFFT = {"_p_dsp__InverseFFT", "dsp::InverseFFT *", 0, 0, (void*)&_wrap_class_InverseFFT, 0};
static swig_type_info _swigt__p_dsp__Lag = {"_p_dsp__Lag", "dsp::Lag *", 0, 0, (void*)&_wrap_class_Lag, 0};
static swig_type_info _swigt__p_dsp__Logarithm = {"_p_dsp__Logarithm", "dsp::Logarithm *", 0, 0, (void*)&_wrap_class_Logarithm, 0};
static swig_type_info _swigt__p_dsp__MidSide = {"_p_dsp__MidSide", "dsp::MidSide *", 0, 0, (void*)&_wrap_class_MidSide, 0};
static swig_type_info _swigt__p_dsp__MidiBuffer = {"_p_dsp__MidiBuffer", "dsp::MidiBuffer *", 0, 0, (void*)&_wrap_class_MidiBuffer, 0};
static swig_type_info _swigt__p_dsp__MidiBuffer__Iterator = {"_p_dsp__MidiBuffer__Iterator", "dsp::MidiBuffer::Iterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_dsp__MidiInput = {"_p_dsp__MidiInput", "dsp::MidiInput *", 0, 0, (void*)&_wrap_class_MidiInput, 0};
static swig_type_info _swigt__p_dsp__MidiMessage = {"_p_dsp__MidiMessage", "dsp::MidiMessage *", 0, 0, (void*)&_wrap_class_MidiMessage, 0};
static swig_type_info _swigt__p_dsp__MidiOutput = {"_p_dsp__MidiOutput", "dsp::MidiOutput *", 0, 0, (void*)&_wrap_class_MidiOutput, 0};
static swig_type_info _swigt__p_dsp__Modulo = {"_p_dsp__Modulo", "dsp::Modulo *", 0, 0, (void*)&_wrap_class_Modulo, 0};
static swig_type_info _swigt__p_dsp__MoorerOscillator = {"_p_dsp__MoorerOscillator", "dsp::MoorerOscillator *", 0, 0, (void*)&_wrap_class_MoorerOscillator, 0};
static swig_type_info _swigt__p_dsp__Multiplication = {"_p_dsp__Multiplication", "dsp::Multiplication *", 0, 0, (void*)&_wrap_class_Multiplication, 0};
static swig_type_info _swigt__p_dsp__Negative = {"_p_dsp__Negative", "dsp::Negative *", 0, 0, (void*)&_wrap_class_Negative, 0};
static swig_type_info _swigt__p_dsp__Noise = {"_p_dsp__Noise", "dsp::Noise *", 0, 0, (void*)&_wrap_class_Noise, 0};
static swig_type_info _swigt__p_dsp__NotGate = {"_p_dsp__NotGate", "dsp::NotGate *", 0, 0, (void*)&_wrap_class_NotGate, 0};
static swig_type_info _swigt__p_dsp__NoteToFrequency = {"_p_dsp__NoteToFrequency", "dsp::NoteToFrequency *", 0, 0, (void*)&_wrap_class_NoteToFrequency, 0};
static swig_type_info _swigt__p_dsp__OnOff = {"_p_dsp__OnOff", "dsp::OnOff *", 0, 0, (void*)&_wrap_class_OnOff, 0};
static swig_type_info _swigt__p_dsp__OnePole = {"_p_dsp__OnePole", "dsp::OnePole *", 0, 0, (void*)&_wrap_class_OnePole, 0};
static swig_type_info _swigt__p_dsp__Phasor = {"_p_dsp__Phasor", "dsp::Phasor *", 0, 0, (void*)&_wrap_class_Phasor, 0};
static swig_type_info _swigt__p_dsp__Power = {"_p_dsp__Power", "dsp::Power *", 0, 0, (void*)&_wrap_class_Power, 0};
static swig_type_info _swigt__p_dsp__Producer = {"_p_dsp__Producer", "dsp::Producer *", 0, 0, (void*)&_wrap_class_Producer, 0};
static swig_type_info _swigt__p_dsp__Reciprocal = {"_p_dsp__Reciprocal", "dsp::Reciprocal *", 0, 0, (void*)&_wrap_class_Reciprocal, 0};
static swig_type_info _swigt__p_dsp__Recorder = {"_p_dsp__Recorder", "dsp::Recorder *", 0, 0, (void*)&_wrap_class_Recorder, 0};
static swig_type_info _swigt__p_dsp__ResetTrigger = {"_p_dsp__ResetTrigger", "dsp::ResetTrigger *", 0, 0, (void*)&_wrap_class_ResetTrigger, 0};
static swig_type_info _swigt__p_dsp__SampleAndHold = {"_p_dsp__SampleAndHold", "dsp::SampleAndHold *", 0, 0, (void*)&_wrap_class_SampleAndHold, 0};
static swig_type_info _swigt__p_dsp__SampleDuration = {"_p_dsp__SampleDuration", "dsp::SampleDuration *", 0, 0, (void*)&_wrap_class_SampleDuration, 0};
static swig_type_info _swigt__p_dsp__SamplePlayer = {"_p_dsp__SamplePlayer", "dsp::SamplePlayer *", 0, 0, (void*)&_wrap_class_SamplePlayer, 0};
static swig_type_info _swigt__p_dsp__SampleRate = {"_p_dsp__SampleRate", "dsp::SampleRate *", 0, 0, (void*)&_wrap_class_SampleRate, 0};
static swig_type_info _swigt__p_dsp__ScaledFFT = {"_p_dsp__ScaledFFT", "dsp::ScaledFFT *", 0, 0, (void*)&_wrap_class_ScaledFFT, 0};
static swig_type_info _swigt__p_dsp__Sequencer = {"_p_dsp__Sequencer", "dsp::Sequencer *", 0, 0, (void*)&_wrap_class_Sequencer, 0};
static swig_type_info _swigt__p_dsp__Shape = {"_p_dsp__Shape", "dsp::Shape *", 0, 0, (void*)&_wrap_class_Shape, 0};
static swig_type_info _swigt__p_dsp__Shaper = {"_p_dsp__Shaper", "dsp::Shaper *", 0, 0, (void*)&_wrap_class_Shaper, 0};
static swig_type_info _swigt__p_dsp__Spread = {"_p_dsp__Spread", "dsp::Spread *", 0, 0, (void*)&_wrap_class_Spread, 0};
static swig_type_info _swigt__p_dsp__StereoPanner = {"_p_dsp__StereoPanner", "dsp::StereoPanner *", 0, 0, (void*)&_wrap_class_StereoPanner, 0};
static swig_type_info _swigt__p_dsp__TableOscillator = {"_p_dsp__TableOscillator", "dsp::TableOscillator *", 0, 0, (void*)&_wrap_class_TableOscillator, 0};
static swig_type_info _swigt__p_dsp__TimedMidiMessage = {"_p_dsp__TimedMidiMessage", "dsp::TimedMidiMessage *", 0, 0, (void*)&_wrap_class_TimedMidiMessage, 0};
static swig_type_info _swigt__p_dsp__Transformer = {"_p_dsp__Transformer", "dsp::Transformer *", 0, 0, (void*)&_wrap_class_Transformer, 0};
static swig_type_info _swigt__p_dsp__TriggerHold = {"_p_dsp__TriggerHold", "dsp::TriggerHold *", 0, 0, (void*)&_wrap_class_TriggerHold, 0};
static swig_type_info _swigt__p_dsp__Trigonometric = {"_p_dsp__Trigonometric", "dsp::Trigonometric *", 0, 0, (void*)&_wrap_class_Trigonometric, 0};
static swig_type_info _swigt__p_dsp__VariableDelay = {"_p_dsp__VariableDelay", "dsp::VariableDelay *", 0, 0, (void*)&_wrap_class_VariableDelay, 0};
static swig_type_info _swigt__p_std__functionT_void_fF_t = {"_p_std__functionT_void_fF_t", "std::function< void () > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__shared_ptrT_Buffer_t = {"_p_std__shared_ptrT_Buffer_t", "std::shared_ptr< Buffer > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__shared_ptrT_Input_t = {"_p_std__shared_ptrT_Input_t", "std::shared_ptr< Input > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__shared_ptrT_Node_t = {"_p_std__shared_ptrT_Node_t", "std::shared_ptr< Node > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__shared_ptrT_Output_t = {"_p_std__shared_ptrT_Output_t", "std::shared_ptr< Output > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__shared_ptrT_dsp__Buffer_t = {"_p_std__shared_ptrT_dsp__Buffer_t", "std::shared_ptr< dsp::Buffer > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__shared_ptrT_dsp__MidiBuffer_t = {"_p_std__shared_ptrT_dsp__MidiBuffer_t", "std::shared_ptr< dsp::MidiBuffer > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__shared_ptrT_std__functionT_double_fdoubleF_t_t = {"_p_std__shared_ptrT_std__functionT_double_fdoubleF_t_t", "std::shared_ptr< std::function< double (double) > > *|std::shared_ptr< std::function< dsp::Sample (dsp::Sample) > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__unordered_setT_uint8_t_t = {"_p_std__unordered_setT_uint8_t_t", "std::unordered_set< dsp::uint8 > *|std::unordered_set< uint8_t > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_double_t = {"_p_std__vectorT_double_t", "dsp::Array *|std::vector< double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_std__shared_ptrT_Buffer_t_t = {"_p_std__vectorT_std__shared_ptrT_Buffer_t_t", "std::vector< std::shared_ptr< Buffer > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_uint8_t_t = {"_p_std__vectorT_uint8_t_t", "std::vector< uint8_t > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_uint8_t = {"_p_uint8_t", "dsp::uint8 *|uint8_t *", 0, 0, (void*)0, 0};

static swig_type_info *swig_type_initial[] = {
  &_swigt__p_MidiMessage,
  &_swigt__p_double,
  &_swigt__p_dsp__AbsoluteValue,
  &_swigt__p_dsp__AudioBufferT_dsp__Sample_t,
  &_swigt__p_dsp__AudioWrapperT_dsp__Sample_t,
  &_swigt__p_dsp__Biquad,
  &_swigt__p_dsp__BooleanMask,
  &_swigt__p_dsp__BufferDuration,
  &_swigt__p_dsp__BufferRate,
  &_swigt__p_dsp__ChannelMerger,
  &_swigt__p_dsp__ChannelSplitter,
  &_swigt__p_dsp__Clipper,
  &_swigt__p_dsp__ClockTrigger,
  &_swigt__p_dsp__Comparison,
  &_swigt__p_dsp__CompressorGate,
  &_swigt__p_dsp__Consumer,
  &_swigt__p_dsp__Convolver,
  &_swigt__p_dsp__Crossover,
  &_swigt__p_dsp__Differentiator,
  &_swigt__p_dsp__Division,
  &_swigt__p_dsp__DryWet,
  &_swigt__p_dsp__Envelope,
  &_swigt__p_dsp__Floor,
  &_swigt__p_dsp__ForwardFFT,
  &_swigt__p_dsp__FrequencyToNote,
  &_swigt__p_dsp__FunctionOscillator,
  &_swigt__p_dsp__Hyperbolic,
  &_swigt__p_dsp__Identity,
  &_swigt__p_dsp__Integrator,
  &_swigt__p_dsp__Interpolation,
  &_swigt__p_dsp__InverseFFT,
  &_swigt__p_dsp__Lag,
  &_swigt__p_dsp__Logarithm,
  &_swigt__p_dsp__MidSide,
  &_swigt__p_dsp__MidiBuffer,
  &_swigt__p_dsp__MidiBuffer__Iterator,
  &_swigt__p_dsp__MidiInput,
  &_swigt__p_dsp__MidiMessage,
  &_swigt__p_dsp__MidiOutput,
  &_swigt__p_dsp__Modulo,
  &_swigt__p_dsp__MoorerOscillator,
  &_swigt__p_dsp__Multiplication,
  &_swigt__p_dsp__Negative,
  &_swigt__p_dsp__Noise,
  &_swigt__p_dsp__NotGate,
  &_swigt__p_dsp__NoteToFrequency,
  &_swigt__p_dsp__OnOff,
  &_swigt__p_dsp__OnePole,
  &_swigt__p_dsp__Phasor,
  &_swigt__p_dsp__Power,
  &_swigt__p_dsp__Producer,
  &_swigt__p_dsp__Reciprocal,
  &_swigt__p_dsp__Recorder,
  &_swigt__p_dsp__ResetTrigger,
  &_swigt__p_dsp__SampleAndHold,
  &_swigt__p_dsp__SampleDuration,
  &_swigt__p_dsp__SamplePlayer,
  &_swigt__p_dsp__SampleRate,
  &_swigt__p_dsp__ScaledFFT,
  &_swigt__p_dsp__Sequencer,
  &_swigt__p_dsp__Shape,
  &_swigt__p_dsp__Shaper,
  &_swigt__p_dsp__Spread,
  &_swigt__p_dsp__StereoPanner,
  &_swigt__p_dsp__TableOscillator,
  &_swigt__p_dsp__TimedMidiMessage,
  &_swigt__p_dsp__Transformer,
  &_swigt__p_dsp__TriggerHold,
  &_swigt__p_dsp__Trigonometric,
  &_swigt__p_dsp__VariableDelay,
  &_swigt__p_std__functionT_void_fF_t,
  &_swigt__p_std__shared_ptrT_Buffer_t,
  &_swigt__p_std__shared_ptrT_Input_t,
  &_swigt__p_std__shared_ptrT_Node_t,
  &_swigt__p_std__shared_ptrT_Output_t,
  &_swigt__p_std__shared_ptrT_dsp__Buffer_t,
  &_swigt__p_std__shared_ptrT_dsp__MidiBuffer_t,
  &_swigt__p_std__shared_ptrT_std__functionT_double_fdoubleF_t_t,
  &_swigt__p_std__unordered_setT_uint8_t_t,
  &_swigt__p_std__vectorT_double_t,
  &_swigt__p_std__vectorT_std__shared_ptrT_Buffer_t_t,
  &_swigt__p_std__vectorT_uint8_t_t,
  &_swigt__p_uint8_t,
};

static swig_cast_info _swigc__p_MidiMessage[] = {  {&_swigt__p_MidiMessage, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_double[] = {  {&_swigt__p_double, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dsp__AbsoluteValue[] = {  {&_swigt__p_dsp__AbsoluteValue, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dsp__AudioBufferT_dsp__Sample_t[] = {  {&_swigt__p_dsp__AudioBufferT_dsp__Sample_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dsp__AudioWrapperT_dsp__Sample_t[] = {  {&_swigt__p_dsp__AudioWrapperT_dsp__Sample_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dsp__Biquad[] = {  {&_swigt__p_dsp__Biquad, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dsp__BooleanMask[] = {  {&_swigt__p_dsp__BooleanMask, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dsp__BufferDuration[] = {  {&_swigt__p_dsp__BufferDuration, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dsp__BufferRate[] = {  {&_swigt__p_dsp__BufferRate, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dsp__ChannelMerger[] = {  {&_swigt__p_dsp__ChannelMerger, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dsp__ChannelSplitter[] = {  {&_swigt__p_dsp__ChannelSplitter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dsp__Clipper[] = {  {&_swigt__p_dsp__Clipper, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dsp__ClockTrigger[] = {  {&_swigt__p_dsp__ClockTrigger, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dsp__Comparison[] = {  {&_swigt__p_dsp__Comparison, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dsp__CompressorGate[] = {  {&_swigt__p_dsp__CompressorGate, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dsp__Consumer[] = {  {&_swigt__p_dsp__Recorder, _p_dsp__RecorderTo_p_dsp__Consumer, 0, 0},  {&_swigt__p_dsp__MidSide, _p_dsp__MidSideTo_p_dsp__Consumer, 0, 0},  {&_swigt__p_dsp__ChannelSplitter, _p_dsp__ChannelSplitterTo_p_dsp__Consumer, 0, 0},  {&_swigt__p_dsp__StereoPanner, _p_dsp__StereoPannerTo_p_dsp__Consumer, 0, 0},  {&_swigt__p_dsp__MidiOutput, _p_dsp__MidiOutputTo_p_dsp__Consumer, 0, 0},  {&_swigt__p_dsp__Consumer, 0, 0, 0},  {&_swigt__p_dsp__ForwardFFT, _p_dsp__ForwardFFTTo_p_dsp__Consumer, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dsp__Convolver[] = {  {&_swigt__p_dsp__Convolver, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dsp__Crossover[] = {  {&_swigt__p_dsp__Crossover, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dsp__Differentiator[] = {  {&_swigt__p_dsp__Differentiator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dsp__Division[] = {  {&_swigt__p_dsp__Division, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dsp__DryWet[] = {  {&_swigt__p_dsp__DryWet, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dsp__Envelope[] = {  {&_swigt__p_dsp__Envelope, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dsp__Floor[] = {  {&_swigt__p_dsp__Floor, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dsp__ForwardFFT[] = {  {&_swigt__p_dsp__ForwardFFT, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dsp__FrequencyToNote[] = {  {&_swigt__p_dsp__FrequencyToNote, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dsp__FunctionOscillator[] = {  {&_swigt__p_dsp__FunctionOscillator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dsp__Hyperbolic[] = {  {&_swigt__p_dsp__Hyperbolic, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dsp__Identity[] = {  {&_swigt__p_dsp__Identity, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dsp__Integrator[] = {  {&_swigt__p_dsp__Integrator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dsp__Interpolation[] = {  {&_swigt__p_dsp__Interpolation, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dsp__InverseFFT[] = {  {&_swigt__p_dsp__InverseFFT, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dsp__Lag[] = {  {&_swigt__p_dsp__Lag, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dsp__Logarithm[] = {  {&_swigt__p_dsp__Logarithm, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dsp__MidSide[] = {  {&_swigt__p_dsp__MidSide, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dsp__MidiBuffer[] = {  {&_swigt__p_dsp__MidiBuffer, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dsp__MidiBuffer__Iterator[] = {  {&_swigt__p_dsp__MidiBuffer__Iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dsp__MidiInput[] = {  {&_swigt__p_dsp__MidiInput, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dsp__MidiMessage[] = {  {&_swigt__p_dsp__MidiMessage, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dsp__MidiOutput[] = {  {&_swigt__p_dsp__MidiOutput, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dsp__Modulo[] = {  {&_swigt__p_dsp__Modulo, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dsp__MoorerOscillator[] = {  {&_swigt__p_dsp__MoorerOscillator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dsp__Multiplication[] = {  {&_swigt__p_dsp__Multiplication, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dsp__Negative[] = {  {&_swigt__p_dsp__Negative, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dsp__Noise[] = {  {&_swigt__p_dsp__Noise, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dsp__NotGate[] = {  {&_swigt__p_dsp__NotGate, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dsp__NoteToFrequency[] = {  {&_swigt__p_dsp__NoteToFrequency, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dsp__OnOff[] = {  {&_swigt__p_dsp__OnOff, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dsp__OnePole[] = {  {&_swigt__p_dsp__OnePole, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dsp__Phasor[] = {  {&_swigt__p_dsp__Phasor, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dsp__Power[] = {  {&_swigt__p_dsp__Power, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dsp__Producer[] = {  {&_swigt__p_dsp__Envelope, _p_dsp__EnvelopeTo_p_dsp__Producer, 0, 0},  {&_swigt__p_dsp__ChannelMerger, _p_dsp__ChannelMergerTo_p_dsp__Producer, 0, 0},  {&_swigt__p_dsp__Reciprocal, _p_dsp__ReciprocalTo_p_dsp__Producer, 0, 0},  {&_swigt__p_dsp__Floor, _p_dsp__FloorTo_p_dsp__Producer, 0, 0},  {&_swigt__p_dsp__Sequencer, _p_dsp__SequencerTo_p_dsp__Producer, 0, 0},  {&_swigt__p_dsp__Negative, _p_dsp__NegativeTo_p_dsp__Producer, 0, 0},  {&_swigt__p_dsp__Multiplication, _p_dsp__MultiplicationTo_p_dsp__Producer, 0, 0},  {&_swigt__p_dsp__Noise, _p_dsp__NoiseTo_p_dsp__Producer, 0, 0},  {&_swigt__p_dsp__Spread, _p_dsp__SpreadTo_p_dsp__Producer, 0, 0},  {&_swigt__p_dsp__InverseFFT, _p_dsp__InverseFFTTo_p_dsp__Producer, 0, 0},  {&_swigt__p_dsp__Transformer, _p_dsp__TransformerTo_p_dsp__Producer, 0, 0},  {&_swigt__p_dsp__Integrator, _p_dsp__IntegratorTo_p_dsp__Producer, 0, 0},  {&_swigt__p_dsp__TriggerHold, _p_dsp__TriggerHoldTo_p_dsp__Producer, 0, 0},  {&_swigt__p_dsp__BufferRate, _p_dsp__BufferRateTo_p_dsp__Producer, 0, 0},  {&_swigt__p_dsp__SampleDuration, _p_dsp__SampleDurationTo_p_dsp__Producer, 0, 0},  {&_swigt__p_dsp__BufferDuration, _p_dsp__BufferDurationTo_p_dsp__Producer, 0, 0},  {&_swigt__p_dsp__BooleanMask, _p_dsp__BooleanMaskTo_p_dsp__Producer, 0, 0},  {&_swigt__p_dsp__SampleRate, _p_dsp__SampleRateTo_p_dsp__Producer, 0, 0},  {&_swigt__p_dsp__Comparison, _p_dsp__ComparisonTo_p_dsp__Producer, 0, 0},  {&_swigt__p_dsp__Lag, _p_dsp__LagTo_p_dsp__Producer, 0, 0},  {&_swigt__p_dsp__Convolver, _p_dsp__ConvolverTo_p_dsp__Producer, 0, 0},  {&_swigt__p_dsp__OnePole, _p_dsp__OnePoleTo_p_dsp__Producer, 0, 0},  {&_swigt__p_dsp__Differentiator, _p_dsp__DifferentiatorTo_p_dsp__Producer, 0, 0},  {&_swigt__p_dsp__CompressorGate, _p_dsp__CompressorGateTo_p_dsp__Producer, 0, 0},  {&_swigt__p_dsp__NoteToFrequency, _p_dsp__NoteToFrequencyTo_p_dsp__Producer, 0, 0},  {&_swigt__p_dsp__VariableDelay, _p_dsp__VariableDelayTo_p_dsp__Producer, 0, 0},  {&_swigt__p_dsp__FunctionOscillator, _p_dsp__FunctionOscillatorTo_p_dsp__Producer, 0, 0},  {&_swigt__p_dsp__MoorerOscillator, _p_dsp__MoorerOscillatorTo_p_dsp__Producer, 0, 0},  {&_swigt__p_dsp__TableOscillator, _p_dsp__TableOscillatorTo_p_dsp__Producer, 0, 0},  {&_swigt__p_dsp__NotGate, _p_dsp__NotGateTo_p_dsp__Producer, 0, 0},  {&_swigt__p_dsp__Hyperbolic, _p_dsp__HyperbolicTo_p_dsp__Producer, 0, 0},  {&_swigt__p_dsp__SampleAndHold, _p_dsp__SampleAndHoldTo_p_dsp__Producer, 0, 0},  {&_swigt__p_dsp__DryWet, _p_dsp__DryWetTo_p_dsp__Producer, 0, 0},  {&_swigt__p_dsp__Power, _p_dsp__PowerTo_p_dsp__Producer, 0, 0},  {&_swigt__p_dsp__Producer, 0, 0, 0},  {&_swigt__p_dsp__FrequencyToNote, _p_dsp__FrequencyToNoteTo_p_dsp__Producer, 0, 0},  {&_swigt__p_dsp__OnOff, _p_dsp__OnOffTo_p_dsp__Producer, 0, 0},  {&_swigt__p_dsp__MidiInput, _p_dsp__MidiInputTo_p_dsp__Producer, 0, 0},  {&_swigt__p_dsp__Shaper, _p_dsp__ShaperTo_p_dsp__Producer, 0, 0},  {&_swigt__p_dsp__Trigonometric, _p_dsp__TrigonometricTo_p_dsp__Producer, 0, 0},  {&_swigt__p_dsp__ClockTrigger, _p_dsp__ClockTriggerTo_p_dsp__Producer, 0, 0},  {&_swigt__p_dsp__ResetTrigger, _p_dsp__ResetTriggerTo_p_dsp__Producer, 0, 0},  {&_swigt__p_dsp__Logarithm, _p_dsp__LogarithmTo_p_dsp__Producer, 0, 0},  {&_swigt__p_dsp__Identity, _p_dsp__IdentityTo_p_dsp__Producer, 0, 0},  {&_swigt__p_dsp__SamplePlayer, _p_dsp__SamplePlayerTo_p_dsp__Producer, 0, 0},  {&_swigt__p_dsp__Phasor, _p_dsp__PhasorTo_p_dsp__Producer, 0, 0},  {&_swigt__p_dsp__Clipper, _p_dsp__ClipperTo_p_dsp__Producer, 0, 0},  {&_swigt__p_dsp__AbsoluteValue, _p_dsp__AbsoluteValueTo_p_dsp__Producer, 0, 0},  {&_swigt__p_dsp__Biquad, _p_dsp__BiquadTo_p_dsp__Producer, 0, 0},  {&_swigt__p_dsp__Division, _p_dsp__DivisionTo_p_dsp__Producer, 0, 0},  {&_swigt__p_dsp__Modulo, _p_dsp__ModuloTo_p_dsp__Producer, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dsp__Reciprocal[] = {  {&_swigt__p_dsp__Reciprocal, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dsp__Recorder[] = {  {&_swigt__p_dsp__Recorder, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dsp__ResetTrigger[] = {  {&_swigt__p_dsp__ResetTrigger, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dsp__SampleAndHold[] = {  {&_swigt__p_dsp__SampleAndHold, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dsp__SampleDuration[] = {  {&_swigt__p_dsp__SampleDuration, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dsp__SamplePlayer[] = {  {&_swigt__p_dsp__SamplePlayer, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dsp__SampleRate[] = {  {&_swigt__p_dsp__SampleRate, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dsp__ScaledFFT[] = {  {&_swigt__p_dsp__ScaledFFT, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dsp__Sequencer[] = {  {&_swigt__p_dsp__Sequencer, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dsp__Shape[] = {  {&_swigt__p_dsp__Shape, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dsp__Shaper[] = {  {&_swigt__p_dsp__Shaper, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dsp__Spread[] = {  {&_swigt__p_dsp__Spread, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dsp__StereoPanner[] = {  {&_swigt__p_dsp__StereoPanner, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dsp__TableOscillator[] = {  {&_swigt__p_dsp__TableOscillator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dsp__TimedMidiMessage[] = {  {&_swigt__p_dsp__TimedMidiMessage, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dsp__Transformer[] = {  {&_swigt__p_dsp__BooleanMask, _p_dsp__BooleanMaskTo_p_dsp__Transformer, 0, 0},  {&_swigt__p_dsp__Transformer, 0, 0, 0},  {&_swigt__p_dsp__Spread, _p_dsp__SpreadTo_p_dsp__Transformer, 0, 0},  {&_swigt__p_dsp__Hyperbolic, _p_dsp__HyperbolicTo_p_dsp__Transformer, 0, 0},  {&_swigt__p_dsp__Modulo, _p_dsp__ModuloTo_p_dsp__Transformer, 0, 0},  {&_swigt__p_dsp__Lag, _p_dsp__LagTo_p_dsp__Transformer, 0, 0},  {&_swigt__p_dsp__Reciprocal, _p_dsp__ReciprocalTo_p_dsp__Transformer, 0, 0},  {&_swigt__p_dsp__SampleAndHold, _p_dsp__SampleAndHoldTo_p_dsp__Transformer, 0, 0},  {&_swigt__p_dsp__Multiplication, _p_dsp__MultiplicationTo_p_dsp__Transformer, 0, 0},  {&_swigt__p_dsp__AbsoluteValue, _p_dsp__AbsoluteValueTo_p_dsp__Transformer, 0, 0},  {&_swigt__p_dsp__Comparison, _p_dsp__ComparisonTo_p_dsp__Transformer, 0, 0},  {&_swigt__p_dsp__Differentiator, _p_dsp__DifferentiatorTo_p_dsp__Transformer, 0, 0},  {&_swigt__p_dsp__FrequencyToNote, _p_dsp__FrequencyToNoteTo_p_dsp__Transformer, 0, 0},  {&_swigt__p_dsp__Negative, _p_dsp__NegativeTo_p_dsp__Transformer, 0, 0},  {&_swigt__p_dsp__Trigonometric, _p_dsp__TrigonometricTo_p_dsp__Transformer, 0, 0},  {&_swigt__p_dsp__TriggerHold, _p_dsp__TriggerHoldTo_p_dsp__Transformer, 0, 0},  {&_swigt__p_dsp__Division, _p_dsp__DivisionTo_p_dsp__Transformer, 0, 0},  {&_swigt__p_dsp__OnePole, _p_dsp__OnePoleTo_p_dsp__Transformer, 0, 0},  {&_swigt__p_dsp__NotGate, _p_dsp__NotGateTo_p_dsp__Transformer, 0, 0},  {&_swigt__p_dsp__Integrator, _p_dsp__IntegratorTo_p_dsp__Transformer, 0, 0},  {&_swigt__p_dsp__Shaper, _p_dsp__ShaperTo_p_dsp__Transformer, 0, 0},  {&_swigt__p_dsp__Identity, _p_dsp__IdentityTo_p_dsp__Transformer, 0, 0},  {&_swigt__p_dsp__Logarithm, _p_dsp__LogarithmTo_p_dsp__Transformer, 0, 0},  {&_swigt__p_dsp__Convolver, _p_dsp__ConvolverTo_p_dsp__Transformer, 0, 0},  {&_swigt__p_dsp__Biquad, _p_dsp__BiquadTo_p_dsp__Transformer, 0, 0},  {&_swigt__p_dsp__Floor, _p_dsp__FloorTo_p_dsp__Transformer, 0, 0},  {&_swigt__p_dsp__Clipper, _p_dsp__ClipperTo_p_dsp__Transformer, 0, 0},  {&_swigt__p_dsp__Power, _p_dsp__PowerTo_p_dsp__Transformer, 0, 0},  {&_swigt__p_dsp__CompressorGate, _p_dsp__CompressorGateTo_p_dsp__Transformer, 0, 0},  {&_swigt__p_dsp__VariableDelay, _p_dsp__VariableDelayTo_p_dsp__Transformer, 0, 0},  {&_swigt__p_dsp__NoteToFrequency, _p_dsp__NoteToFrequencyTo_p_dsp__Transformer, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dsp__TriggerHold[] = {  {&_swigt__p_dsp__TriggerHold, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dsp__Trigonometric[] = {  {&_swigt__p_dsp__Trigonometric, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dsp__VariableDelay[] = {  {&_swigt__p_dsp__VariableDelay, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__functionT_void_fF_t[] = {  {&_swigt__p_std__functionT_void_fF_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__shared_ptrT_Buffer_t[] = {  {&_swigt__p_std__shared_ptrT_Buffer_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__shared_ptrT_Input_t[] = {  {&_swigt__p_std__shared_ptrT_Input_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__shared_ptrT_Node_t[] = {  {&_swigt__p_std__shared_ptrT_Node_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__shared_ptrT_Output_t[] = {  {&_swigt__p_std__shared_ptrT_Output_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__shared_ptrT_dsp__Buffer_t[] = {  {&_swigt__p_std__shared_ptrT_dsp__Buffer_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__shared_ptrT_dsp__MidiBuffer_t[] = {  {&_swigt__p_std__shared_ptrT_dsp__MidiBuffer_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__shared_ptrT_std__functionT_double_fdoubleF_t_t[] = {  {&_swigt__p_std__shared_ptrT_std__functionT_double_fdoubleF_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__unordered_setT_uint8_t_t[] = {  {&_swigt__p_std__unordered_setT_uint8_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_double_t[] = {  {&_swigt__p_std__vectorT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_std__shared_ptrT_Buffer_t_t[] = {  {&_swigt__p_std__vectorT_std__shared_ptrT_Buffer_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_uint8_t_t[] = {  {&_swigt__p_std__vectorT_uint8_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_uint8_t[] = {  {&_swigt__p_uint8_t, 0, 0, 0},{0, 0, 0, 0}};

static swig_cast_info *swig_cast_initial[] = {
  _swigc__p_MidiMessage,
  _swigc__p_double,
  _swigc__p_dsp__AbsoluteValue,
  _swigc__p_dsp__AudioBufferT_dsp__Sample_t,
  _swigc__p_dsp__AudioWrapperT_dsp__Sample_t,
  _swigc__p_dsp__Biquad,
  _swigc__p_dsp__BooleanMask,
  _swigc__p_dsp__BufferDuration,
  _swigc__p_dsp__BufferRate,
  _swigc__p_dsp__ChannelMerger,
  _swigc__p_dsp__ChannelSplitter,
  _swigc__p_dsp__Clipper,
  _swigc__p_dsp__ClockTrigger,
  _swigc__p_dsp__Comparison,
  _swigc__p_dsp__CompressorGate,
  _swigc__p_dsp__Consumer,
  _swigc__p_dsp__Convolver,
  _swigc__p_dsp__Crossover,
  _swigc__p_dsp__Differentiator,
  _swigc__p_dsp__Division,
  _swigc__p_dsp__DryWet,
  _swigc__p_dsp__Envelope,
  _swigc__p_dsp__Floor,
  _swigc__p_dsp__ForwardFFT,
  _swigc__p_dsp__FrequencyToNote,
  _swigc__p_dsp__FunctionOscillator,
  _swigc__p_dsp__Hyperbolic,
  _swigc__p_dsp__Identity,
  _swigc__p_dsp__Integrator,
  _swigc__p_dsp__Interpolation,
  _swigc__p_dsp__InverseFFT,
  _swigc__p_dsp__Lag,
  _swigc__p_dsp__Logarithm,
  _swigc__p_dsp__MidSide,
  _swigc__p_dsp__MidiBuffer,
  _swigc__p_dsp__MidiBuffer__Iterator,
  _swigc__p_dsp__MidiInput,
  _swigc__p_dsp__MidiMessage,
  _swigc__p_dsp__MidiOutput,
  _swigc__p_dsp__Modulo,
  _swigc__p_dsp__MoorerOscillator,
  _swigc__p_dsp__Multiplication,
  _swigc__p_dsp__Negative,
  _swigc__p_dsp__Noise,
  _swigc__p_dsp__NotGate,
  _swigc__p_dsp__NoteToFrequency,
  _swigc__p_dsp__OnOff,
  _swigc__p_dsp__OnePole,
  _swigc__p_dsp__Phasor,
  _swigc__p_dsp__Power,
  _swigc__p_dsp__Producer,
  _swigc__p_dsp__Reciprocal,
  _swigc__p_dsp__Recorder,
  _swigc__p_dsp__ResetTrigger,
  _swigc__p_dsp__SampleAndHold,
  _swigc__p_dsp__SampleDuration,
  _swigc__p_dsp__SamplePlayer,
  _swigc__p_dsp__SampleRate,
  _swigc__p_dsp__ScaledFFT,
  _swigc__p_dsp__Sequencer,
  _swigc__p_dsp__Shape,
  _swigc__p_dsp__Shaper,
  _swigc__p_dsp__Spread,
  _swigc__p_dsp__StereoPanner,
  _swigc__p_dsp__TableOscillator,
  _swigc__p_dsp__TimedMidiMessage,
  _swigc__p_dsp__Transformer,
  _swigc__p_dsp__TriggerHold,
  _swigc__p_dsp__Trigonometric,
  _swigc__p_dsp__VariableDelay,
  _swigc__p_std__functionT_void_fF_t,
  _swigc__p_std__shared_ptrT_Buffer_t,
  _swigc__p_std__shared_ptrT_Input_t,
  _swigc__p_std__shared_ptrT_Node_t,
  _swigc__p_std__shared_ptrT_Output_t,
  _swigc__p_std__shared_ptrT_dsp__Buffer_t,
  _swigc__p_std__shared_ptrT_dsp__MidiBuffer_t,
  _swigc__p_std__shared_ptrT_std__functionT_double_fdoubleF_t_t,
  _swigc__p_std__unordered_setT_uint8_t_t,
  _swigc__p_std__vectorT_double_t,
  _swigc__p_std__vectorT_std__shared_ptrT_Buffer_t_t,
  _swigc__p_std__vectorT_uint8_t_t,
  _swigc__p_uint8_t,
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

/* -----------------------------------------------------------------------------
 * Type initialization:
 * This problem is tough by the requirement that no dynamic
 * memory is used. Also, since swig_type_info structures store pointers to
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization.
 * The idea is that swig generates all the structures that are needed.
 * The runtime then collects these partially filled structures.
 * The SWIG_InitializeModule function takes these initial arrays out of
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.
 *
 * The generated swig_type_info structures are assigned statically to an initial
 * array. We just loop through that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.
 *
 * First off, we lookup the cast->type name to see if it is already loaded.
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* c-mode */
#endif
#endif

#if 0
#define SWIGRUNTIME_DEBUG
#endif

#ifndef SWIG_INIT_CLIENT_DATA_TYPE
#define SWIG_INIT_CLIENT_DATA_TYPE void *
#endif

SWIGRUNTIME void
SWIG_InitializeModule(SWIG_INIT_CLIENT_DATA_TYPE clientdata) {
  size_t i;
  swig_module_info *module_head, *iter;
  int init;

  /* check to see if the circular list has been setup, if not, set it up */
  if (swig_module.next==0) {
    /* Initialize the swig_module */
    swig_module.type_initial = swig_type_initial;
    swig_module.cast_initial = swig_cast_initial;
    swig_module.next = &swig_module;
    init = 1;
  } else {
    init = 0;
  }

  /* Try and load any already created modules */
  module_head = SWIG_GetModule(clientdata);
  if (!module_head) {
    /* This is the first module loaded for this interpreter */
    /* so set the swig module into the interpreter */
    SWIG_SetModule(clientdata, &swig_module);
  } else {
    /* the interpreter has loaded a SWIG module, but has it loaded this one? */
    iter=module_head;
    do {
      if (iter==&swig_module) {
        /* Our module is already in the list, so there's nothing more to do. */
        return;
      }
      iter=iter->next;
    } while (iter!= module_head);

    /* otherwise we must add our module into the list */
    swig_module.next = module_head->next;
    module_head->next = &swig_module;
  }

  /* When multiple interpreters are used, a module could have already been initialized in
     a different interpreter, but not yet have a pointer in this interpreter.
     In this case, we do not want to continue adding types... everything should be
     set up already */
  if (init == 0) return;

  /* Now work on filling in swig_module.types */
#ifdef SWIGRUNTIME_DEBUG
  printf("SWIG_InitializeModule: size %lu\n", (unsigned long)swig_module.size);
#endif
  for (i = 0; i < swig_module.size; ++i) {
    swig_type_info *type = 0;
    swig_type_info *ret;
    swig_cast_info *cast;

#ifdef SWIGRUNTIME_DEBUG
    printf("SWIG_InitializeModule: type %lu %s\n", (unsigned long)i, swig_module.type_initial[i]->name);
#endif

    /* if there is another module already loaded */
    if (swig_module.next != &swig_module) {
      type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
    }
    if (type) {
      /* Overwrite clientdata field */
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found type %s\n", type->name);
#endif
      if (swig_module.type_initial[i]->clientdata) {
	type->clientdata = swig_module.type_initial[i]->clientdata;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found and overwrite type %s \n", type->name);
#endif
      }
    } else {
      type = swig_module.type_initial[i];
    }

    /* Insert casting types */
    cast = swig_module.cast_initial[i];
    while (cast->type) {

      /* Don't need to add information already in the list */
      ret = 0;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: look cast %s\n", cast->type->name);
#endif
      if (swig_module.next != &swig_module) {
        ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
#ifdef SWIGRUNTIME_DEBUG
	if (ret) printf("SWIG_InitializeModule: found cast %s\n", ret->name);
#endif
      }
      if (ret) {
	if (type == swig_module.type_initial[i]) {
#ifdef SWIGRUNTIME_DEBUG
	  printf("SWIG_InitializeModule: skip old type %s\n", ret->name);
#endif
	  cast->type = ret;
	  ret = 0;
	} else {
	  /* Check for casting already in the list */
	  swig_cast_info *ocast = SWIG_TypeCheck(ret->name, type);
#ifdef SWIGRUNTIME_DEBUG
	  if (ocast) printf("SWIG_InitializeModule: skip old cast %s\n", ret->name);
#endif
	  if (!ocast) ret = 0;
	}
      }

      if (!ret) {
#ifdef SWIGRUNTIME_DEBUG
	printf("SWIG_InitializeModule: adding cast %s\n", cast->type->name);
#endif
        if (type->cast) {
          type->cast->prev = cast;
          cast->next = type->cast;
        }
        type->cast = cast;
      }
      cast++;
    }
    /* Set entry in modules->types array equal to the type */
    swig_module.types[i] = type;
  }
  swig_module.types[i] = 0;

#ifdef SWIGRUNTIME_DEBUG
  printf("**** SWIG_InitializeModule: Cast List ******\n");
  for (i = 0; i < swig_module.size; ++i) {
    int j = 0;
    swig_cast_info *cast = swig_module.cast_initial[i];
    printf("SWIG_InitializeModule: type %lu %s\n", (unsigned long)i, swig_module.type_initial[i]->name);
    while (cast->type) {
      printf("SWIG_InitializeModule: cast type %s\n", cast->type->name);
      cast++;
      ++j;
    }
  printf("---- Total casts: %d\n",j);
  }
  printf("**** SWIG_InitializeModule: Cast List ******\n");
#endif
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/
SWIGRUNTIME void
SWIG_PropagateClientData(void) {
  size_t i;
  swig_cast_info *equiv;
  static int init_run = 0;

  if (init_run) return;
  init_run = 1;

  for (i = 0; i < swig_module.size; i++) {
    if (swig_module.types[i]->clientdata) {
      equiv = swig_module.types[i]->cast;
      while (equiv) {
        if (!equiv->converter) {
          if (equiv->type && !equiv->type->clientdata)
            SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
        }
        equiv = equiv->next;
      }
    }
  }
}

#ifdef __cplusplus
#if 0
{ /* c-mode */
#endif
}
#endif



/* Forward declaration of where the user's %init{} gets inserted */
void SWIG_init_user(lua_State* L );
    
#ifdef __cplusplus
extern "C" {
#endif
/* this is the initialization function
  added at the very end of the code
  the function is always called SWIG_init, but an earlier #define will rename it
*/
#if ((SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC))
LUALIB_API int SWIG_init(lua_State* L)
#else
SWIGEXPORT int SWIG_init(lua_State* L) /* default Lua action */
#endif
{
#if (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC) /* valid for both Lua and eLua */
  int i;
  int globalRegister = 0;
  /* start with global table */
  lua_pushglobaltable (L);
  /* SWIG's internal initialisation */
  SWIG_InitializeModule((void*)L);
  SWIG_PropagateClientData();
#endif

#if ((SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUA) && (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC)) || defined(SWIG_LUA_ELUA_EMULATE)
  /* add a global fn */
  SWIG_Lua_add_function(L,"swig_type",SWIG_Lua_type);
  SWIG_Lua_add_function(L,"swig_equals",SWIG_Lua_class_equal);
#endif

#if (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC)
  /* set up base class pointers (the hierarchy) */
  for (i = 0; swig_types[i]; i++){
    if (swig_types[i]->clientdata){
      SWIG_Lua_init_base_class(L,(swig_lua_class*)(swig_types[i]->clientdata));
    }
  }
#ifdef SWIG_LUA_MODULE_GLOBAL
  globalRegister = 1;
#endif


#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA)
  SWIG_Lua_namespace_register(L,&swig_SwigModule, globalRegister);
#endif

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)
  for (i = 0; swig_types[i]; i++){
    if (swig_types[i]->clientdata){
      SWIG_Lua_elua_class_register_instance(L,(swig_lua_class*)(swig_types[i]->clientdata));
    }
  }
#endif

#if defined(SWIG_LUA_ELUA_EMULATE)
  lua_newtable(L);
  SWIG_Lua_elua_emulate_register(L,swig_SwigModule.ns_methods);
  SWIG_Lua_elua_emulate_register_clear(L);
  if(globalRegister) {
    lua_pushstring(L,swig_SwigModule.name);
    lua_pushvalue(L,-2);
    lua_rawset(L,-4);
  }
#endif

#endif

#if (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC)
  /* invoke user-specific initialization */
  SWIG_init_user(L);
  /* end module */
  /* Note: We do not clean up the stack here (Lua will do this for us). At this
     point, we have the globals table and out module table on the stack. Returning
     one value makes the module table the result of the require command. */
  return 1;
#else
  return 0;
#endif
}

#ifdef __cplusplus
}
#endif


const char* SWIG_LUACODE=
  "";

void SWIG_init_user(lua_State* L)
{
  /* exec Lua code if applicable */
  SWIG_Lua_dostring(L,SWIG_LUACODE);
}

