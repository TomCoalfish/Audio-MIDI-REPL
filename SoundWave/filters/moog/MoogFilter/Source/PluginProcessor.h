/*
 ==============================================================================
 
	This file was auto-generated by the Introjucer!
 
	It contains the basic framework code for a JUCE plugin processor.
 
 ==============================================================================
 */

#ifndef PLUGINPROCESSOR_H_INCLUDED
#define PLUGINPROCESSOR_H_INCLUDED

#include "../JuceLibraryCode/JuceHeader.h"
#include "MoogFilter.h"


//==============================================================================
/**
 */
class MoogFilterAudioProcessor  : public AudioProcessor
{
public:
	//==============================================================================
	MoogFilterAudioProcessor();
	~MoogFilterAudioProcessor();
	
	//==============================================================================
	void prepareToPlay (double sampleRate, int samplesPerBlock) override;
	void releaseResources() override;
	
	void processBlock (AudioSampleBuffer&, MidiBuffer&) override;
	
	//==============================================================================
	AudioProcessorEditor* createEditor() override;
	bool hasEditor() const override;
	
	//==============================================================================
	const String getName() const override;
	
	int getNumParameters() override;
	float getParameter (int index) override;
	void setParameter (int index, float newValue) override;
	
	const String getParameterName (int index) override;
	const String getParameterText (int index) override;
	
	const String getInputChannelName (int channelIndex) const override;
	const String getOutputChannelName (int channelIndex) const override;
	bool isInputChannelStereoPair (int index) const override;
	bool isOutputChannelStereoPair (int index) const override;
	
	bool acceptsMidi() const override;
	bool producesMidi() const override;
	bool silenceInProducesSilenceOut() const override;
	double getTailLengthSeconds() const override;
	
	//==============================================================================
	int getNumPrograms() override;
	int getCurrentProgram() override;
	void setCurrentProgram (int index) override;
	const String getProgramName (int index) override;
	void changeProgramName (int index, const String& newName) override;
	
	//==============================================================================
	void getStateInformation (MemoryBlock& destData) override;
	void setStateInformation (const void* data, int sizeInBytes) override;
	
	enum Parameters{
		frequency,
		resonance,
		drive,
		totalNumParam
	};
	
	bool NeedsUIUpdate() {
		return UIUpdateFlag;
	}
	void RequestUIUpdate() {
		UIUpdateFlag=true;
	}
	void ClearUIUpdateFlag() {
		UIUpdateFlag=false;
	}
	
	// functions courtesy of Redwood Audio
	// http://www.redwoodaudio.net/Tutorials/juce_for_vst_development__intro6.html
	
	String floatArrayToString(float* fData, int numFloat)
	{
		String result = "";
		if (numFloat < 1)
			return result;
		for (int i = 0; i < (numFloat - 1); i++) result << String(fData[i]) << ",";
		result << String(fData[numFloat - 1]);
		return result;
	}
	int stringToFloatArray(String sFloatCSV, float* fData, int maxNumFloat)
	{
		StringArray Tokenizer;
		int TokenCount = Tokenizer.addTokens(sFloatCSV, ",", "");
		int resultCount = (maxNumFloat <= TokenCount) ? maxNumFloat : TokenCount;
		for(int i = 0; i < resultCount; i++) fData[i] = Tokenizer[i].getFloatValue();
		return ((TokenCount <= maxNumFloat) ? resultCount : -1);
	}
	
private:
	//==============================================================================
	JUCE_DECLARE_NON_COPYABLE_WITH_LEAK_DETECTOR (MoogFilterAudioProcessor)
	MoogFilter filter[2];
	float UserParams[totalNumParam];
	bool UIUpdateFlag;
};


#endif  // PLUGINPROCESSOR_H_INCLUDED
